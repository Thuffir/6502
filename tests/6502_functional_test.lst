AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

6334 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T
                        ;
                        ; Copyright (C) 2012-2020  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all opcodes of a 6502 emulator using all
                        ; addressing modes with focus on propper setting of the processor status
                        ; register bits.
                        ; 
                        ; version 05-jan-2020
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 written by Frank A. Kingswood
                        ; The assembler as65_142.zip can be obtained from my GitHub repository 
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers in listing
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original NMOS 6502 only! No unofficial
                        ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
                        ; not be tested. Decimal ops will only be tested with valid BCD operands and
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #0
                        ;                added license - GPLv3
                        ;   30-jul-2012  added configuration options
                        ;   01-aug-2012  added trap macro to allow user to change error handling
                        ;   01-dec-2012  fixed trap in branch field must be a branch
                        ;   02-mar-2013  fixed PLA flags not tested
                        ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
                        ;                added test sequence check to detect if tests jump their fence
                        ;   23-jul-2013  added RAM integrity check option
                        ;   16-aug-2013  added error report to standard output option
                        ;   13-dec-2014  added binary/decimal opcode table switch test
                        ;   14-dec-2014  improved relative address test
                        ;   23-aug-2015  added option to disable self modifying tests
                        ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
                        ;                added small branch offset pretest
                        ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
                        ;   04-dec-2017  fixed BRK only tested with interrupts enabled
                        ;                added option to skip the remainder of a failing test
                        ;                in report.i65
                        ;   05-jan-2020  fixed shifts not testing zero result and flag when last 1-bit
                        ;                is shifted out
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0001 =                  load_data_direct = 1
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
                        ;tested if you allow changing the interrupt status (I_flag = 3)
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $52 (82) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
0001 =                  zero_page = $1  
                        
                        ;data_segment memory start address, $7B (123) consecutive Bytes required
0200 =                  data_segment = $200  
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif  
                        
                        ;code_segment memory start address, 13.1kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
0400 =                  code_segment = $400  
                        
                        ;self modifying code may be disabled to allow running in ROM
                        ;0=part of the code is self modifying and must reside in RAM
                        ;1=tests disabled: branch range
0000 =                  disable_selfmod = 0
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3.5 kB)
0001 =                  report = 1
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
0000 =                  ram_top = 0
                        
                        ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
                        ;2=disable including decimal flag in processor status
0000 =                  disable_decimal = 0
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
0038 =                  faod    equ fao+decmode     ;+ ignore decimal
003c =                  faid    equ fai+decmode     ;+ ignore decimal
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking test of decimal bit
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                            if disable_decimal < 2
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
                            else
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faid)&m8   ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1|faid)      ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8   ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #\1|faod        ;invert expected flags + always on bits
                                    endm
                                endif
                            endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                                    
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                                
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                                    
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro 
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                  if disable_selfmod = 0
                                    sta range_adr   ;reset self modifying code
                                  endif
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execute test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm            
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
0001 =                          org zero_page
                        ;break test interrupt save
0001 : 00               irq_a   ds  1               ;a register
0002 : 00               irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags   
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
0003 :                  zpt                         ;6 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
0003 : 00               adfc    ds  1               ;carry flag before op
0004 : 00               ad1     ds  1               ;operand 1 - accumulator
0005 : 00               ad2     ds  1               ;operand 2 - memory / immediate
0006 : 00               adrl    ds  1               ;expected result bits 0-7
0007 : 00               adrh    ds  1               ;expected result bit 8 (carry)
0008 : 00               adrf    ds  1               ;expected flags NV0000ZC (only binary mode)
0009 : 00               sb2     ds  1               ;operand 2 complemented for subtract
000a :                  zp_bss
000a : 8001             zps     db  $80,1           ;additional shift pattern to test zero result & flag
000c : c3824100         zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
0010 : 7f               zp7f    db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
0011 : 001f7180         zpOR    db  0,$1f,$71,$80   ;test pattern for OR
0015 : 0fff7f80         zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0019 : ff0f8f8f         zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
001d : 1802             ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
001f : 1902                     dw  abs1+1
0021 : 1a02                     dw  abs1+2
0023 : 1b02                     dw  abs1+3
0025 : 1c02                     dw  abs7f
0027 : 2001             inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
0029 : 0302             indt    dw  abst            ;indirect pointer to store area in absolute memory
002b : 0402                     dw  abst+1
002d : 0502                     dw  abst+2
002f : 0602                     dw  abst+3
0031 : 0b01             inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
0033 : 5f02             indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
0035 : 6002                     dw  absAN+1
0037 : 6102                     dw  absAN+2
0039 : 6202                     dw  absAN+3
003b : 6302             indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
003d : 6402                     dw  absEO+1
003f : 6502                     dw  absEO+2
0041 : 6602                     dw  absEO+3
0043 : 5b02             indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
0045 : 5c02                     dw  absOR+1
0047 : 5d02                     dw  absOR+2
0049 : 5e02                     dw  absOR+3
                        ;add/subtract indirect pointers
004b : 0302             adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
004d : 0402             sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
004f : 0401             adiy2   dw  ada2-$ff        ;with offset for indirect indexed
0051 : 0501             sbiy2   dw  sba2-$ff
0053 :                  zp_bss_end
                           
0200 =                          org data_segment
0200 : 00               test_case   ds  1           ;current test number
0201 : 0000             ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
0203 :                  abst                        ;6 bytes store/modify test area
0203 : 00               ada2    ds  1               ;operand 2
0204 : 00               sba2    ds  1               ;operand 2 complemented for subtract
0205 : 00000000                 ds  4               ;fill remaining bytes
0209 :                  data_bss
                            if load_data_direct = 1
0209 : 2900             ex_andi and #0              ;execute immediate opcodes
020b : 60                       rts
020c : 4900             ex_eori eor #0              ;execute immediate opcodes
020e : 60                       rts
020f : 0900             ex_orai ora #0              ;execute immediate opcodes
0211 : 60                       rts
0212 : 6900             ex_adci adc #0              ;execute immediate opcodes
0214 : 60                       rts
0215 : e900             ex_sbci sbc #0              ;execute immediate opcodes
0217 : 60                       rts
                            else
                        ex_andi ds  3
                        ex_eori ds  3
                        ex_orai ds  3
                        ex_adci ds  3
                        ex_sbci ds  3
                            endif
                        ;zps    db  $80,1           ;additional shift patterns test zero result & flag
0218 : c3824100         abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
021c : 7f               abs7f   db  $7f             ;test pattern for compare
                        ;loads
021d : 80800002         fLDx    db  fn,fn,0,fz              ;expected flags for load
                        ;shifts
0221 :                  rASL                                ;expected result ASL & ROL -carry
0221 : 000286048200     rROL    db  0,2,$86,$04,$82,0
0227 : 010387058301     rROLc   db  1,3,$87,$05,$83,1       ;expected result ROL +carry
022d :                  rLSR                                ;expected result LSR & ROR -carry
022d : 400061412000     rROR    db  $40,0,$61,$41,$20,0
0233 : c080e1c1a080     rRORc   db  $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
0239 :                  fASL                                ;expected flags for shifts
0239 : 030081018002     fROL    db  fzc,0,fnc,fc,fn,fz      ;no carry in
023f : 010081018000     fROLc   db  fc,0,fnc,fc,fn,0        ;carry in 
0245 :                  fLSR 
0245 : 000301000102     fROR    db  0,fzc,fc,0,fc,fz        ;no carry in
024b : 808181808180     fRORc   db  fn,fnc,fnc,fn,fnc,fn    ;carry in
                        ;increments (decrements)
0251 : 7f80ff0001       rINC    db  $7f,$80,$ff,0,1         ;expected result for INC/DEC
0256 : 0080800200       fINC    db  0,fn,fn,fz,0            ;expected flags for INC/DEC
                        ;logical memory operand
025b : 001f7180         absOR   db  0,$1f,$71,$80           ;test pattern for OR
025f : 0fff7f80         absAN   db  $0f,$ff,$7f,$80         ;test pattern for AND
0263 : ff0f8f8f         absEO   db  $ff,$0f,$8f,$8f         ;test pattern for EOR
                        ;logical accu operand
0267 : 00f11f00         absORa  db  0,$f1,$1f,0             ;test pattern for OR
026b : f0ffffff         absANa  db  $f0,$ff,$ff,$ff         ;test pattern for AND
026f : fff0f00f         absEOa  db  $ff,$f0,$f0,$0f         ;test pattern for EOR
                        ;logical results
0273 : 00ff7f80         absrlo  db  0,$ff,$7f,$80
0277 : 02800080         absflo  db  fz,fn,0,fn
027b :                  data_bss_end
                        
                        
                                code
0400 =                          org code_segment
0400 : d8               start   cld
0401 : a2ff                     ldx #$ff
0403 : 9a                       txs
0404 : a900                     lda #0          ;*** test 0 = initialize
0406 : 8d0002                   sta test_case
0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                            
                        ;initialize I/O for report channel
                            if report = 1
0409 : 20c244                   jsr report_init
                            endif
                            
                        ;pretest small branch offset
040c : a205                     ldx #5
040e : 4c3604                   jmp psb_test
0411 :                  psb_bwok
0411 : a005                     ldy #5
0413 : d008                     bne psb_forw
                                trap        ;branch should be taken
0415 : 20d144          >        jsr report_error
                        
0418 : 88                       dey         ;forward landing zone
0419 : 88                       dey
041a : 88                       dey
041b : 88                       dey
041c : 88                       dey
041d :                  psb_forw
041d : 88                       dey
041e : 88                       dey
041f : 88                       dey
0420 : 88                       dey
0421 : 88                       dey
0422 : f017                     beq psb_fwok
                                trap        ;forward offset
0424 : 20d144          >        jsr report_error
                        
                        
0427 : ca                       dex         ;backward landing zone
0428 : ca                       dex
0429 : ca                       dex
042a : ca                       dex
042b : ca                       dex
042c :                  psb_back
042c : ca                       dex
042d : ca                       dex
042e : ca                       dex
042f : ca                       dex
0430 : ca                       dex
0431 : f0de                     beq psb_bwok
                                trap        ;backward offset
0433 : 20d144          >        jsr report_error
                        
0436 :                  psb_test
0436 : d0f4                     bne psb_back
                                trap        ;branch should be taken
0438 : 20d144          >        jsr report_error
                        
043b :                  psb_fwok
                                
                        ;initialize BSS segment
                            if load_data_direct != 1
                                ldx #zp_end-zp_init-1
                        ld_zp   lda zp_init,x
                                sta zp_bss,x
                                dex
                                bpl ld_zp
                                ldx #data_end-data_init-1
                        ld_data lda data_init,x
                                sta data_bss,x
                                dex
                                bpl ld_data
                              if ROM_vectors = 1
                                ldx #5
                        ld_vect lda vec_init,x
                                sta vec_bss,x
                                dex
                                bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                                
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
043b : a900                     lda #0 
043d : 8503                     sta zpt         ;set low byte of indirect pointer
043f : 8d0202                   sta ram_chksm+1 ;checksum high byte
                              if disable_selfmod = 0
0442 : 8d1f05                   sta range_adr   ;reset self modifying code
                              endif
0445 : 18                       clc
0446 : a209                     ldx #zp_bss-zero_page ;zeropage - write test area
0448 : 7501             gcs3    adc zero_page,x
044a : 9004                     bcc gcs2
044c : ee0202                   inc ram_chksm+1 ;carry to high byte
044f : 18                       clc
0450 : e8               gcs2    inx
0451 : d0f5                     bne gcs3
0453 : a202                     ldx #hi(abs1)   ;set high byte of indirect pointer
0455 : 8604                     stx zpt+1
0457 : a018                     ldy #lo(abs1)   ;data after write & execute test area
0459 : 7103             gcs5    adc (zpt),y
045b : 9004                     bcc gcs4
045d : ee0202                   inc ram_chksm+1 ;carry to high byte
0460 : 18                       clc
0461 : c8               gcs4    iny
0462 : d0f5                     bne gcs5
0464 : e8                       inx             ;advance RAM high address
0465 : 8604                     stx zpt+1
0467 : e000                     cpx #ram_top
0469 : d0ee                     bne gcs5
046b : 8d0102                   sta ram_chksm   ;checksum complete
                            endif
                                next_test            
046e : ad0002          >            lda test_case   ;previous test
0471 : c900            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0473 : f003            >        beq skip0006
                       >        trap            ;failed not equal (non zero)
0475 : 20d144          >        jsr report_error
                       >
0478 :                 >skip0006
                       >
0001 =                 >test_num = test_num + 1
0478 : a901            >            lda #test_num   ;*** next tests' number
047a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                            if disable_selfmod = 0
                        ;testing relative addressing with BEQ
047d : a0fe                     ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
047f :                  range_loop
047f : 88                       dey             ;next relative address
0480 : 98                       tya
0481 : aa                       tax             ;precharge count to end of loop
0482 : 1008                     bpl range_fw    ;calculate relative address
0484 : 18                       clc             ;avoid branch self or to relative address of branch
0485 : 6902                     adc #2
0487 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
0488 : ea                       nop
0489 : ea                       nop
048a : ea                       nop
048b : ea                       nop
048c :                  range_fw
048c : ea                       nop
048d : ea                       nop
048e : ea                       nop
048f : ea                       nop
0490 : ea                       nop
0491 : 497f                     eor #$7f        ;complement except sign
0493 : 8d1f05                   sta range_adr   ;load into test target
0496 : a900                     lda #0          ;should set zero flag in status register
0498 : 4c1e05                   jmp range_op
                                
049b : ca                       dex             ; offset landing zone - backward branch too far
049c : ca                       dex
049d : ca                       dex
049e : ca                       dex
049f : ca                       dex
                                ;relative address target field with branch under test in the middle
04a0 : ca                       dex             ;-128 - max backward
04a1 : ca                       dex
04a2 : ca                       dex
04a3 : ca                       dex
04a4 : ca                       dex
04a5 : ca                       dex
04a6 : ca                       dex
04a7 : ca                       dex
04a8 : ca                       dex             ;-120
04a9 : ca                       dex
04aa : ca                       dex
04ab : ca                       dex
04ac : ca                       dex
04ad : ca                       dex
04ae : ca                       dex
04af : ca                       dex
04b0 : ca                       dex
04b1 : ca                       dex
04b2 : ca                       dex             ;-110
04b3 : ca                       dex
04b4 : ca                       dex
04b5 : ca                       dex
04b6 : ca                       dex
04b7 : ca                       dex
04b8 : ca                       dex
04b9 : ca                       dex
04ba : ca                       dex
04bb : ca                       dex
04bc : ca                       dex             ;-100
04bd : ca                       dex
04be : ca                       dex
04bf : ca                       dex
04c0 : ca                       dex
04c1 : ca                       dex
04c2 : ca                       dex
04c3 : ca                       dex
04c4 : ca                       dex
04c5 : ca                       dex
04c6 : ca                       dex             ;-90
04c7 : ca                       dex
04c8 : ca                       dex
04c9 : ca                       dex
04ca : ca                       dex
04cb : ca                       dex
04cc : ca                       dex
04cd : ca                       dex
04ce : ca                       dex
04cf : ca                       dex
04d0 : ca                       dex             ;-80
04d1 : ca                       dex
04d2 : ca                       dex
04d3 : ca                       dex
04d4 : ca                       dex
04d5 : ca                       dex
04d6 : ca                       dex
04d7 : ca                       dex
04d8 : ca                       dex
04d9 : ca                       dex
04da : ca                       dex             ;-70
04db : ca                       dex
04dc : ca                       dex
04dd : ca                       dex
04de : ca                       dex
04df : ca                       dex
04e0 : ca                       dex
04e1 : ca                       dex
04e2 : ca                       dex
04e3 : ca                       dex
04e4 : ca                       dex             ;-60
04e5 : ca                       dex
04e6 : ca                       dex
04e7 : ca                       dex
04e8 : ca                       dex
04e9 : ca                       dex
04ea : ca                       dex
04eb : ca                       dex
04ec : ca                       dex
04ed : ca                       dex
04ee : ca                       dex             ;-50
04ef : ca                       dex
04f0 : ca                       dex
04f1 : ca                       dex
04f2 : ca                       dex
04f3 : ca                       dex
04f4 : ca                       dex
04f5 : ca                       dex
04f6 : ca                       dex
04f7 : ca                       dex
04f8 : ca                       dex             ;-40
04f9 : ca                       dex
04fa : ca                       dex
04fb : ca                       dex
04fc : ca                       dex
04fd : ca                       dex
04fe : ca                       dex
04ff : ca                       dex
0500 : ca                       dex
0501 : ca                       dex
0502 : ca                       dex             ;-30
0503 : ca                       dex
0504 : ca                       dex
0505 : ca                       dex
0506 : ca                       dex
0507 : ca                       dex
0508 : ca                       dex
0509 : ca                       dex
050a : ca                       dex
050b : ca                       dex
050c : ca                       dex             ;-20
050d : ca                       dex
050e : ca                       dex
050f : ca                       dex
0510 : ca                       dex
0511 : ca                       dex
0512 : ca                       dex
0513 : ca                       dex
0514 : ca                       dex
0515 : ca                       dex
0516 : ca                       dex             ;-10
0517 : ca                       dex
0518 : ca                       dex
0519 : ca                       dex
051a : ca                       dex
051b : ca                       dex
051c : ca                       dex
051d : ca                       dex             ;-3
051e :                  range_op                ;test target with zero flag=0, z=1 if previous dex
051f =                  range_adr   = *+1       ;modifiable relative address
051e : f03e                     beq *+64        ;+64 if called without modification
0520 : ca                       dex             ;+0
0521 : ca                       dex
0522 : ca                       dex
0523 : ca                       dex
0524 : ca                       dex
0525 : ca                       dex
0526 : ca                       dex
0527 : ca                       dex
0528 : ca                       dex
0529 : ca                       dex
052a : ca                       dex             ;+10
052b : ca                       dex
052c : ca                       dex
052d : ca                       dex
052e : ca                       dex
052f : ca                       dex
0530 : ca                       dex
0531 : ca                       dex
0532 : ca                       dex
0533 : ca                       dex
0534 : ca                       dex             ;+20
0535 : ca                       dex
0536 : ca                       dex
0537 : ca                       dex
0538 : ca                       dex
0539 : ca                       dex
053a : ca                       dex
053b : ca                       dex
053c : ca                       dex
053d : ca                       dex
053e : ca                       dex             ;+30
053f : ca                       dex
0540 : ca                       dex
0541 : ca                       dex
0542 : ca                       dex
0543 : ca                       dex
0544 : ca                       dex
0545 : ca                       dex
0546 : ca                       dex
0547 : ca                       dex
0548 : ca                       dex             ;+40
0549 : ca                       dex
054a : ca                       dex
054b : ca                       dex
054c : ca                       dex
054d : ca                       dex
054e : ca                       dex
054f : ca                       dex
0550 : ca                       dex
0551 : ca                       dex
0552 : ca                       dex             ;+50
0553 : ca                       dex
0554 : ca                       dex
0555 : ca                       dex
0556 : ca                       dex
0557 : ca                       dex
0558 : ca                       dex
0559 : ca                       dex
055a : ca                       dex
055b : ca                       dex
055c : ca                       dex             ;+60
055d : ca                       dex
055e : ca                       dex
055f : ca                       dex
0560 : ca                       dex
0561 : ca                       dex
0562 : ca                       dex
0563 : ca                       dex
0564 : ca                       dex
0565 : ca                       dex
0566 : ca                       dex             ;+70
0567 : ca                       dex
0568 : ca                       dex
0569 : ca                       dex
056a : ca                       dex
056b : ca                       dex
056c : ca                       dex
056d : ca                       dex
056e : ca                       dex
056f : ca                       dex
0570 : ca                       dex             ;+80
0571 : ca                       dex
0572 : ca                       dex
0573 : ca                       dex
0574 : ca                       dex
0575 : ca                       dex
0576 : ca                       dex
0577 : ca                       dex
0578 : ca                       dex
0579 : ca                       dex
057a : ca                       dex             ;+90
057b : ca                       dex
057c : ca                       dex
057d : ca                       dex
057e : ca                       dex
057f : ca                       dex
0580 : ca                       dex
0581 : ca                       dex
0582 : ca                       dex
0583 : ca                       dex
0584 : ca                       dex             ;+100
0585 : ca                       dex
0586 : ca                       dex
0587 : ca                       dex
0588 : ca                       dex
0589 : ca                       dex
058a : ca                       dex
058b : ca                       dex
058c : ca                       dex
058d : ca                       dex
058e : ca                       dex             ;+110
058f : ca                       dex
0590 : ca                       dex
0591 : ca                       dex
0592 : ca                       dex
0593 : ca                       dex
0594 : ca                       dex
0595 : ca                       dex
0596 : ca                       dex
0597 : ca                       dex
0598 : ca                       dex             ;+120
0599 : ca                       dex
059a : ca                       dex
059b : ca                       dex
059c : ca                       dex
059d : ca                       dex
059e : ca                       dex
059f : ea                       nop             ;offset landing zone - forward branch too far
05a0 : ea                       nop
05a1 : ea                       nop
05a2 : ea                       nop
05a3 : ea                       nop
05a4 : f008                     beq range_ok    ;+127 - max forward
                                trap            ; bad range
05a6 : 20d144          >        jsr report_error
                        
05a9 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
05aa : ea                       nop
05ab : ea                       nop
05ac : ea                       nop
05ad : ea                       nop
05ae :                  range_ok
05ae : ea                       nop
05af : ea                       nop
05b0 : ea                       nop
05b1 : ea                       nop
05b2 : ea                       nop
05b3 : c000                     cpy #0
05b5 : f003                     beq range_end   
05b7 : 4c7f04                   jmp range_loop
05ba :                  range_end               ;range test successful
                            endif
                                next_test
05ba : ad0002          >            lda test_case   ;previous test
05bd : c901            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
05bf : f003            >        beq skip0010
                       >        trap            ;failed not equal (non zero)
05c1 : 20d144          >        jsr report_error
                       >
05c4 :                 >skip0010
                       >
0002 =                 >test_num = test_num + 1
05c4 : a902            >            lda #test_num   ;*** next tests' number
05c6 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;partial test BNE & CMP, CPX, CPY immediate
05c9 : c001                     cpy #1          ;testing BNE true
05cb : d003                     bne test_bne
                                trap 
05cd : 20d144          >        jsr report_error
                        
05d0 :                  test_bne
05d0 : a900                     lda #0 
05d2 : c900                     cmp #0          ;test compare immediate 
                                trap_ne
05d4 : f003            >        beq skip0013
                       >        trap            ;failed not equal (non zero)
05d6 : 20d144          >        jsr report_error
                       >
05d9 :                 >skip0013
                        
                                trap_cc
05d9 : b003            >        bcs skip0015
                       >        trap            ;failed carry clear
05db : 20d144          >        jsr report_error
                       >
05de :                 >skip0015
                        
                                trap_mi
05de : 1003            >        bpl skip0017
                       >        trap            ;failed minus (bit 7 set)
05e0 : 20d144          >        jsr report_error
                       >
05e3 :                 >skip0017
                        
05e3 : c901                     cmp #1
                                trap_eq 
05e5 : d003            >        bne skip0019
                       >        trap           ;failed equal (zero)
05e7 : 20d144          >        jsr report_error
                       >
05ea :                 >skip0019
                        
                                trap_cs
05ea : 9003            >        bcc skip0021
                       >        trap            ;failed carry set
05ec : 20d144          >        jsr report_error
                       >
05ef :                 >skip0021
                        
                                trap_pl
05ef : 3003            >        bmi skip0023
                       >        trap            ;failed plus (bit 7 clear)
05f1 : 20d144          >        jsr report_error
                       >
05f4 :                 >skip0023
                        
05f4 : aa                       tax 
05f5 : e000                     cpx #0          ;test compare x immediate
                                trap_ne
05f7 : f003            >        beq skip0025
                       >        trap            ;failed not equal (non zero)
05f9 : 20d144          >        jsr report_error
                       >
05fc :                 >skip0025
                        
                                trap_cc
05fc : b003            >        bcs skip0027
                       >        trap            ;failed carry clear
05fe : 20d144          >        jsr report_error
                       >
0601 :                 >skip0027
                        
                                trap_mi
0601 : 1003            >        bpl skip0029
                       >        trap            ;failed minus (bit 7 set)
0603 : 20d144          >        jsr report_error
                       >
0606 :                 >skip0029
                        
0606 : e001                     cpx #1
                                trap_eq 
0608 : d003            >        bne skip0031
                       >        trap           ;failed equal (zero)
060a : 20d144          >        jsr report_error
                       >
060d :                 >skip0031
                        
                                trap_cs
060d : 9003            >        bcc skip0033
                       >        trap            ;failed carry set
060f : 20d144          >        jsr report_error
                       >
0612 :                 >skip0033
                        
                                trap_pl
0612 : 3003            >        bmi skip0035
                       >        trap            ;failed plus (bit 7 clear)
0614 : 20d144          >        jsr report_error
                       >
0617 :                 >skip0035
                        
0617 : a8                       tay 
0618 : c000                     cpy #0          ;test compare y immediate
                                trap_ne
061a : f003            >        beq skip0037
                       >        trap            ;failed not equal (non zero)
061c : 20d144          >        jsr report_error
                       >
061f :                 >skip0037
                        
                                trap_cc
061f : b003            >        bcs skip0039
                       >        trap            ;failed carry clear
0621 : 20d144          >        jsr report_error
                       >
0624 :                 >skip0039
                        
                                trap_mi
0624 : 1003            >        bpl skip0041
                       >        trap            ;failed minus (bit 7 set)
0626 : 20d144          >        jsr report_error
                       >
0629 :                 >skip0041
                        
0629 : c001                     cpy #1
                                trap_eq 
062b : d003            >        bne skip0043
                       >        trap           ;failed equal (zero)
062d : 20d144          >        jsr report_error
                       >
0630 :                 >skip0043
                        
                                trap_cs
0630 : 9003            >        bcc skip0045
                       >        trap            ;failed carry set
0632 : 20d144          >        jsr report_error
                       >
0635 :                 >skip0045
                        
                                trap_pl
0635 : 3003            >        bmi skip0047
                       >        trap            ;failed plus (bit 7 clear)
0637 : 20d144          >        jsr report_error
                       >
063a :                 >skip0047
                        
                                next_test
063a : ad0002          >            lda test_case   ;previous test
063d : c902            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
063f : f003            >        beq skip0050
                       >        trap            ;failed not equal (non zero)
0641 : 20d144          >        jsr report_error
                       >
0644 :                 >skip0050
                       >
0003 =                 >test_num = test_num + 1
0644 : a903            >            lda #test_num   ;*** next tests' number
0646 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ;testing stack operations PHA PHP PLA PLP
                                    
0649 : a2ff                     ldx #$ff        ;initialize stack
064b : 9a                       txs
064c : a955                     lda #$55
064e : 48                       pha
064f : a9aa                     lda #$aa
0651 : 48                       pha
0652 : cdfe01                   cmp $1fe        ;on stack ?
                                trap_ne
0655 : f003            >        beq skip0052
                       >        trap            ;failed not equal (non zero)
0657 : 20d144          >        jsr report_error
                       >
065a :                 >skip0052
                        
065a : ba                       tsx
065b : 8a                       txa             ;overwrite accu
065c : c9fd                     cmp #$fd        ;sp decremented?
                                trap_ne
065e : f003            >        beq skip0054
                       >        trap            ;failed not equal (non zero)
0660 : 20d144          >        jsr report_error
                       >
0663 :                 >skip0054
                        
0663 : 68                       pla
0664 : c9aa                     cmp #$aa        ;successful retreived from stack?
                                trap_ne
0666 : f003            >        beq skip0056
                       >        trap            ;failed not equal (non zero)
0668 : 20d144          >        jsr report_error
                       >
066b :                 >skip0056
                        
066b : 68                       pla
066c : c955                     cmp #$55
                                trap_ne
066e : f003            >        beq skip0058
                       >        trap            ;failed not equal (non zero)
0670 : 20d144          >        jsr report_error
                       >
0673 :                 >skip0058
                        
0673 : cdff01                   cmp $1ff        ;remains on stack?
                                trap_ne
0676 : f003            >        beq skip0060
                       >        trap            ;failed not equal (non zero)
0678 : 20d144          >        jsr report_error
                       >
067b :                 >skip0060
                        
067b : ba                       tsx
067c : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
067e : f003            >        beq skip0062
                       >        trap            ;failed not equal (non zero)
0680 : 20d144          >        jsr report_error
                       >
0683 :                 >skip0062
                        
                                next_test
0683 : ad0002          >            lda test_case   ;previous test
0686 : c903            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0688 : f003            >        beq skip0065
                       >        trap            ;failed not equal (non zero)
068a : 20d144          >        jsr report_error
                       >
068d :                 >skip0065
                       >
0004 =                 >test_num = test_num + 1
068d : a904            >            lda #test_num   ;*** next tests' number
068f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
                                set_stat $ff    ;all on
                       >            load_flag $ff    
0692 : a9ff            >            lda #$ff                 ;allow test to change I-flag (no mask)
                       >
0694 : 48              >            pha         ;use stack to load status
0695 : 28              >            plp
                        
0696 : 101a                     bpl nbr1        ;branches should not be taken
0698 : 501b                     bvc nbr2
069a : 901c                     bcc nbr3
069c : d01d                     bne nbr4
069e : 3003                     bmi br1         ;branches should be taken
                                trap 
06a0 : 20d144          >        jsr report_error
                        
06a3 : 7003             br1     bvs br2
                                trap 
06a5 : 20d144          >        jsr report_error
                        
06a8 : b003             br2     bcs br3
                                trap 
06aa : 20d144          >        jsr report_error
                        
06ad : f00f             br3     beq br4
                                trap 
06af : 20d144          >        jsr report_error
                        
06b2 :                  nbr1
                                trap            ;previous bpl taken 
06b2 : 20d144          >        jsr report_error
                        
06b5 :                  nbr2
                                trap            ;previous bvc taken
06b5 : 20d144          >        jsr report_error
                        
06b8 :                  nbr3
                                trap            ;previous bcc taken
06b8 : 20d144          >        jsr report_error
                        
06bb :                  nbr4
                                trap            ;previous bne taken
06bb : 20d144          >        jsr report_error
                        
06be : 08               br4     php
06bf : ba                       tsx
06c0 : e0fe                     cpx #$fe        ;sp after php?
                                trap_ne
06c2 : f003            >        beq skip0077
                       >        trap            ;failed not equal (non zero)
06c4 : 20d144          >        jsr report_error
                       >
06c7 :                 >skip0077
                        
06c7 : 68                       pla
                                cmp_flag $ff    ;returned all flags on?
06c8 : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
06ca : f003            >        beq skip0080
                       >        trap            ;failed not equal (non zero)
06cc : 20d144          >        jsr report_error
                       >
06cf :                 >skip0080
                        
06cf : ba                       tsx
06d0 : e0ff                     cpx #$ff        ;sp after php?
                                trap_ne
06d2 : f003            >        beq skip0082
                       >        trap            ;failed not equal (non zero)
06d4 : 20d144          >        jsr report_error
                       >
06d7 :                 >skip0082
                        
                                set_stat 0      ;all off
                       >            load_flag 0      
06d7 : a900            >            lda #0                   ;allow test to change I-flag (no mask)
                       >
06d9 : 48              >            pha         ;use stack to load status
06da : 28              >            plp
                        
06db : 301a                     bmi nbr11       ;branches should not be taken
06dd : 701b                     bvs nbr12
06df : b01c                     bcs nbr13
06e1 : f01d                     beq nbr14
06e3 : 1003                     bpl br11        ;branches should be taken
                                trap 
06e5 : 20d144          >        jsr report_error
                        
06e8 : 5003             br11    bvc br12
                                trap 
06ea : 20d144          >        jsr report_error
                        
06ed : 9003             br12    bcc br13
                                trap 
06ef : 20d144          >        jsr report_error
                        
06f2 : d00f             br13    bne br14
                                trap 
06f4 : 20d144          >        jsr report_error
                        
06f7 :                  nbr11
                                trap            ;previous bmi taken 
06f7 : 20d144          >        jsr report_error
                        
06fa :                  nbr12
                                trap            ;previous bvs taken 
06fa : 20d144          >        jsr report_error
                        
06fd :                  nbr13
                                trap            ;previous bcs taken 
06fd : 20d144          >        jsr report_error
                        
0700 :                  nbr14
                                trap            ;previous beq taken 
0700 : 20d144          >        jsr report_error
                        
0703 : 08               br14    php
0704 : 68                       pla
                                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
0705 : c930            >            cmp #(0      |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
0707 : f003            >        beq skip0095
                       >        trap            ;failed not equal (non zero)
0709 : 20d144          >        jsr report_error
                       >
070c :                 >skip0095
                        
                                ;crosscheck flags
                                set_stat zero
                       >            load_flag zero
070c : a902            >            lda #zero             ;allow test to change I-flag (no mask)
                       >
070e : 48              >            pha         ;use stack to load status
070f : 28              >            plp
                        
0710 : d002                     bne brzs1
0712 : f003                     beq brzs2
0714 :                  brzs1
                                trap            ;branch zero/non zero
0714 : 20d144          >        jsr report_error
                        
0717 : b002             brzs2   bcs brzs3
0719 : 9003                     bcc brzs4
071b :                  brzs3
                                trap            ;branch carry/no carry
071b : 20d144          >        jsr report_error
                        
071e : 3002             brzs4   bmi brzs5
0720 : 1003                     bpl brzs6
0722 :                  brzs5
                                trap            ;branch minus/plus
0722 : 20d144          >        jsr report_error
                        
0725 : 7002             brzs6   bvs brzs7
0727 : 5003                     bvc brzs8
0729 :                  brzs7
                                trap            ;branch overflow/no overflow
0729 : 20d144          >        jsr report_error
                        
072c :                  brzs8
                                set_stat carry
                       >            load_flag carry
072c : a901            >            lda #carry             ;allow test to change I-flag (no mask)
                       >
072e : 48              >            pha         ;use stack to load status
072f : 28              >            plp
                        
0730 : f002                     beq brcs1
0732 : d003                     bne brcs2
0734 :                  brcs1
                                trap            ;branch zero/non zero
0734 : 20d144          >        jsr report_error
                        
0737 : 9002             brcs2   bcc brcs3
0739 : b003                     bcs brcs4
073b :                  brcs3
                                trap            ;branch carry/no carry
073b : 20d144          >        jsr report_error
                        
073e : 3002             brcs4   bmi brcs5
0740 : 1003                     bpl brcs6
0742 :                  brcs5
                                trap            ;branch minus/plus
0742 : 20d144          >        jsr report_error
                        
0745 : 7002             brcs6   bvs brcs7
0747 : 5003                     bvc brcs8
0749 :                  brcs7
                                trap            ;branch overflow/no overflow
0749 : 20d144          >        jsr report_error
                        
                        
074c :                  brcs8
                                set_stat minus
                       >            load_flag minus
074c : a980            >            lda #minus             ;allow test to change I-flag (no mask)
                       >
074e : 48              >            pha         ;use stack to load status
074f : 28              >            plp
                        
0750 : f002                     beq brmi1
0752 : d003                     bne brmi2
0754 :                  brmi1
                                trap            ;branch zero/non zero
0754 : 20d144          >        jsr report_error
                        
0757 : b002             brmi2   bcs brmi3
0759 : 9003                     bcc brmi4
075b :                  brmi3
                                trap            ;branch carry/no carry
075b : 20d144          >        jsr report_error
                        
075e : 1002             brmi4   bpl brmi5
0760 : 3003                     bmi brmi6
0762 :                  brmi5
                                trap            ;branch minus/plus
0762 : 20d144          >        jsr report_error
                        
0765 : 7002             brmi6   bvs brmi7
0767 : 5003                     bvc brmi8
0769 :                  brmi7
                                trap            ;branch overflow/no overflow
0769 : 20d144          >        jsr report_error
                        
076c :                  brmi8
                                set_stat overfl
                       >            load_flag overfl
076c : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
076e : 48              >            pha         ;use stack to load status
076f : 28              >            plp
                        
0770 : f002                     beq brvs1
0772 : d003                     bne brvs2
0774 :                  brvs1
                                trap            ;branch zero/non zero
0774 : 20d144          >        jsr report_error
                        
0777 : b002             brvs2   bcs brvs3
0779 : 9003                     bcc brvs4
077b :                  brvs3
                                trap            ;branch carry/no carry
077b : 20d144          >        jsr report_error
                        
077e : 3002             brvs4   bmi brvs5
0780 : 1003                     bpl brvs6
0782 :                  brvs5
                                trap            ;branch minus/plus
0782 : 20d144          >        jsr report_error
                        
0785 : 5002             brvs6   bvc brvs7
0787 : 7003                     bvs brvs8
0789 :                  brvs7
                                trap            ;branch overflow/no overflow
0789 : 20d144          >        jsr report_error
                        
078c :                  brvs8
                                set_stat $ff-zero
                       >            load_flag $ff-zero
078c : a9fd            >            lda #$ff-zero             ;allow test to change I-flag (no mask)
                       >
078e : 48              >            pha         ;use stack to load status
078f : 28              >            plp
                        
0790 : f002                     beq brzc1
0792 : d003                     bne brzc2
0794 :                  brzc1
                                trap            ;branch zero/non zero
0794 : 20d144          >        jsr report_error
                        
0797 : 9002             brzc2   bcc brzc3
0799 : b003                     bcs brzc4
079b :                  brzc3
                                trap            ;branch carry/no carry
079b : 20d144          >        jsr report_error
                        
079e : 1002             brzc4   bpl brzc5
07a0 : 3003                     bmi brzc6
07a2 :                  brzc5
                                trap            ;branch minus/plus
07a2 : 20d144          >        jsr report_error
                        
07a5 : 5002             brzc6   bvc brzc7
07a7 : 7003                     bvs brzc8
07a9 :                  brzc7
                                trap            ;branch overflow/no overflow
07a9 : 20d144          >        jsr report_error
                        
07ac :                  brzc8
                                set_stat $ff-carry
                       >            load_flag $ff-carry
07ac : a9fe            >            lda #$ff-carry             ;allow test to change I-flag (no mask)
                       >
07ae : 48              >            pha         ;use stack to load status
07af : 28              >            plp
                        
07b0 : d002                     bne brcc1
07b2 : f003                     beq brcc2
07b4 :                  brcc1
                                trap            ;branch zero/non zero
07b4 : 20d144          >        jsr report_error
                        
07b7 : b002             brcc2   bcs brcc3
07b9 : 9003                     bcc brcc4
07bb :                  brcc3
                                trap            ;branch carry/no carry
07bb : 20d144          >        jsr report_error
                        
07be : 1002             brcc4   bpl brcc5
07c0 : 3003                     bmi brcc6
07c2 :                  brcc5
                                trap            ;branch minus/plus
07c2 : 20d144          >        jsr report_error
                        
07c5 : 5002             brcc6   bvc brcc7
07c7 : 7003                     bvs brcc8
07c9 :                  brcc7
                                trap            ;branch overflow/no overflow
07c9 : 20d144          >        jsr report_error
                        
07cc :                  brcc8
                                set_stat $ff-minus
                       >            load_flag $ff-minus
07cc : a97f            >            lda #$ff-minus             ;allow test to change I-flag (no mask)
                       >
07ce : 48              >            pha         ;use stack to load status
07cf : 28              >            plp
                        
07d0 : d002                     bne brpl1
07d2 : f003                     beq brpl2
07d4 :                  brpl1
                                trap            ;branch zero/non zero
07d4 : 20d144          >        jsr report_error
                        
07d7 : 9002             brpl2   bcc brpl3
07d9 : b003                     bcs brpl4
07db :                  brpl3
                                trap            ;branch carry/no carry
07db : 20d144          >        jsr report_error
                        
07de : 3002             brpl4   bmi brpl5
07e0 : 1003                     bpl brpl6
07e2 :                  brpl5
                                trap            ;branch minus/plus
07e2 : 20d144          >        jsr report_error
                        
07e5 : 5002             brpl6   bvc brpl7
07e7 : 7003                     bvs brpl8
07e9 :                  brpl7
                                trap            ;branch overflow/no overflow
07e9 : 20d144          >        jsr report_error
                        
07ec :                  brpl8
                                set_stat $ff-overfl
                       >            load_flag $ff-overfl
07ec : a9bf            >            lda #$ff-overfl             ;allow test to change I-flag (no mask)
                       >
07ee : 48              >            pha         ;use stack to load status
07ef : 28              >            plp
                        
07f0 : d002                     bne brvc1
07f2 : f003                     beq brvc2
07f4 :                  brvc1
                                trap            ;branch zero/non zero
07f4 : 20d144          >        jsr report_error
                        
07f7 : 9002             brvc2   bcc brvc3
07f9 : b003                     bcs brvc4
07fb :                  brvc3
                                trap            ;branch carry/no carry
07fb : 20d144          >        jsr report_error
                        
07fe : 1002             brvc4   bpl brvc5
0800 : 3003                     bmi brvc6
0802 :                  brvc5
                                trap            ;branch minus/plus
0802 : 20d144          >        jsr report_error
                        
0805 : 7002             brvc6   bvs brvc7
0807 : 5003                     bvc brvc8
0809 :                  brvc7
                                trap            ;branch overflow/no overflow
0809 : 20d144          >        jsr report_error
                        
080c :                  brvc8
                                next_test
080c : ad0002          >            lda test_case   ;previous test
080f : c904            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0811 : f003            >        beq skip0146
                       >        trap            ;failed not equal (non zero)
0813 : 20d144          >        jsr report_error
                       >
0816 :                 >skip0146
                       >
0005 =                 >test_num = test_num + 1
0816 : a905            >            lda #test_num   ;*** next tests' number
0818 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; test PHA does not alter flags or accumulator but PLA does
081b : a255                     ldx #$55        ;x & y protected
081d : a0aa                     ldy #$aa
                                set_a 1,$ff     ;push
                       >            load_flag $ff     
081f : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
0821 : 48              >            pha         ;use stack to load status
0822 : a901            >            lda #1     ;precharge accu
0824 : 28              >            plp
                        
0825 : 48                       pha
                                tst_a 1,$ff
0826 : 08              >            php         ;save flags
0827 : c901            >            cmp #1     ;test result
                       >            trap_ne
0829 : f003            >        beq skip0151
                       >        trap            ;failed not equal (non zero)
082b : 20d144          >        jsr report_error
                       >
082e :                 >skip0151
                       >
082e : 68              >            pla         ;load status
082f : 48              >            pha
                       >            cmp_flag $ff
0830 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0832 : f003            >        beq skip0154
                       >        trap            ;failed not equal (non zero)
0834 : 20d144          >        jsr report_error
                       >
0837 :                 >skip0154
                       >
0837 : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
0838 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
083a : 48              >            pha         ;use stack to load status
083b : a900            >            lda #0     ;precharge accu
083d : 28              >            plp
                        
083e : 48                       pha
                                tst_a 0,0
083f : 08              >            php         ;save flags
0840 : c900            >            cmp #0     ;test result
                       >            trap_ne
0842 : f003            >        beq skip0159
                       >        trap            ;failed not equal (non zero)
0844 : 20d144          >        jsr report_error
                       >
0847 :                 >skip0159
                       >
0847 : 68              >            pla         ;load status
0848 : 48              >            pha
                       >            cmp_flag 0
0849 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
084b : f003            >        beq skip0162
                       >        trap            ;failed not equal (non zero)
084d : 20d144          >        jsr report_error
                       >
0850 :                 >skip0162
                       >
0850 : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
0851 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0853 : 48              >            pha         ;use stack to load status
0854 : a9ff            >            lda #$ff     ;precharge accu
0856 : 28              >            plp
                        
0857 : 48                       pha
                                tst_a $ff,$ff
0858 : 08              >            php         ;save flags
0859 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
085b : f003            >        beq skip0167
                       >        trap            ;failed not equal (non zero)
085d : 20d144          >        jsr report_error
                       >
0860 :                 >skip0167
                       >
0860 : 68              >            pla         ;load status
0861 : 48              >            pha
                       >            cmp_flag $ff
0862 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0864 : f003            >        beq skip0170
                       >        trap            ;failed not equal (non zero)
0866 : 20d144          >        jsr report_error
                       >
0869 :                 >skip0170
                       >
0869 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
086a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
086c : 48              >            pha         ;use stack to load status
086d : a901            >            lda #1     ;precharge accu
086f : 28              >            plp
                        
0870 : 48                       pha
                                tst_a 1,0
0871 : 08              >            php         ;save flags
0872 : c901            >            cmp #1     ;test result
                       >            trap_ne
0874 : f003            >        beq skip0175
                       >        trap            ;failed not equal (non zero)
0876 : 20d144          >        jsr report_error
                       >
0879 :                 >skip0175
                       >
0879 : 68              >            pla         ;load status
087a : 48              >            pha
                       >            cmp_flag 0
087b : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
087d : f003            >        beq skip0178
                       >        trap            ;failed not equal (non zero)
087f : 20d144          >        jsr report_error
                       >
0882 :                 >skip0178
                       >
0882 : 28              >            plp         ;restore status
                        
                                set_a 0,$ff
                       >            load_flag $ff
0883 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0885 : 48              >            pha         ;use stack to load status
0886 : a900            >            lda #0     ;precharge accu
0888 : 28              >            plp
                        
0889 : 48                       pha
                                tst_a 0,$ff
088a : 08              >            php         ;save flags
088b : c900            >            cmp #0     ;test result
                       >            trap_ne
088d : f003            >        beq skip0183
                       >        trap            ;failed not equal (non zero)
088f : 20d144          >        jsr report_error
                       >
0892 :                 >skip0183
                       >
0892 : 68              >            pla         ;load status
0893 : 48              >            pha
                       >            cmp_flag $ff
0894 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0896 : f003            >        beq skip0186
                       >        trap            ;failed not equal (non zero)
0898 : 20d144          >        jsr report_error
                       >
089b :                 >skip0186
                       >
089b : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
089c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
089e : 48              >            pha         ;use stack to load status
089f : a9ff            >            lda #$ff     ;precharge accu
08a1 : 28              >            plp
                        
08a2 : 48                       pha
                                tst_a $ff,0
08a3 : 08              >            php         ;save flags
08a4 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
08a6 : f003            >        beq skip0191
                       >        trap            ;failed not equal (non zero)
08a8 : 20d144          >        jsr report_error
                       >
08ab :                 >skip0191
                       >
08ab : 68              >            pla         ;load status
08ac : 48              >            pha
                       >            cmp_flag 0
08ad : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
08af : f003            >        beq skip0194
                       >        trap            ;failed not equal (non zero)
08b1 : 20d144          >        jsr report_error
                       >
08b4 :                 >skip0194
                       >
08b4 : 28              >            plp         ;restore status
                        
                                set_a 0,$ff     ;pull
                       >            load_flag $ff     
08b5 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
08b7 : 48              >            pha         ;use stack to load status
08b8 : a900            >            lda #0     ;precharge accu
08ba : 28              >            plp
                        
08bb : 68                       pla
                                tst_a $ff,$ff-zero
08bc : 08              >            php         ;save flags
08bd : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
08bf : f003            >        beq skip0199
                       >        trap            ;failed not equal (non zero)
08c1 : 20d144          >        jsr report_error
                       >
08c4 :                 >skip0199
                       >
08c4 : 68              >            pla         ;load status
08c5 : 48              >            pha
                       >            cmp_flag $ff-zero
08c6 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
08c8 : f003            >        beq skip0202
                       >        trap            ;failed not equal (non zero)
08ca : 20d144          >        jsr report_error
                       >
08cd :                 >skip0202
                       >
08cd : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
08ce : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
08d0 : 48              >            pha         ;use stack to load status
08d1 : a9ff            >            lda #$ff     ;precharge accu
08d3 : 28              >            plp
                        
08d4 : 68                       pla
                                tst_a 0,zero
08d5 : 08              >            php         ;save flags
08d6 : c900            >            cmp #0     ;test result
                       >            trap_ne
08d8 : f003            >        beq skip0207
                       >        trap            ;failed not equal (non zero)
08da : 20d144          >        jsr report_error
                       >
08dd :                 >skip0207
                       >
08dd : 68              >            pla         ;load status
08de : 48              >            pha
                       >            cmp_flag zero
08df : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
08e1 : f003            >        beq skip0210
                       >        trap            ;failed not equal (non zero)
08e3 : 20d144          >        jsr report_error
                       >
08e6 :                 >skip0210
                       >
08e6 : 28              >            plp         ;restore status
                        
                                set_a $fe,$ff
                       >            load_flag $ff
08e7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
08e9 : 48              >            pha         ;use stack to load status
08ea : a9fe            >            lda #$fe     ;precharge accu
08ec : 28              >            plp
                        
08ed : 68                       pla
                                tst_a 1,$ff-zero-minus
08ee : 08              >            php         ;save flags
08ef : c901            >            cmp #1     ;test result
                       >            trap_ne
08f1 : f003            >        beq skip0215
                       >        trap            ;failed not equal (non zero)
08f3 : 20d144          >        jsr report_error
                       >
08f6 :                 >skip0215
                       >
08f6 : 68              >            pla         ;load status
08f7 : 48              >            pha
                       >            cmp_flag $ff-zero-minus
08f8 : c97d            >            cmp #($ff-zero-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
08fa : f003            >        beq skip0218
                       >        trap            ;failed not equal (non zero)
08fc : 20d144          >        jsr report_error
                       >
08ff :                 >skip0218
                       >
08ff : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
0900 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0902 : 48              >            pha         ;use stack to load status
0903 : a900            >            lda #0     ;precharge accu
0905 : 28              >            plp
                        
0906 : 68                       pla
                                tst_a $ff,minus
0907 : 08              >            php         ;save flags
0908 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
090a : f003            >        beq skip0223
                       >        trap            ;failed not equal (non zero)
090c : 20d144          >        jsr report_error
                       >
090f :                 >skip0223
                       >
090f : 68              >            pla         ;load status
0910 : 48              >            pha
                       >            cmp_flag minus
0911 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0913 : f003            >        beq skip0226
                       >        trap            ;failed not equal (non zero)
0915 : 20d144          >        jsr report_error
                       >
0918 :                 >skip0226
                       >
0918 : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
0919 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
091b : 48              >            pha         ;use stack to load status
091c : a9ff            >            lda #$ff     ;precharge accu
091e : 28              >            plp
                        
091f : 68                       pla
                                tst_a 0,$ff-minus
0920 : 08              >            php         ;save flags
0921 : c900            >            cmp #0     ;test result
                       >            trap_ne
0923 : f003            >        beq skip0231
                       >        trap            ;failed not equal (non zero)
0925 : 20d144          >        jsr report_error
                       >
0928 :                 >skip0231
                       >
0928 : 68              >            pla         ;load status
0929 : 48              >            pha
                       >            cmp_flag $ff-minus
092a : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
092c : f003            >        beq skip0234
                       >        trap            ;failed not equal (non zero)
092e : 20d144          >        jsr report_error
                       >
0931 :                 >skip0234
                       >
0931 : 28              >            plp         ;restore status
                        
                                set_a $fe,0
                       >            load_flag 0
0932 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0934 : 48              >            pha         ;use stack to load status
0935 : a9fe            >            lda #$fe     ;precharge accu
0937 : 28              >            plp
                        
0938 : 68                       pla
                                tst_a 1,0
0939 : 08              >            php         ;save flags
093a : c901            >            cmp #1     ;test result
                       >            trap_ne
093c : f003            >        beq skip0239
                       >        trap            ;failed not equal (non zero)
093e : 20d144          >        jsr report_error
                       >
0941 :                 >skip0239
                       >
0941 : 68              >            pla         ;load status
0942 : 48              >            pha
                       >            cmp_flag 0
0943 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0945 : f003            >        beq skip0242
                       >        trap            ;failed not equal (non zero)
0947 : 20d144          >        jsr report_error
                       >
094a :                 >skip0242
                       >
094a : 28              >            plp         ;restore status
                        
094b : e055                     cpx #$55        ;x & y unchanged?
                                trap_ne
094d : f003            >        beq skip0244
                       >        trap            ;failed not equal (non zero)
094f : 20d144          >        jsr report_error
                       >
0952 :                 >skip0244
                        
0952 : c0aa                     cpy #$aa
                                trap_ne
0954 : f003            >        beq skip0246
                       >        trap            ;failed not equal (non zero)
0956 : 20d144          >        jsr report_error
                       >
0959 :                 >skip0246
                        
                                next_test
0959 : ad0002          >            lda test_case   ;previous test
095c : c905            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
095e : f003            >        beq skip0249
                       >        trap            ;failed not equal (non zero)
0960 : 20d144          >        jsr report_error
                       >
0963 :                 >skip0249
                       >
0006 =                 >test_num = test_num + 1
0963 : a906            >            lda #test_num   ;*** next tests' number
0965 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; partial pretest EOR #
                                set_a $3c,0
                       >            load_flag 0
0968 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
096a : 48              >            pha         ;use stack to load status
096b : a93c            >            lda #$3c     ;precharge accu
096d : 28              >            plp
                        
096e : 49c3                     eor #$c3
                                tst_a $ff,fn
0970 : 08              >            php         ;save flags
0971 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0973 : f003            >        beq skip0254
                       >        trap            ;failed not equal (non zero)
0975 : 20d144          >        jsr report_error
                       >
0978 :                 >skip0254
                       >
0978 : 68              >            pla         ;load status
0979 : 48              >            pha
                       >            cmp_flag fn
097a : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
097c : f003            >        beq skip0257
                       >        trap            ;failed not equal (non zero)
097e : 20d144          >        jsr report_error
                       >
0981 :                 >skip0257
                       >
0981 : 28              >            plp         ;restore status
                        
                                set_a $c3,0
                       >            load_flag 0
0982 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0984 : 48              >            pha         ;use stack to load status
0985 : a9c3            >            lda #$c3     ;precharge accu
0987 : 28              >            plp
                        
0988 : 49c3                     eor #$c3
                                tst_a 0,fz
098a : 08              >            php         ;save flags
098b : c900            >            cmp #0     ;test result
                       >            trap_ne
098d : f003            >        beq skip0262
                       >        trap            ;failed not equal (non zero)
098f : 20d144          >        jsr report_error
                       >
0992 :                 >skip0262
                       >
0992 : 68              >            pla         ;load status
0993 : 48              >            pha
                       >            cmp_flag fz
0994 : c932            >            cmp #(fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0996 : f003            >        beq skip0265
                       >        trap            ;failed not equal (non zero)
0998 : 20d144          >        jsr report_error
                       >
099b :                 >skip0265
                       >
099b : 28              >            plp         ;restore status
                        
                                next_test
099c : ad0002          >            lda test_case   ;previous test
099f : c906            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
09a1 : f003            >        beq skip0268
                       >        trap            ;failed not equal (non zero)
09a3 : 20d144          >        jsr report_error
                       >
09a6 :                 >skip0268
                       >
0007 =                 >test_num = test_num + 1
09a6 : a907            >            lda #test_num   ;*** next tests' number
09a8 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
                        ; testing NOP
09ab : a224                     ldx #$24
09ad : a042                     ldy #$42
                                set_a $18,0
                       >            load_flag 0
09af : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
09b1 : 48              >            pha         ;use stack to load status
09b2 : a918            >            lda #$18     ;precharge accu
09b4 : 28              >            plp
                        
09b5 : ea                       nop
                                tst_a $18,0
09b6 : 08              >            php         ;save flags
09b7 : c918            >            cmp #$18     ;test result
                       >            trap_ne
09b9 : f003            >        beq skip0273
                       >        trap            ;failed not equal (non zero)
09bb : 20d144          >        jsr report_error
                       >
09be :                 >skip0273
                       >
09be : 68              >            pla         ;load status
09bf : 48              >            pha
                       >            cmp_flag 0
09c0 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
09c2 : f003            >        beq skip0276
                       >        trap            ;failed not equal (non zero)
09c4 : 20d144          >        jsr report_error
                       >
09c7 :                 >skip0276
                       >
09c7 : 28              >            plp         ;restore status
                        
09c8 : e024                     cpx #$24
                                trap_ne
09ca : f003            >        beq skip0278
                       >        trap            ;failed not equal (non zero)
09cc : 20d144          >        jsr report_error
                       >
09cf :                 >skip0278
                        
09cf : c042                     cpy #$42
                                trap_ne
09d1 : f003            >        beq skip0280
                       >        trap            ;failed not equal (non zero)
09d3 : 20d144          >        jsr report_error
                       >
09d6 :                 >skip0280
                        
09d6 : a2db                     ldx #$db
09d8 : a0bd                     ldy #$bd
                                set_a $e7,$ff
                       >            load_flag $ff
09da : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
09dc : 48              >            pha         ;use stack to load status
09dd : a9e7            >            lda #$e7     ;precharge accu
09df : 28              >            plp
                        
09e0 : ea                       nop
                                tst_a $e7,$ff
09e1 : 08              >            php         ;save flags
09e2 : c9e7            >            cmp #$e7     ;test result
                       >            trap_ne
09e4 : f003            >        beq skip0285
                       >        trap            ;failed not equal (non zero)
09e6 : 20d144          >        jsr report_error
                       >
09e9 :                 >skip0285
                       >
09e9 : 68              >            pla         ;load status
09ea : 48              >            pha
                       >            cmp_flag $ff
09eb : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
09ed : f003            >        beq skip0288
                       >        trap            ;failed not equal (non zero)
09ef : 20d144          >        jsr report_error
                       >
09f2 :                 >skip0288
                       >
09f2 : 28              >            plp         ;restore status
                        
09f3 : e0db                     cpx #$db
                                trap_ne
09f5 : f003            >        beq skip0290
                       >        trap            ;failed not equal (non zero)
09f7 : 20d144          >        jsr report_error
                       >
09fa :                 >skip0290
                        
09fa : c0bd                     cpy #$bd
                                trap_ne
09fc : f003            >        beq skip0292
                       >        trap            ;failed not equal (non zero)
09fe : 20d144          >        jsr report_error
                       >
0a01 :                 >skip0292
                        
                                next_test
0a01 : ad0002          >            lda test_case   ;previous test
0a04 : c907            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0a06 : f003            >        beq skip0295
                       >        trap            ;failed not equal (non zero)
0a08 : 20d144          >        jsr report_error
                       >
0a0b :                 >skip0295
                       >
0008 =                 >test_num = test_num + 1
0a0b : a908            >            lda #test_num   ;*** next tests' number
0a0d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump absolute
                                set_stat $0
                       >            load_flag $0
0a10 : a900            >            lda #$0             ;allow test to change I-flag (no mask)
                       >
0a12 : 48              >            pha         ;use stack to load status
0a13 : 28              >            plp
                        
0a14 : a946                     lda #'F'
0a16 : a241                     ldx #'A'
0a18 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
0a1a : 4c0143                   jmp test_far
0a1d : ea                       nop
0a1e : ea                       nop
                                trap_ne         ;runover protection
0a1f : f003            >        beq skip0299
                       >        trap            ;failed not equal (non zero)
0a21 : 20d144          >        jsr report_error
                       >
0a24 :                 >skip0299
                        
0a24 : e8                       inx
0a25 : e8                       inx
0a26 :                  far_ret 
                                trap_eq         ;returned flags OK?
0a26 : d003            >        bne skip0301
                       >        trap           ;failed equal (zero)
0a28 : 20d144          >        jsr report_error
                       >
0a2b :                 >skip0301
                        
                                trap_pl
0a2b : 3003            >        bmi skip0303
                       >        trap            ;failed plus (bit 7 clear)
0a2d : 20d144          >        jsr report_error
                       >
0a30 :                 >skip0303
                        
                                trap_cc
0a30 : b003            >        bcs skip0305
                       >        trap            ;failed carry clear
0a32 : 20d144          >        jsr report_error
                       >
0a35 :                 >skip0305
                        
                                trap_vc
0a35 : 7003            >        bvs skip0307
                       >        trap            ;failed overflow clear
0a37 : 20d144          >        jsr report_error
                       >
0a3a :                 >skip0307
                        
0a3a : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
                                trap_ne
0a3c : f003            >        beq skip0309
                       >        trap            ;failed not equal (non zero)
0a3e : 20d144          >        jsr report_error
                       >
0a41 :                 >skip0309
                        
0a41 : e042                     cpx #('A'+1)
                                trap_ne
0a43 : f003            >        beq skip0311
                       >        trap            ;failed not equal (non zero)
0a45 : 20d144          >        jsr report_error
                       >
0a48 :                 >skip0311
                        
0a48 : c04f                     cpy #('R'-3)
                                trap_ne
0a4a : f003            >        beq skip0313
                       >        trap            ;failed not equal (non zero)
0a4c : 20d144          >        jsr report_error
                       >
0a4f :                 >skip0313
                        
0a4f : ca                       dex
0a50 : c8                       iny
0a51 : c8                       iny
0a52 : c8                       iny
0a53 : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
0a55 : 4c610a                   jmp test_near
0a58 : ea                       nop
0a59 : ea                       nop
                                trap_ne         ;runover protection
0a5a : f003            >        beq skip0315
                       >        trap            ;failed not equal (non zero)
0a5c : 20d144          >        jsr report_error
                       >
0a5f :                 >skip0315
                        
0a5f : e8                       inx
0a60 : e8                       inx
0a61 :                  test_near
                                trap_eq         ;passed flags OK?
0a61 : d003            >        bne skip0317
                       >        trap           ;failed equal (zero)
0a63 : 20d144          >        jsr report_error
                       >
0a66 :                 >skip0317
                        
                                trap_mi
0a66 : 1003            >        bpl skip0319
                       >        trap            ;failed minus (bit 7 set)
0a68 : 20d144          >        jsr report_error
                       >
0a6b :                 >skip0319
                        
                                trap_cc
0a6b : b003            >        bcs skip0321
                       >        trap            ;failed carry clear
0a6d : 20d144          >        jsr report_error
                       >
0a70 :                 >skip0321
                        
                                trap_vc
0a70 : 7003            >        bvs skip0323
                       >        trap            ;failed overflow clear
0a72 : 20d144          >        jsr report_error
                       >
0a75 :                 >skip0323
                        
0a75 : c946                     cmp #'F'        ;passed registers OK?
                                trap_ne
0a77 : f003            >        beq skip0325
                       >        trap            ;failed not equal (non zero)
0a79 : 20d144          >        jsr report_error
                       >
0a7c :                 >skip0325
                        
0a7c : e041                     cpx #'A'
                                trap_ne
0a7e : f003            >        beq skip0327
                       >        trap            ;failed not equal (non zero)
0a80 : 20d144          >        jsr report_error
                       >
0a83 :                 >skip0327
                        
0a83 : c052                     cpy #'R'
                                trap_ne
0a85 : f003            >        beq skip0329
                       >        trap            ;failed not equal (non zero)
0a87 : 20d144          >        jsr report_error
                       >
0a8a :                 >skip0329
                        
                                next_test
0a8a : ad0002          >            lda test_case   ;previous test
0a8d : c908            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0a8f : f003            >        beq skip0332
                       >        trap            ;failed not equal (non zero)
0a91 : 20d144          >        jsr report_error
                       >
0a94 :                 >skip0332
                       >
0009 =                 >test_num = test_num + 1
0a94 : a909            >            lda #test_num   ;*** next tests' number
0a96 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump indirect
                                set_stat 0
                       >            load_flag 0
0a99 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0a9b : 48              >            pha         ;use stack to load status
0a9c : 28              >            plp
                        
0a9d : a949                     lda #'I'
0a9f : a24e                     ldx #'N'
0aa1 : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
0aa3 : 6c4843                   jmp (ptr_tst_ind)
0aa6 : ea                       nop
                                trap_ne         ;runover protection
0aa7 : f003            >        beq skip0336
                       >        trap            ;failed not equal (non zero)
0aa9 : 20d144          >        jsr report_error
                       >
0aac :                 >skip0336
                        
0aac : 88                       dey
0aad : 88                       dey
0aae :                  ind_ret 
0aae : 08                       php             ;either SP or Y count will fail, if we do not hit
0aaf : 88                       dey
0ab0 : 88                       dey
0ab1 : 88                       dey
0ab2 : 28                       plp
                                trap_eq         ;returned flags OK?
0ab3 : d003            >        bne skip0338
                       >        trap           ;failed equal (zero)
0ab5 : 20d144          >        jsr report_error
                       >
0ab8 :                 >skip0338
                        
                                trap_pl
0ab8 : 3003            >        bmi skip0340
                       >        trap            ;failed plus (bit 7 clear)
0aba : 20d144          >        jsr report_error
                       >
0abd :                 >skip0340
                        
                                trap_cc
0abd : b003            >        bcs skip0342
                       >        trap            ;failed carry clear
0abf : 20d144          >        jsr report_error
                       >
0ac2 :                 >skip0342
                        
                                trap_vc
0ac2 : 7003            >        bvs skip0344
                       >        trap            ;failed overflow clear
0ac4 : 20d144          >        jsr report_error
                       >
0ac7 :                 >skip0344
                        
0ac7 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
0ac9 : f003            >        beq skip0346
                       >        trap            ;failed not equal (non zero)
0acb : 20d144          >        jsr report_error
                       >
0ace :                 >skip0346
                        
0ace : e04f                     cpx #('N'+1)
                                trap_ne
0ad0 : f003            >        beq skip0348
                       >        trap            ;failed not equal (non zero)
0ad2 : 20d144          >        jsr report_error
                       >
0ad5 :                 >skip0348
                        
0ad5 : c03e                     cpy #('D'-6)
                                trap_ne
0ad7 : f003            >        beq skip0350
                       >        trap            ;failed not equal (non zero)
0ad9 : 20d144          >        jsr report_error
                       >
0adc :                 >skip0350
                        
0adc : ba                       tsx             ;SP check
0add : e0ff                     cpx #$ff
                                trap_ne
0adf : f003            >        beq skip0352
                       >        trap            ;failed not equal (non zero)
0ae1 : 20d144          >        jsr report_error
                       >
0ae4 :                 >skip0352
                        
                                next_test
0ae4 : ad0002          >            lda test_case   ;previous test
0ae7 : c909            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0ae9 : f003            >        beq skip0355
                       >        trap            ;failed not equal (non zero)
0aeb : 20d144          >        jsr report_error
                       >
0aee :                 >skip0355
                       >
000a =                 >test_num = test_num + 1
0aee : a90a            >            lda #test_num   ;*** next tests' number
0af0 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; jump subroutine & return from subroutine
                                set_stat 0
                       >            load_flag 0
0af3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0af5 : 48              >            pha         ;use stack to load status
0af6 : 28              >            plp
                        
0af7 : a94a                     lda #'J'
0af9 : a253                     ldx #'S'
0afb : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
0afd : 209f43                   jsr test_jsr
0aff =                  jsr_ret = *-1           ;last address of jsr = return address
0b00 : 08                       php             ;either SP or Y count will fail, if we do not hit
0b01 : 88                       dey
0b02 : 88                       dey
0b03 : 88                       dey
0b04 : 28                       plp
                                trap_eq         ;returned flags OK?
0b05 : d003            >        bne skip0359
                       >        trap           ;failed equal (zero)
0b07 : 20d144          >        jsr report_error
                       >
0b0a :                 >skip0359
                        
                                trap_pl
0b0a : 3003            >        bmi skip0361
                       >        trap            ;failed plus (bit 7 clear)
0b0c : 20d144          >        jsr report_error
                       >
0b0f :                 >skip0361
                        
                                trap_cc
0b0f : b003            >        bcs skip0363
                       >        trap            ;failed carry clear
0b11 : 20d144          >        jsr report_error
                       >
0b14 :                 >skip0363
                        
                                trap_vc
0b14 : 7003            >        bvs skip0365
                       >        trap            ;failed overflow clear
0b16 : 20d144          >        jsr report_error
                       >
0b19 :                 >skip0365
                        
0b19 : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
                                trap_ne
0b1b : f003            >        beq skip0367
                       >        trap            ;failed not equal (non zero)
0b1d : 20d144          >        jsr report_error
                       >
0b20 :                 >skip0367
                        
0b20 : e054                     cpx #('S'+1)
                                trap_ne
0b22 : f003            >        beq skip0369
                       >        trap            ;failed not equal (non zero)
0b24 : 20d144          >        jsr report_error
                       >
0b27 :                 >skip0369
                        
0b27 : c04c                     cpy #('R'-6)
                                trap_ne
0b29 : f003            >        beq skip0371
                       >        trap            ;failed not equal (non zero)
0b2b : 20d144          >        jsr report_error
                       >
0b2e :                 >skip0371
                        
0b2e : ba                       tsx             ;sp?
0b2f : e0ff                     cpx #$ff
                                trap_ne
0b31 : f003            >        beq skip0373
                       >        trap            ;failed not equal (non zero)
0b33 : 20d144          >        jsr report_error
                       >
0b36 :                 >skip0373
                        
                                next_test
0b36 : ad0002          >            lda test_case   ;previous test
0b39 : c90a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0b3b : f003            >        beq skip0376
                       >        trap            ;failed not equal (non zero)
0b3d : 20d144          >        jsr report_error
                       >
0b40 :                 >skip0376
                       >
000b =                 >test_num = test_num + 1
0b40 : a90b            >            lda #test_num   ;*** next tests' number
0b42 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; break & return from interrupt
                            if ROM_vectors = 1
                                load_flag 0     ;with interrupts enabled if allowed!
0b45 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                        
0b47 : 48                       pha
0b48 : a942                     lda #'B'
0b4a : a252                     ldx #'R'
0b4c : a04b                     ldy #'K'
0b4e : 28                       plp             ;N=0, V=0, Z=0, C=0
0b4f : 00                       brk
                            else
                                lda #hi brk_ret0 ;emulated break
                                pha
                                lda #lo brk_ret0
                                pha
                                load_flag fao    ;set break & unused on stack
                                pha
                                load_flag intdis ;during interrupt
                                pha
                                lda #'B'
                                ldx #'R'
                                ldy #'K'
                                plp             ;N=0, V=0, Z=0, C=0
                                jmp irq_trap
                            endif
0b50 : 88                       dey             ;should not be executed
0b51 :                  brk_ret0                ;address of break return
0b51 : 08                       php             ;either SP or Y count will fail, if we do not hit
0b52 : 88                       dey
0b53 : 88                       dey
0b54 : 88                       dey
0b55 : c9e8                     cmp #'B'^$aa    ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
0b57 : f003            >        beq skip0379
                       >        trap            ;failed not equal (non zero)
0b59 : 20d144          >        jsr report_error
                       >
0b5c :                 >skip0379
                        
0b5c : e053                     cpx #'R'+1
                                trap_ne
0b5e : f003            >        beq skip0381
                       >        trap            ;failed not equal (non zero)
0b60 : 20d144          >        jsr report_error
                       >
0b63 :                 >skip0381
                        
0b63 : c045                     cpy #'K'-6
                                trap_ne
0b65 : f003            >        beq skip0383
                       >        trap            ;failed not equal (non zero)
0b67 : 20d144          >        jsr report_error
                       >
0b6a :                 >skip0383
                        
0b6a : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
0b6b : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
0b6d : f003            >        beq skip0386
                       >        trap            ;failed not equal (non zero)
0b6f : 20d144          >        jsr report_error
                       >
0b72 :                 >skip0386
                        
0b72 : ba                       tsx             ;sp?
0b73 : e0ff                     cpx #$ff
                                trap_ne
0b75 : f003            >        beq skip0388
                       >        trap            ;failed not equal (non zero)
0b77 : 20d144          >        jsr report_error
                       >
0b7a :                 >skip0388
                        
                            if ROM_vectors = 1
                                load_flag $ff   ;with interrupts disabled if allowed!
0b7a : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                        
0b7c : 48                       pha
0b7d : a9bd                     lda #$ff-'B'
0b7f : a2ad                     ldx #$ff-'R'
0b81 : a0b4                     ldy #$ff-'K'
0b83 : 28                       plp             ;N=1, V=1, Z=1, C=1
0b84 : 00                       brk
                            else
                                lda #hi brk_ret1 ;emulated break
                                pha
                                lda #lo brk_ret1
                                pha
                                load_flag $ff
                                pha             ;set break & unused on stack
                                pha             ;actual flags
                                lda #$ff-'B'
                                ldx #$ff-'R'
                                ldy #$ff-'K'
                                plp             ;N=1, V=1, Z=1, C=1
                                jmp irq_trap
                            endif
0b85 : 88                       dey             ;should not be executed
0b86 :                  brk_ret1                ;address of break return
0b86 : 08                       php             ;either SP or Y count will fail, if we do not hit
0b87 : 88                       dey
0b88 : 88                       dey
0b89 : 88                       dey
0b8a : c917                     cmp #($ff-'B')^$aa  ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
0b8c : f003            >        beq skip0391
                       >        trap            ;failed not equal (non zero)
0b8e : 20d144          >        jsr report_error
                       >
0b91 :                 >skip0391
                        
0b91 : e0ae                     cpx #$ff-'R'+1
                                trap_ne
0b93 : f003            >        beq skip0393
                       >        trap            ;failed not equal (non zero)
0b95 : 20d144          >        jsr report_error
                       >
0b98 :                 >skip0393
                        
0b98 : c0ae                     cpy #$ff-'K'-6
                                trap_ne
0b9a : f003            >        beq skip0395
                       >        trap            ;failed not equal (non zero)
0b9c : 20d144          >        jsr report_error
                       >
0b9f :                 >skip0395
                        
0b9f : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag $ff
0ba0 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
0ba2 : f003            >        beq skip0398
                       >        trap            ;failed not equal (non zero)
0ba4 : 20d144          >        jsr report_error
                       >
0ba7 :                 >skip0398
                        
0ba7 : ba                       tsx             ;sp?
0ba8 : e0ff                     cpx #$ff
                                trap_ne
0baa : f003            >        beq skip0400
                       >        trap            ;failed not equal (non zero)
0bac : 20d144          >        jsr report_error
                       >
0baf :                 >skip0400
                        
                                next_test
0baf : ad0002          >            lda test_case   ;previous test
0bb2 : c90b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0bb4 : f003            >        beq skip0403
                       >        trap            ;failed not equal (non zero)
0bb6 : 20d144          >        jsr report_error
                       >
0bb9 :                 >skip0403
                       >
000c =                 >test_num = test_num + 1
0bb9 : a90c            >            lda #test_num   ;*** next tests' number
0bbb : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
                                set_stat $ff
                       >            load_flag $ff
0bbe : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0bc0 : 48              >            pha         ;use stack to load status
0bc1 : 28              >            plp
                        
0bc2 : 18                       clc
                                tst_stat $ff-carry
0bc3 : 08              >            php         ;save status
0bc4 : 68              >            pla         ;use stack to retrieve status
0bc5 : 48              >            pha
                       >            cmp_flag $ff-carry
0bc6 : c9fe            >            cmp #($ff-carry|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0bc8 : f003            >        beq skip0409
                       >        trap            ;failed not equal (non zero)
0bca : 20d144          >        jsr report_error
                       >
0bcd :                 >skip0409
                       >
0bcd : 28              >            plp         ;restore status
                        
0bce : 38                       sec
                                tst_stat $ff
0bcf : 08              >            php         ;save status
0bd0 : 68              >            pla         ;use stack to retrieve status
0bd1 : 48              >            pha
                       >            cmp_flag $ff
0bd2 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0bd4 : f003            >        beq skip0413
                       >        trap            ;failed not equal (non zero)
0bd6 : 20d144          >        jsr report_error
                       >
0bd9 :                 >skip0413
                       >
0bd9 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
0bda : 58                       cli
                                tst_stat $ff-intdis
0bdb : 08              >            php         ;save status
0bdc : 68              >            pla         ;use stack to retrieve status
0bdd : 48              >            pha
                       >            cmp_flag $ff-intdis
0bde : c9fb            >            cmp #($ff-intdis|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0be0 : f003            >        beq skip0417
                       >        trap            ;failed not equal (non zero)
0be2 : 20d144          >        jsr report_error
                       >
0be5 :                 >skip0417
                       >
0be5 : 28              >            plp         ;restore status
                        
0be6 : 78                       sei
                                tst_stat $ff
0be7 : 08              >            php         ;save status
0be8 : 68              >            pla         ;use stack to retrieve status
0be9 : 48              >            pha
                       >            cmp_flag $ff
0bea : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0bec : f003            >        beq skip0421
                       >        trap            ;failed not equal (non zero)
0bee : 20d144          >        jsr report_error
                       >
0bf1 :                 >skip0421
                       >
0bf1 : 28              >            plp         ;restore status
                        
                            endif
0bf2 : d8                       cld
                                tst_stat $ff-decmode
0bf3 : 08              >            php         ;save status
0bf4 : 68              >            pla         ;use stack to retrieve status
0bf5 : 48              >            pha
                       >            cmp_flag $ff-decmode
0bf6 : c9f7            >            cmp #($ff-decmode|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0bf8 : f003            >        beq skip0425
                       >        trap            ;failed not equal (non zero)
0bfa : 20d144          >        jsr report_error
                       >
0bfd :                 >skip0425
                       >
0bfd : 28              >            plp         ;restore status
                        
0bfe : f8                       sed
                                tst_stat $ff
0bff : 08              >            php         ;save status
0c00 : 68              >            pla         ;use stack to retrieve status
0c01 : 48              >            pha
                       >            cmp_flag $ff
0c02 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c04 : f003            >        beq skip0429
                       >        trap            ;failed not equal (non zero)
0c06 : 20d144          >        jsr report_error
                       >
0c09 :                 >skip0429
                       >
0c09 : 28              >            plp         ;restore status
                        
0c0a : b8                       clv
                                tst_stat $ff-overfl
0c0b : 08              >            php         ;save status
0c0c : 68              >            pla         ;use stack to retrieve status
0c0d : 48              >            pha
                       >            cmp_flag $ff-overfl
0c0e : c9bf            >            cmp #($ff-overfl|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c10 : f003            >        beq skip0433
                       >        trap            ;failed not equal (non zero)
0c12 : 20d144          >        jsr report_error
                       >
0c15 :                 >skip0433
                       >
0c15 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0c16 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0c18 : 48              >            pha         ;use stack to load status
0c19 : 28              >            plp
                        
                                tst_stat 0
0c1a : 08              >            php         ;save status
0c1b : 68              >            pla         ;use stack to retrieve status
0c1c : 48              >            pha
                       >            cmp_flag 0
0c1d : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c1f : f003            >        beq skip0439
                       >        trap            ;failed not equal (non zero)
0c21 : 20d144          >        jsr report_error
                       >
0c24 :                 >skip0439
                       >
0c24 : 28              >            plp         ;restore status
                        
0c25 : 38                       sec
                                tst_stat carry
0c26 : 08              >            php         ;save status
0c27 : 68              >            pla         ;use stack to retrieve status
0c28 : 48              >            pha
                       >            cmp_flag carry
0c29 : c931            >            cmp #(carry|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c2b : f003            >        beq skip0443
                       >        trap            ;failed not equal (non zero)
0c2d : 20d144          >        jsr report_error
                       >
0c30 :                 >skip0443
                       >
0c30 : 28              >            plp         ;restore status
                        
0c31 : 18                       clc
                                tst_stat 0  
0c32 : 08              >            php         ;save status
0c33 : 68              >            pla         ;use stack to retrieve status
0c34 : 48              >            pha
                       >            cmp_flag 0  
0c35 : c930            >            cmp #(0  |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c37 : f003            >        beq skip0447
                       >        trap            ;failed not equal (non zero)
0c39 : 20d144          >        jsr report_error
                       >
0c3c :                 >skip0447
                       >
0c3c : 28              >            plp         ;restore status
                        
                            if I_flag = 3
0c3d : 78                       sei
                                tst_stat intdis
0c3e : 08              >            php         ;save status
0c3f : 68              >            pla         ;use stack to retrieve status
0c40 : 48              >            pha
                       >            cmp_flag intdis
0c41 : c934            >            cmp #(intdis|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c43 : f003            >        beq skip0451
                       >        trap            ;failed not equal (non zero)
0c45 : 20d144          >        jsr report_error
                       >
0c48 :                 >skip0451
                       >
0c48 : 28              >            plp         ;restore status
                        
0c49 : 58                       cli
                                tst_stat 0
0c4a : 08              >            php         ;save status
0c4b : 68              >            pla         ;use stack to retrieve status
0c4c : 48              >            pha
                       >            cmp_flag 0
0c4d : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c4f : f003            >        beq skip0455
                       >        trap            ;failed not equal (non zero)
0c51 : 20d144          >        jsr report_error
                       >
0c54 :                 >skip0455
                       >
0c54 : 28              >            plp         ;restore status
                        
                            endif  
0c55 : f8                       sed
                                tst_stat decmode
0c56 : 08              >            php         ;save status
0c57 : 68              >            pla         ;use stack to retrieve status
0c58 : 48              >            pha
                       >            cmp_flag decmode
0c59 : c938            >            cmp #(decmode|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c5b : f003            >        beq skip0459
                       >        trap            ;failed not equal (non zero)
0c5d : 20d144          >        jsr report_error
                       >
0c60 :                 >skip0459
                       >
0c60 : 28              >            plp         ;restore status
                        
0c61 : d8                       cld
                                tst_stat 0  
0c62 : 08              >            php         ;save status
0c63 : 68              >            pla         ;use stack to retrieve status
0c64 : 48              >            pha
                       >            cmp_flag 0  
0c65 : c930            >            cmp #(0  |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c67 : f003            >        beq skip0463
                       >        trap            ;failed not equal (non zero)
0c69 : 20d144          >        jsr report_error
                       >
0c6c :                 >skip0463
                       >
0c6c : 28              >            plp         ;restore status
                        
                                set_stat overfl
                       >            load_flag overfl
0c6d : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
0c6f : 48              >            pha         ;use stack to load status
0c70 : 28              >            plp
                        
                                tst_stat overfl
0c71 : 08              >            php         ;save status
0c72 : 68              >            pla         ;use stack to retrieve status
0c73 : 48              >            pha
                       >            cmp_flag overfl
0c74 : c970            >            cmp #(overfl|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c76 : f003            >        beq skip0469
                       >        trap            ;failed not equal (non zero)
0c78 : 20d144          >        jsr report_error
                       >
0c7b :                 >skip0469
                       >
0c7b : 28              >            plp         ;restore status
                        
0c7c : b8                       clv
                                tst_stat 0
0c7d : 08              >            php         ;save status
0c7e : 68              >            pla         ;use stack to retrieve status
0c7f : 48              >            pha
                       >            cmp_flag 0
0c80 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c82 : f003            >        beq skip0473
                       >        trap            ;failed not equal (non zero)
0c84 : 20d144          >        jsr report_error
                       >
0c87 :                 >skip0473
                       >
0c87 : 28              >            plp         ;restore status
                        
                                next_test
0c88 : ad0002          >            lda test_case   ;previous test
0c8b : c90c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0c8d : f003            >        beq skip0476
                       >        trap            ;failed not equal (non zero)
0c8f : 20d144          >        jsr report_error
                       >
0c92 :                 >skip0476
                       >
000d =                 >test_num = test_num + 1
0c92 : a90d            >            lda #test_num   ;*** next tests' number
0c94 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ; testing index register increment/decrement and transfer
                        ; INX INY DEX DEY TAX TXA TAY TYA 
0c97 : a2fe                     ldx #$fe
                                set_stat $ff
                       >            load_flag $ff
0c99 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0c9b : 48              >            pha         ;use stack to load status
0c9c : 28              >            plp
                        
0c9d : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
0c9e : 08              >            php         ;save flags
0c9f : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0ca1 : f003            >        beq skip0481
                       >        trap            ;failed not equal (non zero)
0ca3 : 20d144          >        jsr report_error
                       >
0ca6 :                 >skip0481
                       >
0ca6 : 68              >            pla         ;load status
0ca7 : 48              >            pha
                       >            cmp_flag $ff-zero
0ca8 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0caa : f003            >        beq skip0484
                       >        trap            ;failed not equal (non zero)
0cac : 20d144          >        jsr report_error
                       >
0caf :                 >skip0484
                       >
0caf : 28              >            plp         ;restore status
                        
0cb0 : e8                       inx             ;00
                                tst_x 0,$ff-minus
0cb1 : 08              >            php         ;save flags
0cb2 : e000            >            cpx #0     ;test result
                       >            trap_ne
0cb4 : f003            >        beq skip0487
                       >        trap            ;failed not equal (non zero)
0cb6 : 20d144          >        jsr report_error
                       >
0cb9 :                 >skip0487
                       >
0cb9 : 68              >            pla         ;load status
0cba : 48              >            pha
                       >            cmp_flag $ff-minus
0cbb : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0cbd : f003            >        beq skip0490
                       >        trap            ;failed not equal (non zero)
0cbf : 20d144          >        jsr report_error
                       >
0cc2 :                 >skip0490
                       >
0cc2 : 28              >            plp         ;restore status
                        
0cc3 : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
0cc4 : 08              >            php         ;save flags
0cc5 : e001            >            cpx #1     ;test result
                       >            trap_ne
0cc7 : f003            >        beq skip0493
                       >        trap            ;failed not equal (non zero)
0cc9 : 20d144          >        jsr report_error
                       >
0ccc :                 >skip0493
                       >
0ccc : 68              >            pla         ;load status
0ccd : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0cce : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0cd0 : f003            >        beq skip0496
                       >        trap            ;failed not equal (non zero)
0cd2 : 20d144          >        jsr report_error
                       >
0cd5 :                 >skip0496
                       >
0cd5 : 28              >            plp         ;restore status
                        
0cd6 : ca                       dex             ;00
                                tst_x 0,$ff-minus
0cd7 : 08              >            php         ;save flags
0cd8 : e000            >            cpx #0     ;test result
                       >            trap_ne
0cda : f003            >        beq skip0499
                       >        trap            ;failed not equal (non zero)
0cdc : 20d144          >        jsr report_error
                       >
0cdf :                 >skip0499
                       >
0cdf : 68              >            pla         ;load status
0ce0 : 48              >            pha
                       >            cmp_flag $ff-minus
0ce1 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0ce3 : f003            >        beq skip0502
                       >        trap            ;failed not equal (non zero)
0ce5 : 20d144          >        jsr report_error
                       >
0ce8 :                 >skip0502
                       >
0ce8 : 28              >            plp         ;restore status
                        
0ce9 : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
0cea : 08              >            php         ;save flags
0ceb : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0ced : f003            >        beq skip0505
                       >        trap            ;failed not equal (non zero)
0cef : 20d144          >        jsr report_error
                       >
0cf2 :                 >skip0505
                       >
0cf2 : 68              >            pla         ;load status
0cf3 : 48              >            pha
                       >            cmp_flag $ff-zero
0cf4 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0cf6 : f003            >        beq skip0508
                       >        trap            ;failed not equal (non zero)
0cf8 : 20d144          >        jsr report_error
                       >
0cfb :                 >skip0508
                       >
0cfb : 28              >            plp         ;restore status
                        
0cfc : ca                       dex             ;fe
                                set_stat 0
                       >            load_flag 0
0cfd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0cff : 48              >            pha         ;use stack to load status
0d00 : 28              >            plp
                        
0d01 : e8                       inx             ;ff
                                tst_x $ff,minus
0d02 : 08              >            php         ;save flags
0d03 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0d05 : f003            >        beq skip0513
                       >        trap            ;failed not equal (non zero)
0d07 : 20d144          >        jsr report_error
                       >
0d0a :                 >skip0513
                       >
0d0a : 68              >            pla         ;load status
0d0b : 48              >            pha
                       >            cmp_flag minus
0d0c : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d0e : f003            >        beq skip0516
                       >        trap            ;failed not equal (non zero)
0d10 : 20d144          >        jsr report_error
                       >
0d13 :                 >skip0516
                       >
0d13 : 28              >            plp         ;restore status
                        
0d14 : e8                       inx             ;00
                                tst_x 0,zero
0d15 : 08              >            php         ;save flags
0d16 : e000            >            cpx #0     ;test result
                       >            trap_ne
0d18 : f003            >        beq skip0519
                       >        trap            ;failed not equal (non zero)
0d1a : 20d144          >        jsr report_error
                       >
0d1d :                 >skip0519
                       >
0d1d : 68              >            pla         ;load status
0d1e : 48              >            pha
                       >            cmp_flag zero
0d1f : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d21 : f003            >        beq skip0522
                       >        trap            ;failed not equal (non zero)
0d23 : 20d144          >        jsr report_error
                       >
0d26 :                 >skip0522
                       >
0d26 : 28              >            plp         ;restore status
                        
0d27 : e8                       inx             ;01
                                tst_x 1,0
0d28 : 08              >            php         ;save flags
0d29 : e001            >            cpx #1     ;test result
                       >            trap_ne
0d2b : f003            >        beq skip0525
                       >        trap            ;failed not equal (non zero)
0d2d : 20d144          >        jsr report_error
                       >
0d30 :                 >skip0525
                       >
0d30 : 68              >            pla         ;load status
0d31 : 48              >            pha
                       >            cmp_flag 0
0d32 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d34 : f003            >        beq skip0528
                       >        trap            ;failed not equal (non zero)
0d36 : 20d144          >        jsr report_error
                       >
0d39 :                 >skip0528
                       >
0d39 : 28              >            plp         ;restore status
                        
0d3a : ca                       dex             ;00
                                tst_x 0,zero
0d3b : 08              >            php         ;save flags
0d3c : e000            >            cpx #0     ;test result
                       >            trap_ne
0d3e : f003            >        beq skip0531
                       >        trap            ;failed not equal (non zero)
0d40 : 20d144          >        jsr report_error
                       >
0d43 :                 >skip0531
                       >
0d43 : 68              >            pla         ;load status
0d44 : 48              >            pha
                       >            cmp_flag zero
0d45 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d47 : f003            >        beq skip0534
                       >        trap            ;failed not equal (non zero)
0d49 : 20d144          >        jsr report_error
                       >
0d4c :                 >skip0534
                       >
0d4c : 28              >            plp         ;restore status
                        
0d4d : ca                       dex             ;ff
                                tst_x $ff,minus
0d4e : 08              >            php         ;save flags
0d4f : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0d51 : f003            >        beq skip0537
                       >        trap            ;failed not equal (non zero)
0d53 : 20d144          >        jsr report_error
                       >
0d56 :                 >skip0537
                       >
0d56 : 68              >            pla         ;load status
0d57 : 48              >            pha
                       >            cmp_flag minus
0d58 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d5a : f003            >        beq skip0540
                       >        trap            ;failed not equal (non zero)
0d5c : 20d144          >        jsr report_error
                       >
0d5f :                 >skip0540
                       >
0d5f : 28              >            plp         ;restore status
                        
                        
0d60 : a0fe                     ldy #$fe
                                set_stat $ff
                       >            load_flag $ff
0d62 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0d64 : 48              >            pha         ;use stack to load status
0d65 : 28              >            plp
                        
0d66 : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
0d67 : 08              >            php         ;save flags
0d68 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0d6a : f003            >        beq skip0545
                       >        trap            ;failed not equal (non zero)
0d6c : 20d144          >        jsr report_error
                       >
0d6f :                 >skip0545
                       >
0d6f : 68              >            pla         ;load status
0d70 : 48              >            pha
                       >            cmp_flag $ff-zero
0d71 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d73 : f003            >        beq skip0548
                       >        trap            ;failed not equal (non zero)
0d75 : 20d144          >        jsr report_error
                       >
0d78 :                 >skip0548
                       >
0d78 : 28              >            plp         ;restore status
                        
0d79 : c8                       iny             ;00
                                tst_y 0,$ff-minus
0d7a : 08              >            php         ;save flags
0d7b : c000            >            cpy #0     ;test result
                       >            trap_ne
0d7d : f003            >        beq skip0551
                       >        trap            ;failed not equal (non zero)
0d7f : 20d144          >        jsr report_error
                       >
0d82 :                 >skip0551
                       >
0d82 : 68              >            pla         ;load status
0d83 : 48              >            pha
                       >            cmp_flag $ff-minus
0d84 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d86 : f003            >        beq skip0554
                       >        trap            ;failed not equal (non zero)
0d88 : 20d144          >        jsr report_error
                       >
0d8b :                 >skip0554
                       >
0d8b : 28              >            plp         ;restore status
                        
0d8c : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
0d8d : 08              >            php         ;save flags
0d8e : c001            >            cpy #1     ;test result
                       >            trap_ne
0d90 : f003            >        beq skip0557
                       >        trap            ;failed not equal (non zero)
0d92 : 20d144          >        jsr report_error
                       >
0d95 :                 >skip0557
                       >
0d95 : 68              >            pla         ;load status
0d96 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0d97 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d99 : f003            >        beq skip0560
                       >        trap            ;failed not equal (non zero)
0d9b : 20d144          >        jsr report_error
                       >
0d9e :                 >skip0560
                       >
0d9e : 28              >            plp         ;restore status
                        
0d9f : 88                       dey             ;00
                                tst_y 0,$ff-minus
0da0 : 08              >            php         ;save flags
0da1 : c000            >            cpy #0     ;test result
                       >            trap_ne
0da3 : f003            >        beq skip0563
                       >        trap            ;failed not equal (non zero)
0da5 : 20d144          >        jsr report_error
                       >
0da8 :                 >skip0563
                       >
0da8 : 68              >            pla         ;load status
0da9 : 48              >            pha
                       >            cmp_flag $ff-minus
0daa : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0dac : f003            >        beq skip0566
                       >        trap            ;failed not equal (non zero)
0dae : 20d144          >        jsr report_error
                       >
0db1 :                 >skip0566
                       >
0db1 : 28              >            plp         ;restore status
                        
0db2 : 88                       dey             ;ff
                                tst_y $ff,$ff-zero
0db3 : 08              >            php         ;save flags
0db4 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0db6 : f003            >        beq skip0569
                       >        trap            ;failed not equal (non zero)
0db8 : 20d144          >        jsr report_error
                       >
0dbb :                 >skip0569
                       >
0dbb : 68              >            pla         ;load status
0dbc : 48              >            pha
                       >            cmp_flag $ff-zero
0dbd : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0dbf : f003            >        beq skip0572
                       >        trap            ;failed not equal (non zero)
0dc1 : 20d144          >        jsr report_error
                       >
0dc4 :                 >skip0572
                       >
0dc4 : 28              >            plp         ;restore status
                        
0dc5 : 88                       dey             ;fe
                                set_stat 0
                       >            load_flag 0
0dc6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0dc8 : 48              >            pha         ;use stack to load status
0dc9 : 28              >            plp
                        
0dca : c8                       iny             ;ff
                                tst_y $ff,0+minus
0dcb : 08              >            php         ;save flags
0dcc : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0dce : f003            >        beq skip0577
                       >        trap            ;failed not equal (non zero)
0dd0 : 20d144          >        jsr report_error
                       >
0dd3 :                 >skip0577
                       >
0dd3 : 68              >            pla         ;load status
0dd4 : 48              >            pha
                       >            cmp_flag 0+minus
0dd5 : c9b0            >            cmp #(0+minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0dd7 : f003            >        beq skip0580
                       >        trap            ;failed not equal (non zero)
0dd9 : 20d144          >        jsr report_error
                       >
0ddc :                 >skip0580
                       >
0ddc : 28              >            plp         ;restore status
                        
0ddd : c8                       iny             ;00
                                tst_y 0,zero
0dde : 08              >            php         ;save flags
0ddf : c000            >            cpy #0     ;test result
                       >            trap_ne
0de1 : f003            >        beq skip0583
                       >        trap            ;failed not equal (non zero)
0de3 : 20d144          >        jsr report_error
                       >
0de6 :                 >skip0583
                       >
0de6 : 68              >            pla         ;load status
0de7 : 48              >            pha
                       >            cmp_flag zero
0de8 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0dea : f003            >        beq skip0586
                       >        trap            ;failed not equal (non zero)
0dec : 20d144          >        jsr report_error
                       >
0def :                 >skip0586
                       >
0def : 28              >            plp         ;restore status
                        
0df0 : c8                       iny             ;01
                                tst_y 1,0
0df1 : 08              >            php         ;save flags
0df2 : c001            >            cpy #1     ;test result
                       >            trap_ne
0df4 : f003            >        beq skip0589
                       >        trap            ;failed not equal (non zero)
0df6 : 20d144          >        jsr report_error
                       >
0df9 :                 >skip0589
                       >
0df9 : 68              >            pla         ;load status
0dfa : 48              >            pha
                       >            cmp_flag 0
0dfb : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0dfd : f003            >        beq skip0592
                       >        trap            ;failed not equal (non zero)
0dff : 20d144          >        jsr report_error
                       >
0e02 :                 >skip0592
                       >
0e02 : 28              >            plp         ;restore status
                        
0e03 : 88                       dey             ;00
                                tst_y 0,zero
0e04 : 08              >            php         ;save flags
0e05 : c000            >            cpy #0     ;test result
                       >            trap_ne
0e07 : f003            >        beq skip0595
                       >        trap            ;failed not equal (non zero)
0e09 : 20d144          >        jsr report_error
                       >
0e0c :                 >skip0595
                       >
0e0c : 68              >            pla         ;load status
0e0d : 48              >            pha
                       >            cmp_flag zero
0e0e : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0e10 : f003            >        beq skip0598
                       >        trap            ;failed not equal (non zero)
0e12 : 20d144          >        jsr report_error
                       >
0e15 :                 >skip0598
                       >
0e15 : 28              >            plp         ;restore status
                        
0e16 : 88                       dey             ;ff
                                tst_y $ff,minus
0e17 : 08              >            php         ;save flags
0e18 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0e1a : f003            >        beq skip0601
                       >        trap            ;failed not equal (non zero)
0e1c : 20d144          >        jsr report_error
                       >
0e1f :                 >skip0601
                       >
0e1f : 68              >            pla         ;load status
0e20 : 48              >            pha
                       >            cmp_flag minus
0e21 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0e23 : f003            >        beq skip0604
                       >        trap            ;failed not equal (non zero)
0e25 : 20d144          >        jsr report_error
                       >
0e28 :                 >skip0604
                       >
0e28 : 28              >            plp         ;restore status
                        
                                        
0e29 : a2ff                     ldx #$ff
                                set_stat $ff
                       >            load_flag $ff
0e2b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e2d : 48              >            pha         ;use stack to load status
0e2e : 28              >            plp
                        
0e2f : 8a                       txa
                                tst_a $ff,$ff-zero
0e30 : 08              >            php         ;save flags
0e31 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0e33 : f003            >        beq skip0609
                       >        trap            ;failed not equal (non zero)
0e35 : 20d144          >        jsr report_error
                       >
0e38 :                 >skip0609
                       >
0e38 : 68              >            pla         ;load status
0e39 : 48              >            pha
                       >            cmp_flag $ff-zero
0e3a : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0e3c : f003            >        beq skip0612
                       >        trap            ;failed not equal (non zero)
0e3e : 20d144          >        jsr report_error
                       >
0e41 :                 >skip0612
                       >
0e41 : 28              >            plp         ;restore status
                        
0e42 : 08                       php
0e43 : e8                       inx             ;00
0e44 : 28                       plp
0e45 : 8a                       txa
                                tst_a 0,$ff-minus
0e46 : 08              >            php         ;save flags
0e47 : c900            >            cmp #0     ;test result
                       >            trap_ne
0e49 : f003            >        beq skip0615
                       >        trap            ;failed not equal (non zero)
0e4b : 20d144          >        jsr report_error
                       >
0e4e :                 >skip0615
                       >
0e4e : 68              >            pla         ;load status
0e4f : 48              >            pha
                       >            cmp_flag $ff-minus
0e50 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0e52 : f003            >        beq skip0618
                       >        trap            ;failed not equal (non zero)
0e54 : 20d144          >        jsr report_error
                       >
0e57 :                 >skip0618
                       >
0e57 : 28              >            plp         ;restore status
                        
0e58 : 08                       php
0e59 : e8                       inx             ;01
0e5a : 28                       plp
0e5b : 8a                       txa
                                tst_a 1,$ff-minus-zero
0e5c : 08              >            php         ;save flags
0e5d : c901            >            cmp #1     ;test result
                       >            trap_ne
0e5f : f003            >        beq skip0621
                       >        trap            ;failed not equal (non zero)
0e61 : 20d144          >        jsr report_error
                       >
0e64 :                 >skip0621
                       >
0e64 : 68              >            pla         ;load status
0e65 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0e66 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0e68 : f003            >        beq skip0624
                       >        trap            ;failed not equal (non zero)
0e6a : 20d144          >        jsr report_error
                       >
0e6d :                 >skip0624
                       >
0e6d : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0e6e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e70 : 48              >            pha         ;use stack to load status
0e71 : 28              >            plp
                        
0e72 : 8a                       txa
                                tst_a 1,0
0e73 : 08              >            php         ;save flags
0e74 : c901            >            cmp #1     ;test result
                       >            trap_ne
0e76 : f003            >        beq skip0629
                       >        trap            ;failed not equal (non zero)
0e78 : 20d144          >        jsr report_error
                       >
0e7b :                 >skip0629
                       >
0e7b : 68              >            pla         ;load status
0e7c : 48              >            pha
                       >            cmp_flag 0
0e7d : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0e7f : f003            >        beq skip0632
                       >        trap            ;failed not equal (non zero)
0e81 : 20d144          >        jsr report_error
                       >
0e84 :                 >skip0632
                       >
0e84 : 28              >            plp         ;restore status
                        
0e85 : 08                       php
0e86 : ca                       dex             ;00
0e87 : 28                       plp
0e88 : 8a                       txa
                                tst_a 0,zero
0e89 : 08              >            php         ;save flags
0e8a : c900            >            cmp #0     ;test result
                       >            trap_ne
0e8c : f003            >        beq skip0635
                       >        trap            ;failed not equal (non zero)
0e8e : 20d144          >        jsr report_error
                       >
0e91 :                 >skip0635
                       >
0e91 : 68              >            pla         ;load status
0e92 : 48              >            pha
                       >            cmp_flag zero
0e93 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0e95 : f003            >        beq skip0638
                       >        trap            ;failed not equal (non zero)
0e97 : 20d144          >        jsr report_error
                       >
0e9a :                 >skip0638
                       >
0e9a : 28              >            plp         ;restore status
                        
0e9b : 08                       php
0e9c : ca                       dex             ;ff
0e9d : 28                       plp
0e9e : 8a                       txa
                                tst_a $ff,minus
0e9f : 08              >            php         ;save flags
0ea0 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0ea2 : f003            >        beq skip0641
                       >        trap            ;failed not equal (non zero)
0ea4 : 20d144          >        jsr report_error
                       >
0ea7 :                 >skip0641
                       >
0ea7 : 68              >            pla         ;load status
0ea8 : 48              >            pha
                       >            cmp_flag minus
0ea9 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0eab : f003            >        beq skip0644
                       >        trap            ;failed not equal (non zero)
0ead : 20d144          >        jsr report_error
                       >
0eb0 :                 >skip0644
                       >
0eb0 : 28              >            plp         ;restore status
                        
                                                
0eb1 : a0ff                     ldy #$ff
                                set_stat $ff
                       >            load_flag $ff
0eb3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0eb5 : 48              >            pha         ;use stack to load status
0eb6 : 28              >            plp
                        
0eb7 : 98                       tya
                                tst_a $ff,$ff-zero
0eb8 : 08              >            php         ;save flags
0eb9 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0ebb : f003            >        beq skip0649
                       >        trap            ;failed not equal (non zero)
0ebd : 20d144          >        jsr report_error
                       >
0ec0 :                 >skip0649
                       >
0ec0 : 68              >            pla         ;load status
0ec1 : 48              >            pha
                       >            cmp_flag $ff-zero
0ec2 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0ec4 : f003            >        beq skip0652
                       >        trap            ;failed not equal (non zero)
0ec6 : 20d144          >        jsr report_error
                       >
0ec9 :                 >skip0652
                       >
0ec9 : 28              >            plp         ;restore status
                        
0eca : 08                       php
0ecb : c8                       iny             ;00
0ecc : 28                       plp
0ecd : 98                       tya
                                tst_a 0,$ff-minus
0ece : 08              >            php         ;save flags
0ecf : c900            >            cmp #0     ;test result
                       >            trap_ne
0ed1 : f003            >        beq skip0655
                       >        trap            ;failed not equal (non zero)
0ed3 : 20d144          >        jsr report_error
                       >
0ed6 :                 >skip0655
                       >
0ed6 : 68              >            pla         ;load status
0ed7 : 48              >            pha
                       >            cmp_flag $ff-minus
0ed8 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0eda : f003            >        beq skip0658
                       >        trap            ;failed not equal (non zero)
0edc : 20d144          >        jsr report_error
                       >
0edf :                 >skip0658
                       >
0edf : 28              >            plp         ;restore status
                        
0ee0 : 08                       php
0ee1 : c8                       iny             ;01
0ee2 : 28                       plp
0ee3 : 98                       tya
                                tst_a 1,$ff-minus-zero
0ee4 : 08              >            php         ;save flags
0ee5 : c901            >            cmp #1     ;test result
                       >            trap_ne
0ee7 : f003            >        beq skip0661
                       >        trap            ;failed not equal (non zero)
0ee9 : 20d144          >        jsr report_error
                       >
0eec :                 >skip0661
                       >
0eec : 68              >            pla         ;load status
0eed : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0eee : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0ef0 : f003            >        beq skip0664
                       >        trap            ;failed not equal (non zero)
0ef2 : 20d144          >        jsr report_error
                       >
0ef5 :                 >skip0664
                       >
0ef5 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0ef6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0ef8 : 48              >            pha         ;use stack to load status
0ef9 : 28              >            plp
                        
0efa : 98                       tya
                                tst_a 1,0
0efb : 08              >            php         ;save flags
0efc : c901            >            cmp #1     ;test result
                       >            trap_ne
0efe : f003            >        beq skip0669
                       >        trap            ;failed not equal (non zero)
0f00 : 20d144          >        jsr report_error
                       >
0f03 :                 >skip0669
                       >
0f03 : 68              >            pla         ;load status
0f04 : 48              >            pha
                       >            cmp_flag 0
0f05 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0f07 : f003            >        beq skip0672
                       >        trap            ;failed not equal (non zero)
0f09 : 20d144          >        jsr report_error
                       >
0f0c :                 >skip0672
                       >
0f0c : 28              >            plp         ;restore status
                        
0f0d : 08                       php
0f0e : 88                       dey             ;00
0f0f : 28                       plp
0f10 : 98                       tya
                                tst_a 0,zero
0f11 : 08              >            php         ;save flags
0f12 : c900            >            cmp #0     ;test result
                       >            trap_ne
0f14 : f003            >        beq skip0675
                       >        trap            ;failed not equal (non zero)
0f16 : 20d144          >        jsr report_error
                       >
0f19 :                 >skip0675
                       >
0f19 : 68              >            pla         ;load status
0f1a : 48              >            pha
                       >            cmp_flag zero
0f1b : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0f1d : f003            >        beq skip0678
                       >        trap            ;failed not equal (non zero)
0f1f : 20d144          >        jsr report_error
                       >
0f22 :                 >skip0678
                       >
0f22 : 28              >            plp         ;restore status
                        
0f23 : 08                       php
0f24 : 88                       dey             ;ff
0f25 : 28                       plp
0f26 : 98                       tya
                                tst_a $ff,minus
0f27 : 08              >            php         ;save flags
0f28 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0f2a : f003            >        beq skip0681
                       >        trap            ;failed not equal (non zero)
0f2c : 20d144          >        jsr report_error
                       >
0f2f :                 >skip0681
                       >
0f2f : 68              >            pla         ;load status
0f30 : 48              >            pha
                       >            cmp_flag minus
0f31 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0f33 : f003            >        beq skip0684
                       >        trap            ;failed not equal (non zero)
0f35 : 20d144          >        jsr report_error
                       >
0f38 :                 >skip0684
                       >
0f38 : 28              >            plp         ;restore status
                        
                        
                                load_flag $ff
0f39 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
0f3b : 48                       pha
0f3c : a2ff                     ldx #$ff        ;ff
0f3e : 8a                       txa
0f3f : 28                       plp             
0f40 : a8                       tay
                                tst_y $ff,$ff-zero
0f41 : 08              >            php         ;save flags
0f42 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0f44 : f003            >        beq skip0688
                       >        trap            ;failed not equal (non zero)
0f46 : 20d144          >        jsr report_error
                       >
0f49 :                 >skip0688
                       >
0f49 : 68              >            pla         ;load status
0f4a : 48              >            pha
                       >            cmp_flag $ff-zero
0f4b : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0f4d : f003            >        beq skip0691
                       >        trap            ;failed not equal (non zero)
0f4f : 20d144          >        jsr report_error
                       >
0f52 :                 >skip0691
                       >
0f52 : 28              >            plp         ;restore status
                        
0f53 : 08                       php
0f54 : e8                       inx             ;00
0f55 : 8a                       txa
0f56 : 28                       plp
0f57 : a8                       tay
                                tst_y 0,$ff-minus
0f58 : 08              >            php         ;save flags
0f59 : c000            >            cpy #0     ;test result
                       >            trap_ne
0f5b : f003            >        beq skip0694
                       >        trap            ;failed not equal (non zero)
0f5d : 20d144          >        jsr report_error
                       >
0f60 :                 >skip0694
                       >
0f60 : 68              >            pla         ;load status
0f61 : 48              >            pha
                       >            cmp_flag $ff-minus
0f62 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0f64 : f003            >        beq skip0697
                       >        trap            ;failed not equal (non zero)
0f66 : 20d144          >        jsr report_error
                       >
0f69 :                 >skip0697
                       >
0f69 : 28              >            plp         ;restore status
                        
0f6a : 08                       php
0f6b : e8                       inx             ;01
0f6c : 8a                       txa
0f6d : 28                       plp
0f6e : a8                       tay
                                tst_y 1,$ff-minus-zero
0f6f : 08              >            php         ;save flags
0f70 : c001            >            cpy #1     ;test result
                       >            trap_ne
0f72 : f003            >        beq skip0700
                       >        trap            ;failed not equal (non zero)
0f74 : 20d144          >        jsr report_error
                       >
0f77 :                 >skip0700
                       >
0f77 : 68              >            pla         ;load status
0f78 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0f79 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0f7b : f003            >        beq skip0703
                       >        trap            ;failed not equal (non zero)
0f7d : 20d144          >        jsr report_error
                       >
0f80 :                 >skip0703
                       >
0f80 : 28              >            plp         ;restore status
                        
                                load_flag 0
0f81 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
0f83 : 48                       pha
0f84 : a900                     lda #0
0f86 : 8a                       txa
0f87 : 28                       plp
0f88 : a8                       tay
                                tst_y 1,0
0f89 : 08              >            php         ;save flags
0f8a : c001            >            cpy #1     ;test result
                       >            trap_ne
0f8c : f003            >        beq skip0707
                       >        trap            ;failed not equal (non zero)
0f8e : 20d144          >        jsr report_error
                       >
0f91 :                 >skip0707
                       >
0f91 : 68              >            pla         ;load status
0f92 : 48              >            pha
                       >            cmp_flag 0
0f93 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0f95 : f003            >        beq skip0710
                       >        trap            ;failed not equal (non zero)
0f97 : 20d144          >        jsr report_error
                       >
0f9a :                 >skip0710
                       >
0f9a : 28              >            plp         ;restore status
                        
0f9b : 08                       php
0f9c : ca                       dex             ;00
0f9d : 8a                       txa
0f9e : 28                       plp
0f9f : a8                       tay
                                tst_y 0,zero
0fa0 : 08              >            php         ;save flags
0fa1 : c000            >            cpy #0     ;test result
                       >            trap_ne
0fa3 : f003            >        beq skip0713
                       >        trap            ;failed not equal (non zero)
0fa5 : 20d144          >        jsr report_error
                       >
0fa8 :                 >skip0713
                       >
0fa8 : 68              >            pla         ;load status
0fa9 : 48              >            pha
                       >            cmp_flag zero
0faa : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0fac : f003            >        beq skip0716
                       >        trap            ;failed not equal (non zero)
0fae : 20d144          >        jsr report_error
                       >
0fb1 :                 >skip0716
                       >
0fb1 : 28              >            plp         ;restore status
                        
0fb2 : 08                       php
0fb3 : ca                       dex             ;ff
0fb4 : 8a                       txa
0fb5 : 28                       plp
0fb6 : a8                       tay
                                tst_y $ff,minus
0fb7 : 08              >            php         ;save flags
0fb8 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0fba : f003            >        beq skip0719
                       >        trap            ;failed not equal (non zero)
0fbc : 20d144          >        jsr report_error
                       >
0fbf :                 >skip0719
                       >
0fbf : 68              >            pla         ;load status
0fc0 : 48              >            pha
                       >            cmp_flag minus
0fc1 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0fc3 : f003            >        beq skip0722
                       >        trap            ;failed not equal (non zero)
0fc5 : 20d144          >        jsr report_error
                       >
0fc8 :                 >skip0722
                       >
0fc8 : 28              >            plp         ;restore status
                        
                        
                        
                                load_flag $ff
0fc9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
0fcb : 48                       pha
0fcc : a0ff                     ldy #$ff        ;ff
0fce : 98                       tya
0fcf : 28                       plp
0fd0 : aa                       tax
                                tst_x $ff,$ff-zero
0fd1 : 08              >            php         ;save flags
0fd2 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0fd4 : f003            >        beq skip0726
                       >        trap            ;failed not equal (non zero)
0fd6 : 20d144          >        jsr report_error
                       >
0fd9 :                 >skip0726
                       >
0fd9 : 68              >            pla         ;load status
0fda : 48              >            pha
                       >            cmp_flag $ff-zero
0fdb : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0fdd : f003            >        beq skip0729
                       >        trap            ;failed not equal (non zero)
0fdf : 20d144          >        jsr report_error
                       >
0fe2 :                 >skip0729
                       >
0fe2 : 28              >            plp         ;restore status
                        
0fe3 : 08                       php
0fe4 : c8                       iny             ;00
0fe5 : 98                       tya
0fe6 : 28                       plp
0fe7 : aa                       tax
                                tst_x 0,$ff-minus
0fe8 : 08              >            php         ;save flags
0fe9 : e000            >            cpx #0     ;test result
                       >            trap_ne
0feb : f003            >        beq skip0732
                       >        trap            ;failed not equal (non zero)
0fed : 20d144          >        jsr report_error
                       >
0ff0 :                 >skip0732
                       >
0ff0 : 68              >            pla         ;load status
0ff1 : 48              >            pha
                       >            cmp_flag $ff-minus
0ff2 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0ff4 : f003            >        beq skip0735
                       >        trap            ;failed not equal (non zero)
0ff6 : 20d144          >        jsr report_error
                       >
0ff9 :                 >skip0735
                       >
0ff9 : 28              >            plp         ;restore status
                        
0ffa : 08                       php
0ffb : c8                       iny             ;01
0ffc : 98                       tya
0ffd : 28                       plp
0ffe : aa                       tax
                                tst_x 1,$ff-minus-zero
0fff : 08              >            php         ;save flags
1000 : e001            >            cpx #1     ;test result
                       >            trap_ne
1002 : f003            >        beq skip0738
                       >        trap            ;failed not equal (non zero)
1004 : 20d144          >        jsr report_error
                       >
1007 :                 >skip0738
                       >
1007 : 68              >            pla         ;load status
1008 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
1009 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
100b : f003            >        beq skip0741
                       >        trap            ;failed not equal (non zero)
100d : 20d144          >        jsr report_error
                       >
1010 :                 >skip0741
                       >
1010 : 28              >            plp         ;restore status
                        
                                load_flag 0
1011 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
1013 : 48                       pha
1014 : a900                     lda #0          ;preset status
1016 : 98                       tya
1017 : 28                       plp
1018 : aa                       tax
                                tst_x 1,0
1019 : 08              >            php         ;save flags
101a : e001            >            cpx #1     ;test result
                       >            trap_ne
101c : f003            >        beq skip0745
                       >        trap            ;failed not equal (non zero)
101e : 20d144          >        jsr report_error
                       >
1021 :                 >skip0745
                       >
1021 : 68              >            pla         ;load status
1022 : 48              >            pha
                       >            cmp_flag 0
1023 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1025 : f003            >        beq skip0748
                       >        trap            ;failed not equal (non zero)
1027 : 20d144          >        jsr report_error
                       >
102a :                 >skip0748
                       >
102a : 28              >            plp         ;restore status
                        
102b : 08                       php
102c : 88                       dey             ;00
102d : 98                       tya
102e : 28                       plp
102f : aa                       tax
                                tst_x 0,zero
1030 : 08              >            php         ;save flags
1031 : e000            >            cpx #0     ;test result
                       >            trap_ne
1033 : f003            >        beq skip0751
                       >        trap            ;failed not equal (non zero)
1035 : 20d144          >        jsr report_error
                       >
1038 :                 >skip0751
                       >
1038 : 68              >            pla         ;load status
1039 : 48              >            pha
                       >            cmp_flag zero
103a : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
103c : f003            >        beq skip0754
                       >        trap            ;failed not equal (non zero)
103e : 20d144          >        jsr report_error
                       >
1041 :                 >skip0754
                       >
1041 : 28              >            plp         ;restore status
                        
1042 : 08                       php
1043 : 88                       dey             ;ff
1044 : 98                       tya
1045 : 28                       plp
1046 : aa                       tax
                                tst_x $ff,minus
1047 : 08              >            php         ;save flags
1048 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
104a : f003            >        beq skip0757
                       >        trap            ;failed not equal (non zero)
104c : 20d144          >        jsr report_error
                       >
104f :                 >skip0757
                       >
104f : 68              >            pla         ;load status
1050 : 48              >            pha
                       >            cmp_flag minus
1051 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1053 : f003            >        beq skip0760
                       >        trap            ;failed not equal (non zero)
1055 : 20d144          >        jsr report_error
                       >
1058 :                 >skip0760
                       >
1058 : 28              >            plp         ;restore status
                        
                                next_test
1059 : ad0002          >            lda test_case   ;previous test
105c : c90d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
105e : f003            >        beq skip0763
                       >        trap            ;failed not equal (non zero)
1060 : 20d144          >        jsr report_error
                       >
1063 :                 >skip0763
                       >
000e =                 >test_num = test_num + 1
1063 : a90e            >            lda #test_num   ;*** next tests' number
1065 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                             
                        ;TSX sets NZ - TXS does not
                        ;  This section also tests for proper stack wrap around.
1068 : a201                     ldx #1          ;01
                                set_stat $ff
                       >            load_flag $ff
106a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
106c : 48              >            pha         ;use stack to load status
106d : 28              >            plp
                        
106e : 9a                       txs
106f : 08                       php
1070 : ad0101                   lda $101
                                cmp_flag $ff
1073 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
1075 : f003            >        beq skip0768
                       >        trap            ;failed not equal (non zero)
1077 : 20d144          >        jsr report_error
                       >
107a :                 >skip0768
                        
                                set_stat 0
                       >            load_flag 0
107a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
107c : 48              >            pha         ;use stack to load status
107d : 28              >            plp
                        
107e : 9a                       txs
107f : 08                       php
1080 : ad0101                   lda $101
                                cmp_flag 0
1083 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
1085 : f003            >        beq skip0773
                       >        trap            ;failed not equal (non zero)
1087 : 20d144          >        jsr report_error
                       >
108a :                 >skip0773
                        
108a : ca                       dex             ;00
                                set_stat $ff
                       >            load_flag $ff
108b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
108d : 48              >            pha         ;use stack to load status
108e : 28              >            plp
                        
108f : 9a                       txs
1090 : 08                       php
1091 : ad0001                   lda $100
                                cmp_flag $ff
1094 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
1096 : f003            >        beq skip0778
                       >        trap            ;failed not equal (non zero)
1098 : 20d144          >        jsr report_error
                       >
109b :                 >skip0778
                        
                                set_stat 0
                       >            load_flag 0
109b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
109d : 48              >            pha         ;use stack to load status
109e : 28              >            plp
                        
109f : 9a                       txs
10a0 : 08                       php
10a1 : ad0001                   lda $100
                                cmp_flag 0
10a4 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
10a6 : f003            >        beq skip0783
                       >        trap            ;failed not equal (non zero)
10a8 : 20d144          >        jsr report_error
                       >
10ab :                 >skip0783
                        
10ab : ca                       dex             ;ff
                                set_stat $ff
                       >            load_flag $ff
10ac : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
10ae : 48              >            pha         ;use stack to load status
10af : 28              >            plp
                        
10b0 : 9a                       txs
10b1 : 08                       php
10b2 : adff01                   lda $1ff
                                cmp_flag $ff
10b5 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
10b7 : f003            >        beq skip0788
                       >        trap            ;failed not equal (non zero)
10b9 : 20d144          >        jsr report_error
                       >
10bc :                 >skip0788
                        
                                set_stat 0
                       >            load_flag 0
10bc : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
10be : 48              >            pha         ;use stack to load status
10bf : 28              >            plp
                        
10c0 : 9a                       txs
10c1 : 08                       php
10c2 : adff01                   lda $1ff
                                cmp_flag 0
10c5 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                
10c7 : a201                     ldx #1
10c9 : 9a                       txs             ;sp=01
                                set_stat $ff
                       >            load_flag $ff
10ca : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
10cc : 48              >            pha         ;use stack to load status
10cd : 28              >            plp
                        
10ce : ba                       tsx             ;clears Z, N
10cf : 08                       php             ;sp=00
10d0 : e001                     cpx #1
                                trap_ne
10d2 : f003            >        beq skip0795
                       >        trap            ;failed not equal (non zero)
10d4 : 20d144          >        jsr report_error
                       >
10d7 :                 >skip0795
                        
10d7 : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
10da : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
10dc : f003            >        beq skip0798
                       >        trap            ;failed not equal (non zero)
10de : 20d144          >        jsr report_error
                       >
10e1 :                 >skip0798
                        
                                set_stat $ff
                       >            load_flag $ff
10e1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
10e3 : 48              >            pha         ;use stack to load status
10e4 : 28              >            plp
                        
10e5 : ba                       tsx             ;clears N, sets Z
10e6 : 08                       php             ;sp=ff
10e7 : e000                     cpx #0
                                trap_ne
10e9 : f003            >        beq skip0802
                       >        trap            ;failed not equal (non zero)
10eb : 20d144          >        jsr report_error
                       >
10ee :                 >skip0802
                        
10ee : ad0001                   lda $100
                                cmp_flag $ff-minus
10f1 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
10f3 : f003            >        beq skip0805
                       >        trap            ;failed not equal (non zero)
10f5 : 20d144          >        jsr report_error
                       >
10f8 :                 >skip0805
                        
                                set_stat $ff
                       >            load_flag $ff
10f8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
10fa : 48              >            pha         ;use stack to load status
10fb : 28              >            plp
                        
10fc : ba                       tsx             ;clears N, sets Z
10fd : 08                       php             ;sp=fe
10fe : e0ff                     cpx #$ff
                                trap_ne
1100 : f003            >        beq skip0809
                       >        trap            ;failed not equal (non zero)
1102 : 20d144          >        jsr report_error
                       >
1105 :                 >skip0809
                        
1105 : adff01                   lda $1ff
                                cmp_flag $ff-zero
1108 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
110a : f003            >        beq skip0812
                       >        trap            ;failed not equal (non zero)
110c : 20d144          >        jsr report_error
                       >
110f :                 >skip0812
                        
                                
110f : a201                     ldx #1
1111 : 9a                       txs             ;sp=01
                                set_stat 0
                       >            load_flag 0
1112 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1114 : 48              >            pha         ;use stack to load status
1115 : 28              >            plp
                        
1116 : ba                       tsx             ;clears Z, N
1117 : 08                       php             ;sp=00
1118 : e001                     cpx #1
                                trap_ne
111a : f003            >        beq skip0816
                       >        trap            ;failed not equal (non zero)
111c : 20d144          >        jsr report_error
                       >
111f :                 >skip0816
                        
111f : ad0101                   lda $101
                                cmp_flag 0
1122 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
1124 : f003            >        beq skip0819
                       >        trap            ;failed not equal (non zero)
1126 : 20d144          >        jsr report_error
                       >
1129 :                 >skip0819
                        
                                set_stat 0
                       >            load_flag 0
1129 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
112b : 48              >            pha         ;use stack to load status
112c : 28              >            plp
                        
112d : ba                       tsx             ;clears N, sets Z
112e : 08                       php             ;sp=ff
112f : e000                     cpx #0
                                trap_ne
1131 : f003            >        beq skip0823
                       >        trap            ;failed not equal (non zero)
1133 : 20d144          >        jsr report_error
                       >
1136 :                 >skip0823
                        
1136 : ad0001                   lda $100
                                cmp_flag zero
1139 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
113b : f003            >        beq skip0826
                       >        trap            ;failed not equal (non zero)
113d : 20d144          >        jsr report_error
                       >
1140 :                 >skip0826
                        
                                set_stat 0
                       >            load_flag 0
1140 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1142 : 48              >            pha         ;use stack to load status
1143 : 28              >            plp
                        
1144 : ba                       tsx             ;clears N, sets Z
1145 : 08                       php             ;sp=fe
1146 : e0ff                     cpx #$ff
                                trap_ne
1148 : f003            >        beq skip0830
                       >        trap            ;failed not equal (non zero)
114a : 20d144          >        jsr report_error
                       >
114d :                 >skip0830
                        
114d : adff01                   lda $1ff
                                cmp_flag minus
1150 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
1152 : f003            >        beq skip0833
                       >        trap            ;failed not equal (non zero)
1154 : 20d144          >        jsr report_error
                       >
1157 :                 >skip0833
                        
1157 : 68                       pla             ;sp=ff
                                next_test
1158 : ad0002          >            lda test_case   ;previous test
115b : c90e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
115d : f003            >        beq skip0836
                       >        trap            ;failed not equal (non zero)
115f : 20d144          >        jsr report_error
                       >
1162 :                 >skip0836
                       >
000f =                 >test_num = test_num + 1
1162 : a90f            >            lda #test_num   ;*** next tests' number
1164 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; testing index register load & store LDY LDX STY STX all addressing modes
                        ; LDX / STX - zp,y / abs,y
1167 : a003                     ldy #3
1169 :                  tldx    
                                set_stat 0
                       >            load_flag 0
1169 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
116b : 48              >            pha         ;use stack to load status
116c : 28              >            plp
                        
116d : b60c                     ldx zp1,y
116f : 08                       php         ;test stores do not alter flags
1170 : 8a                       txa
1171 : 49c3                     eor #$c3
1173 : 28                       plp
1174 : 990302                   sta abst,y
1177 : 08                       php         ;flags after load/store sequence
1178 : 49c3                     eor #$c3
117a : d91802                   cmp abs1,y  ;test result
                                trap_ne
117d : f003            >        beq skip0840
                       >        trap            ;failed not equal (non zero)
117f : 20d144          >        jsr report_error
                       >
1182 :                 >skip0840
                        
1182 : 68                       pla         ;load status
                                eor_flag 0
1183 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1185 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1188 : f003            >        beq skip0843
                       >        trap            ;failed not equal (non zero)
118a : 20d144          >        jsr report_error
                       >
118d :                 >skip0843
                        
118d : 88                       dey
118e : 10d9                     bpl tldx                  
                        
1190 : a003                     ldy #3
1192 :                  tldx1   
                                set_stat $ff
                       >            load_flag $ff
1192 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1194 : 48              >            pha         ;use stack to load status
1195 : 28              >            plp
                        
1196 : b60c                     ldx zp1,y
1198 : 08                       php         ;test stores do not alter flags
1199 : 8a                       txa
119a : 49c3                     eor #$c3
119c : 28                       plp
119d : 990302                   sta abst,y
11a0 : 08                       php         ;flags after load/store sequence
11a1 : 49c3                     eor #$c3
11a3 : d91802                   cmp abs1,y  ;test result
                                trap_ne
11a6 : f003            >        beq skip0847
                       >        trap            ;failed not equal (non zero)
11a8 : 20d144          >        jsr report_error
                       >
11ab :                 >skip0847
                        
11ab : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
11ac : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
11ae : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
11b1 : f003            >        beq skip0850
                       >        trap            ;failed not equal (non zero)
11b3 : 20d144          >        jsr report_error
                       >
11b6 :                 >skip0850
                        
11b6 : 88                       dey
11b7 : 10d9                     bpl tldx1                  
                        
11b9 : a003                     ldy #3
11bb :                  tldx2   
                                set_stat 0
                       >            load_flag 0
11bb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
11bd : 48              >            pha         ;use stack to load status
11be : 28              >            plp
                        
11bf : be1802                   ldx abs1,y
11c2 : 08                       php         ;test stores do not alter flags
11c3 : 8a                       txa
11c4 : 49c3                     eor #$c3
11c6 : aa                       tax
11c7 : 28                       plp
11c8 : 9603                     stx zpt,y
11ca : 08                       php         ;flags after load/store sequence
11cb : 49c3                     eor #$c3
11cd : d90c00                   cmp zp1,y   ;test result
                                trap_ne
11d0 : f003            >        beq skip0854
                       >        trap            ;failed not equal (non zero)
11d2 : 20d144          >        jsr report_error
                       >
11d5 :                 >skip0854
                        
11d5 : 68                       pla         ;load status
                                eor_flag 0
11d6 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
11d8 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
11db : f003            >        beq skip0857
                       >        trap            ;failed not equal (non zero)
11dd : 20d144          >        jsr report_error
                       >
11e0 :                 >skip0857
                        
11e0 : 88                       dey
11e1 : 10d8                     bpl tldx2                  
                        
11e3 : a003                     ldy #3
11e5 :                  tldx3   
                                set_stat $ff
                       >            load_flag $ff
11e5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11e7 : 48              >            pha         ;use stack to load status
11e8 : 28              >            plp
                        
11e9 : be1802                   ldx abs1,y
11ec : 08                       php         ;test stores do not alter flags
11ed : 8a                       txa
11ee : 49c3                     eor #$c3
11f0 : aa                       tax
11f1 : 28                       plp
11f2 : 9603                     stx zpt,y
11f4 : 08                       php         ;flags after load/store sequence
11f5 : 49c3                     eor #$c3
11f7 : d90c00                   cmp zp1,y   ;test result
                                trap_ne
11fa : f003            >        beq skip0861
                       >        trap            ;failed not equal (non zero)
11fc : 20d144          >        jsr report_error
                       >
11ff :                 >skip0861
                        
11ff : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1200 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1202 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1205 : f003            >        beq skip0864
                       >        trap            ;failed not equal (non zero)
1207 : 20d144          >        jsr report_error
                       >
120a :                 >skip0864
                        
120a : 88                       dey
120b : 10d8                     bpl tldx3
                                
120d : a003                     ldy #3      ;testing store result
120f : a200                     ldx #0
1211 : b90300           tstx    lda zpt,y
1214 : 49c3                     eor #$c3
1216 : d90c00                   cmp zp1,y
                                trap_ne     ;store to zp data
1219 : f003            >        beq skip0866
                       >        trap            ;failed not equal (non zero)
121b : 20d144          >        jsr report_error
                       >
121e :                 >skip0866
                        
121e : 9603                     stx zpt,y   ;clear                
1220 : b90302                   lda abst,y
1223 : 49c3                     eor #$c3
1225 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
1228 : f003            >        beq skip0868
                       >        trap            ;failed not equal (non zero)
122a : 20d144          >        jsr report_error
                       >
122d :                 >skip0868
                        
122d : 8a                       txa
122e : 990302                   sta abst,y  ;clear                
1231 : 88                       dey
1232 : 10dd                     bpl tstx
                                next_test
1234 : ad0002          >            lda test_case   ;previous test
1237 : c90f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1239 : f003            >        beq skip0871
                       >        trap            ;failed not equal (non zero)
123b : 20d144          >        jsr report_error
                       >
123e :                 >skip0871
                       >
0010 =                 >test_num = test_num + 1
123e : a910            >            lda #test_num   ;*** next tests' number
1240 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; indexed wraparound test (only zp should wrap)
1243 : a0fd                     ldy #3+$fa
1245 : b612             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
1247 : 8a                       txa
1248 : 990901                   sta abst-$fa,y      ;no STX abs,y!
124b : 88                       dey
124c : c0fa                     cpy #$fa
124e : b0f5                     bcs tldx4                  
1250 : a0fd                     ldy #3+$fa
1252 : be1e01           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
1255 : 9609                     stx zpt-$fa&$ff,y
1257 : 88                       dey
1258 : c0fa                     cpy #$fa
125a : b0f6                     bcs tldx5                  
125c : a003                     ldy #3      ;testing wraparound result
125e : a200                     ldx #0
1260 : b90300           tstx1   lda zpt,y
1263 : d90c00                   cmp zp1,y
                                trap_ne     ;store to zp data
1266 : f003            >        beq skip0873
                       >        trap            ;failed not equal (non zero)
1268 : 20d144          >        jsr report_error
                       >
126b :                 >skip0873
                        
126b : 9603                     stx zpt,y   ;clear                
126d : b90302                   lda abst,y
1270 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
1273 : f003            >        beq skip0875
                       >        trap            ;failed not equal (non zero)
1275 : 20d144          >        jsr report_error
                       >
1278 :                 >skip0875
                        
1278 : 8a                       txa
1279 : 990302                   sta abst,y  ;clear                
127c : 88                       dey
127d : 10e1                     bpl tstx1
                                next_test
127f : ad0002          >            lda test_case   ;previous test
1282 : c910            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1284 : f003            >        beq skip0878
                       >        trap            ;failed not equal (non zero)
1286 : 20d144          >        jsr report_error
                       >
1289 :                 >skip0878
                       >
0011 =                 >test_num = test_num + 1
1289 : a911            >            lda #test_num   ;*** next tests' number
128b : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; LDY / STY - zp,x / abs,x
128e : a203                     ldx #3
1290 :                  tldy    
                                set_stat 0
                       >            load_flag 0
1290 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1292 : 48              >            pha         ;use stack to load status
1293 : 28              >            plp
                        
1294 : b40c                     ldy zp1,x
1296 : 08                       php         ;test stores do not alter flags
1297 : 98                       tya
1298 : 49c3                     eor #$c3
129a : 28                       plp
129b : 9d0302                   sta abst,x
129e : 08                       php         ;flags after load/store sequence
129f : 49c3                     eor #$c3
12a1 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
12a4 : f003            >        beq skip0882
                       >        trap            ;failed not equal (non zero)
12a6 : 20d144          >        jsr report_error
                       >
12a9 :                 >skip0882
                        
12a9 : 68                       pla         ;load status
                                eor_flag 0
12aa : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
12ac : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
12af : f003            >        beq skip0885
                       >        trap            ;failed not equal (non zero)
12b1 : 20d144          >        jsr report_error
                       >
12b4 :                 >skip0885
                        
12b4 : ca                       dex
12b5 : 10d9                     bpl tldy                  
                        
12b7 : a203                     ldx #3
12b9 :                  tldy1   
                                set_stat $ff
                       >            load_flag $ff
12b9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
12bb : 48              >            pha         ;use stack to load status
12bc : 28              >            plp
                        
12bd : b40c                     ldy zp1,x
12bf : 08                       php         ;test stores do not alter flags
12c0 : 98                       tya
12c1 : 49c3                     eor #$c3
12c3 : 28                       plp
12c4 : 9d0302                   sta abst,x
12c7 : 08                       php         ;flags after load/store sequence
12c8 : 49c3                     eor #$c3
12ca : dd1802                   cmp abs1,x  ;test result
                                trap_ne
12cd : f003            >        beq skip0889
                       >        trap            ;failed not equal (non zero)
12cf : 20d144          >        jsr report_error
                       >
12d2 :                 >skip0889
                        
12d2 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
12d3 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
12d5 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
12d8 : f003            >        beq skip0892
                       >        trap            ;failed not equal (non zero)
12da : 20d144          >        jsr report_error
                       >
12dd :                 >skip0892
                        
12dd : ca                       dex
12de : 10d9                     bpl tldy1                  
                        
12e0 : a203                     ldx #3
12e2 :                  tldy2   
                                set_stat 0
                       >            load_flag 0
12e2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
12e4 : 48              >            pha         ;use stack to load status
12e5 : 28              >            plp
                        
12e6 : bc1802                   ldy abs1,x
12e9 : 08                       php         ;test stores do not alter flags
12ea : 98                       tya
12eb : 49c3                     eor #$c3
12ed : a8                       tay
12ee : 28                       plp
12ef : 9403                     sty zpt,x
12f1 : 08                       php         ;flags after load/store sequence
12f2 : 49c3                     eor #$c3
12f4 : d50c                     cmp zp1,x   ;test result
                                trap_ne
12f6 : f003            >        beq skip0896
                       >        trap            ;failed not equal (non zero)
12f8 : 20d144          >        jsr report_error
                       >
12fb :                 >skip0896
                        
12fb : 68                       pla         ;load status
                                eor_flag 0
12fc : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
12fe : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
1301 : f003            >        beq skip0899
                       >        trap            ;failed not equal (non zero)
1303 : 20d144          >        jsr report_error
                       >
1306 :                 >skip0899
                        
1306 : ca                       dex
1307 : 10d9                     bpl tldy2                  
                        
1309 : a203                     ldx #3
130b :                  tldy3
                                set_stat $ff
                       >            load_flag $ff
130b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
130d : 48              >            pha         ;use stack to load status
130e : 28              >            plp
                        
130f : bc1802                   ldy abs1,x
1312 : 08                       php         ;test stores do not alter flags
1313 : 98                       tya
1314 : 49c3                     eor #$c3
1316 : a8                       tay
1317 : 28                       plp
1318 : 9403                     sty zpt,x
131a : 08                       php         ;flags after load/store sequence
131b : 49c3                     eor #$c3
131d : d50c                     cmp zp1,x   ;test result
                                trap_ne
131f : f003            >        beq skip0903
                       >        trap            ;failed not equal (non zero)
1321 : 20d144          >        jsr report_error
                       >
1324 :                 >skip0903
                        
1324 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1325 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1327 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
132a : f003            >        beq skip0906
                       >        trap            ;failed not equal (non zero)
132c : 20d144          >        jsr report_error
                       >
132f :                 >skip0906
                        
132f : ca                       dex
1330 : 10d9                     bpl tldy3
                        
1332 : a203                     ldx #3      ;testing store result
1334 : a000                     ldy #0
1336 : b503             tsty    lda zpt,x
1338 : 49c3                     eor #$c3
133a : d50c                     cmp zp1,x
                                trap_ne     ;store to zp,x data
133c : f003            >        beq skip0908
                       >        trap            ;failed not equal (non zero)
133e : 20d144          >        jsr report_error
                       >
1341 :                 >skip0908
                        
1341 : 9403                     sty zpt,x   ;clear                
1343 : bd0302                   lda abst,x
1346 : 49c3                     eor #$c3
1348 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
134b : f003            >        beq skip0910
                       >        trap            ;failed not equal (non zero)
134d : 20d144          >        jsr report_error
                       >
1350 :                 >skip0910
                        
1350 : 8a                       txa
1351 : 9d0302                   sta abst,x  ;clear                
1354 : ca                       dex
1355 : 10df                     bpl tsty
                                next_test
1357 : ad0002          >            lda test_case   ;previous test
135a : c911            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
135c : f003            >        beq skip0913
                       >        trap            ;failed not equal (non zero)
135e : 20d144          >        jsr report_error
                       >
1361 :                 >skip0913
                       >
0012 =                 >test_num = test_num + 1
1361 : a912            >            lda #test_num   ;*** next tests' number
1363 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
1366 : a2fd                     ldx #3+$fa
1368 : b412             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
136a : 98                       tya
136b : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
136e : ca                       dex
136f : e0fa                     cpx #$fa
1371 : b0f5                     bcs tldy4                  
1373 : a2fd                     ldx #3+$fa
1375 : bc1e01           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
1378 : 9409                     sty zpt-$fa&$ff,x
137a : ca                       dex
137b : e0fa                     cpx #$fa
137d : b0f6                     bcs tldy5                  
137f : a203                     ldx #3      ;testing wraparound result
1381 : a000                     ldy #0
1383 : b503             tsty1   lda zpt,x
1385 : d50c                     cmp zp1,x
                                trap_ne     ;store to zp,x data
1387 : f003            >        beq skip0915
                       >        trap            ;failed not equal (non zero)
1389 : 20d144          >        jsr report_error
                       >
138c :                 >skip0915
                        
138c : 9403                     sty zpt,x   ;clear                
138e : bd0302                   lda abst,x
1391 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
1394 : f003            >        beq skip0917
                       >        trap            ;failed not equal (non zero)
1396 : 20d144          >        jsr report_error
                       >
1399 :                 >skip0917
                        
1399 : 8a                       txa
139a : 9d0302                   sta abst,x  ;clear                
139d : ca                       dex
139e : 10e3                     bpl tsty1
                                next_test
13a0 : ad0002          >            lda test_case   ;previous test
13a3 : c912            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
13a5 : f003            >        beq skip0920
                       >        trap            ;failed not equal (non zero)
13a7 : 20d144          >        jsr report_error
                       >
13aa :                 >skip0920
                       >
0013 =                 >test_num = test_num + 1
13aa : a913            >            lda #test_num   ;*** next tests' number
13ac : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDX / STX - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
13af : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
13b1 : 48              >            pha         ;use stack to load status
13b2 : 28              >            plp
                        
13b3 : a60c                     ldx zp1
13b5 : 08                       php         ;test stores do not alter flags
13b6 : 8a                       txa
13b7 : 49c3                     eor #$c3
13b9 : aa                       tax
13ba : 28                       plp
13bb : 8e0302                   stx abst
13be : 08                       php         ;flags after load/store sequence
13bf : 49c3                     eor #$c3
13c1 : aa                       tax
13c2 : e0c3                     cpx #$c3    ;test result
                                trap_ne
13c4 : f003            >        beq skip0924
                       >        trap            ;failed not equal (non zero)
13c6 : 20d144          >        jsr report_error
                       >
13c9 :                 >skip0924
                        
13c9 : 68                       pla         ;load status
                                eor_flag 0
13ca : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
13cc : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
13cf : f003            >        beq skip0927
                       >        trap            ;failed not equal (non zero)
13d1 : 20d144          >        jsr report_error
                       >
13d4 :                 >skip0927
                        
                                set_stat 0
                       >            load_flag 0
13d4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
13d6 : 48              >            pha         ;use stack to load status
13d7 : 28              >            plp
                        
13d8 : a60d                     ldx zp1+1
13da : 08                       php         ;test stores do not alter flags
13db : 8a                       txa
13dc : 49c3                     eor #$c3
13de : aa                       tax
13df : 28                       plp
13e0 : 8e0402                   stx abst+1
13e3 : 08                       php         ;flags after load/store sequence
13e4 : 49c3                     eor #$c3
13e6 : aa                       tax
13e7 : e082                     cpx #$82    ;test result
                                trap_ne
13e9 : f003            >        beq skip0931
                       >        trap            ;failed not equal (non zero)
13eb : 20d144          >        jsr report_error
                       >
13ee :                 >skip0931
                        
13ee : 68                       pla         ;load status
                                eor_flag 0
13ef : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
13f1 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
13f4 : f003            >        beq skip0934
                       >        trap            ;failed not equal (non zero)
13f6 : 20d144          >        jsr report_error
                       >
13f9 :                 >skip0934
                        
                                set_stat 0
                       >            load_flag 0
13f9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
13fb : 48              >            pha         ;use stack to load status
13fc : 28              >            plp
                        
13fd : a60e                     ldx zp1+2
13ff : 08                       php         ;test stores do not alter flags
1400 : 8a                       txa
1401 : 49c3                     eor #$c3
1403 : aa                       tax
1404 : 28                       plp
1405 : 8e0502                   stx abst+2
1408 : 08                       php         ;flags after load/store sequence
1409 : 49c3                     eor #$c3
140b : aa                       tax
140c : e041                     cpx #$41    ;test result
                                trap_ne
140e : f003            >        beq skip0938
                       >        trap            ;failed not equal (non zero)
1410 : 20d144          >        jsr report_error
                       >
1413 :                 >skip0938
                        
1413 : 68                       pla         ;load status
                                eor_flag 0
1414 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1416 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1419 : f003            >        beq skip0941
                       >        trap            ;failed not equal (non zero)
141b : 20d144          >        jsr report_error
                       >
141e :                 >skip0941
                        
                                set_stat 0
                       >            load_flag 0
141e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1420 : 48              >            pha         ;use stack to load status
1421 : 28              >            plp
                        
1422 : a60f                     ldx zp1+3
1424 : 08                       php         ;test stores do not alter flags
1425 : 8a                       txa
1426 : 49c3                     eor #$c3
1428 : aa                       tax
1429 : 28                       plp
142a : 8e0602                   stx abst+3
142d : 08                       php         ;flags after load/store sequence
142e : 49c3                     eor #$c3
1430 : aa                       tax
1431 : e000                     cpx #0      ;test result
                                trap_ne
1433 : f003            >        beq skip0945
                       >        trap            ;failed not equal (non zero)
1435 : 20d144          >        jsr report_error
                       >
1438 :                 >skip0945
                        
1438 : 68                       pla         ;load status
                                eor_flag 0
1439 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
143b : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
143e : f003            >        beq skip0948
                       >        trap            ;failed not equal (non zero)
1440 : 20d144          >        jsr report_error
                       >
1443 :                 >skip0948
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1443 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1445 : 48              >            pha         ;use stack to load status
1446 : 28              >            plp
                        
1447 : a60c                     ldx zp1  
1449 : 08                       php         ;test stores do not alter flags
144a : 8a                       txa
144b : 49c3                     eor #$c3
144d : aa                       tax
144e : 28                       plp
144f : 8e0302                   stx abst  
1452 : 08                       php         ;flags after load/store sequence
1453 : 49c3                     eor #$c3
1455 : aa                       tax
1456 : e0c3                     cpx #$c3    ;test result
                                trap_ne     ;
1458 : f003            >        beq skip0952
                       >        trap            ;failed not equal (non zero)
145a : 20d144          >        jsr report_error
                       >
145d :                 >skip0952
                        
145d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
145e : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1460 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1463 : f003            >        beq skip0955
                       >        trap            ;failed not equal (non zero)
1465 : 20d144          >        jsr report_error
                       >
1468 :                 >skip0955
                        
                                set_stat $ff
                       >            load_flag $ff
1468 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
146a : 48              >            pha         ;use stack to load status
146b : 28              >            plp
                        
146c : a60d                     ldx zp1+1
146e : 08                       php         ;test stores do not alter flags
146f : 8a                       txa
1470 : 49c3                     eor #$c3
1472 : aa                       tax
1473 : 28                       plp
1474 : 8e0402                   stx abst+1
1477 : 08                       php         ;flags after load/store sequence
1478 : 49c3                     eor #$c3
147a : aa                       tax
147b : e082                     cpx #$82    ;test result
                                trap_ne
147d : f003            >        beq skip0959
                       >        trap            ;failed not equal (non zero)
147f : 20d144          >        jsr report_error
                       >
1482 :                 >skip0959
                        
1482 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1483 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1485 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1488 : f003            >        beq skip0962
                       >        trap            ;failed not equal (non zero)
148a : 20d144          >        jsr report_error
                       >
148d :                 >skip0962
                        
                                set_stat $ff
                       >            load_flag $ff
148d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
148f : 48              >            pha         ;use stack to load status
1490 : 28              >            plp
                        
1491 : a60e                     ldx zp1+2
1493 : 08                       php         ;test stores do not alter flags
1494 : 8a                       txa
1495 : 49c3                     eor #$c3
1497 : aa                       tax
1498 : 28                       plp
1499 : 8e0502                   stx abst+2
149c : 08                       php         ;flags after load/store sequence
149d : 49c3                     eor #$c3
149f : aa                       tax
14a0 : e041                     cpx #$41    ;test result
                                trap_ne     ;
14a2 : f003            >        beq skip0966
                       >        trap            ;failed not equal (non zero)
14a4 : 20d144          >        jsr report_error
                       >
14a7 :                 >skip0966
                        
14a7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
14a8 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
14aa : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
14ad : f003            >        beq skip0969
                       >        trap            ;failed not equal (non zero)
14af : 20d144          >        jsr report_error
                       >
14b2 :                 >skip0969
                        
                                set_stat $ff
                       >            load_flag $ff
14b2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14b4 : 48              >            pha         ;use stack to load status
14b5 : 28              >            plp
                        
14b6 : a60f                     ldx zp1+3
14b8 : 08                       php         ;test stores do not alter flags
14b9 : 8a                       txa
14ba : 49c3                     eor #$c3
14bc : aa                       tax
14bd : 28                       plp
14be : 8e0602                   stx abst+3
14c1 : 08                       php         ;flags after load/store sequence
14c2 : 49c3                     eor #$c3
14c4 : aa                       tax
14c5 : e000                     cpx #0      ;test result
                                trap_ne
14c7 : f003            >        beq skip0973
                       >        trap            ;failed not equal (non zero)
14c9 : 20d144          >        jsr report_error
                       >
14cc :                 >skip0973
                        
14cc : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
14cd : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
14cf : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
14d2 : f003            >        beq skip0976
                       >        trap            ;failed not equal (non zero)
14d4 : 20d144          >        jsr report_error
                       >
14d7 :                 >skip0976
                        
                        
                                set_stat 0
                       >            load_flag 0
14d7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
14d9 : 48              >            pha         ;use stack to load status
14da : 28              >            plp
                        
14db : ae1802                   ldx abs1  
14de : 08                       php         ;test stores do not alter flags
14df : 8a                       txa
14e0 : 49c3                     eor #$c3
14e2 : aa                       tax
14e3 : 28                       plp
14e4 : 8603                     stx zpt  
14e6 : 08                       php         ;flags after load/store sequence
14e7 : 49c3                     eor #$c3
14e9 : c50c                     cmp zp1     ;test result
                                trap_ne
14eb : f003            >        beq skip0980
                       >        trap            ;failed not equal (non zero)
14ed : 20d144          >        jsr report_error
                       >
14f0 :                 >skip0980
                        
14f0 : 68                       pla         ;load status
                                eor_flag 0
14f1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
14f3 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
14f6 : f003            >        beq skip0983
                       >        trap            ;failed not equal (non zero)
14f8 : 20d144          >        jsr report_error
                       >
14fb :                 >skip0983
                        
                                set_stat 0
                       >            load_flag 0
14fb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
14fd : 48              >            pha         ;use stack to load status
14fe : 28              >            plp
                        
14ff : ae1902                   ldx abs1+1
1502 : 08                       php         ;test stores do not alter flags
1503 : 8a                       txa
1504 : 49c3                     eor #$c3
1506 : aa                       tax
1507 : 28                       plp
1508 : 8604                     stx zpt+1
150a : 08                       php         ;flags after load/store sequence
150b : 49c3                     eor #$c3
150d : c50d                     cmp zp1+1   ;test result
                                trap_ne
150f : f003            >        beq skip0987
                       >        trap            ;failed not equal (non zero)
1511 : 20d144          >        jsr report_error
                       >
1514 :                 >skip0987
                        
1514 : 68                       pla         ;load status
                                eor_flag 0
1515 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1517 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
151a : f003            >        beq skip0990
                       >        trap            ;failed not equal (non zero)
151c : 20d144          >        jsr report_error
                       >
151f :                 >skip0990
                        
                                set_stat 0
                       >            load_flag 0
151f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1521 : 48              >            pha         ;use stack to load status
1522 : 28              >            plp
                        
1523 : ae1a02                   ldx abs1+2
1526 : 08                       php         ;test stores do not alter flags
1527 : 8a                       txa
1528 : 49c3                     eor #$c3
152a : aa                       tax
152b : 28                       plp
152c : 8605                     stx zpt+2
152e : 08                       php         ;flags after load/store sequence
152f : 49c3                     eor #$c3
1531 : c50e                     cmp zp1+2   ;test result
                                trap_ne
1533 : f003            >        beq skip0994
                       >        trap            ;failed not equal (non zero)
1535 : 20d144          >        jsr report_error
                       >
1538 :                 >skip0994
                        
1538 : 68                       pla         ;load status
                                eor_flag 0
1539 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
153b : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
153e : f003            >        beq skip0997
                       >        trap            ;failed not equal (non zero)
1540 : 20d144          >        jsr report_error
                       >
1543 :                 >skip0997
                        
                                set_stat 0
                       >            load_flag 0
1543 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1545 : 48              >            pha         ;use stack to load status
1546 : 28              >            plp
                        
1547 : ae1b02                   ldx abs1+3
154a : 08                       php         ;test stores do not alter flags
154b : 8a                       txa
154c : 49c3                     eor #$c3
154e : aa                       tax
154f : 28                       plp
1550 : 8606                     stx zpt+3
1552 : 08                       php         ;flags after load/store sequence
1553 : 49c3                     eor #$c3
1555 : c50f                     cmp zp1+3   ;test result
                                trap_ne
1557 : f003            >        beq skip1001
                       >        trap            ;failed not equal (non zero)
1559 : 20d144          >        jsr report_error
                       >
155c :                 >skip1001
                        
155c : 68                       pla         ;load status
                                eor_flag 0
155d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
155f : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1562 : f003            >        beq skip1004
                       >        trap            ;failed not equal (non zero)
1564 : 20d144          >        jsr report_error
                       >
1567 :                 >skip1004
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1567 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1569 : 48              >            pha         ;use stack to load status
156a : 28              >            plp
                        
156b : ae1802                   ldx abs1  
156e : 08                       php         ;test stores do not alter flags
156f : 8a                       txa
1570 : 49c3                     eor #$c3
1572 : aa                       tax
1573 : 28                       plp
1574 : 8603                     stx zpt  
1576 : 08                       php         ;flags after load/store sequence
1577 : 49c3                     eor #$c3
1579 : aa                       tax
157a : e40c                     cpx zp1     ;test result
                                trap_ne
157c : f003            >        beq skip1008
                       >        trap            ;failed not equal (non zero)
157e : 20d144          >        jsr report_error
                       >
1581 :                 >skip1008
                        
1581 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1582 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1584 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1587 : f003            >        beq skip1011
                       >        trap            ;failed not equal (non zero)
1589 : 20d144          >        jsr report_error
                       >
158c :                 >skip1011
                        
                                set_stat $ff
                       >            load_flag $ff
158c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
158e : 48              >            pha         ;use stack to load status
158f : 28              >            plp
                        
1590 : ae1902                   ldx abs1+1
1593 : 08                       php         ;test stores do not alter flags
1594 : 8a                       txa
1595 : 49c3                     eor #$c3
1597 : aa                       tax
1598 : 28                       plp
1599 : 8604                     stx zpt+1
159b : 08                       php         ;flags after load/store sequence
159c : 49c3                     eor #$c3
159e : aa                       tax
159f : e40d                     cpx zp1+1   ;test result
                                trap_ne
15a1 : f003            >        beq skip1015
                       >        trap            ;failed not equal (non zero)
15a3 : 20d144          >        jsr report_error
                       >
15a6 :                 >skip1015
                        
15a6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
15a7 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
15a9 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
15ac : f003            >        beq skip1018
                       >        trap            ;failed not equal (non zero)
15ae : 20d144          >        jsr report_error
                       >
15b1 :                 >skip1018
                        
                                set_stat $ff
                       >            load_flag $ff
15b1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
15b3 : 48              >            pha         ;use stack to load status
15b4 : 28              >            plp
                        
15b5 : ae1a02                   ldx abs1+2
15b8 : 08                       php         ;test stores do not alter flags
15b9 : 8a                       txa
15ba : 49c3                     eor #$c3
15bc : aa                       tax
15bd : 28                       plp
15be : 8605                     stx zpt+2
15c0 : 08                       php         ;flags after load/store sequence
15c1 : 49c3                     eor #$c3
15c3 : aa                       tax
15c4 : e40e                     cpx zp1+2   ;test result
                                trap_ne
15c6 : f003            >        beq skip1022
                       >        trap            ;failed not equal (non zero)
15c8 : 20d144          >        jsr report_error
                       >
15cb :                 >skip1022
                        
15cb : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
15cc : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
15ce : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
15d1 : f003            >        beq skip1025
                       >        trap            ;failed not equal (non zero)
15d3 : 20d144          >        jsr report_error
                       >
15d6 :                 >skip1025
                        
                                set_stat $ff
                       >            load_flag $ff
15d6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
15d8 : 48              >            pha         ;use stack to load status
15d9 : 28              >            plp
                        
15da : ae1b02                   ldx abs1+3
15dd : 08                       php         ;test stores do not alter flags
15de : 8a                       txa
15df : 49c3                     eor #$c3
15e1 : aa                       tax
15e2 : 28                       plp
15e3 : 8606                     stx zpt+3
15e5 : 08                       php         ;flags after load/store sequence
15e6 : 49c3                     eor #$c3
15e8 : aa                       tax
15e9 : e40f                     cpx zp1+3   ;test result
                                trap_ne
15eb : f003            >        beq skip1029
                       >        trap            ;failed not equal (non zero)
15ed : 20d144          >        jsr report_error
                       >
15f0 :                 >skip1029
                        
15f0 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
15f1 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
15f3 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
15f6 : f003            >        beq skip1032
                       >        trap            ;failed not equal (non zero)
15f8 : 20d144          >        jsr report_error
                       >
15fb :                 >skip1032
                        
                        
                                set_stat 0  
                       >            load_flag 0  
15fb : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
15fd : 48              >            pha         ;use stack to load status
15fe : 28              >            plp
                        
15ff : a2c3                     ldx #$c3
1601 : 08                       php
1602 : ec1802                   cpx abs1    ;test result
                                trap_ne
1605 : f003            >        beq skip1036
                       >        trap            ;failed not equal (non zero)
1607 : 20d144          >        jsr report_error
                       >
160a :                 >skip1036
                        
160a : 68                       pla         ;load status
                                eor_flag 0
160b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
160d : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1610 : f003            >        beq skip1039
                       >        trap            ;failed not equal (non zero)
1612 : 20d144          >        jsr report_error
                       >
1615 :                 >skip1039
                        
                                set_stat 0
                       >            load_flag 0
1615 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1617 : 48              >            pha         ;use stack to load status
1618 : 28              >            plp
                        
1619 : a282                     ldx #$82
161b : 08                       php
161c : ec1902                   cpx abs1+1  ;test result
                                trap_ne
161f : f003            >        beq skip1043
                       >        trap            ;failed not equal (non zero)
1621 : 20d144          >        jsr report_error
                       >
1624 :                 >skip1043
                        
1624 : 68                       pla         ;load status
                                eor_flag 0
1625 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1627 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
162a : f003            >        beq skip1046
                       >        trap            ;failed not equal (non zero)
162c : 20d144          >        jsr report_error
                       >
162f :                 >skip1046
                        
                                set_stat 0
                       >            load_flag 0
162f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1631 : 48              >            pha         ;use stack to load status
1632 : 28              >            plp
                        
1633 : a241                     ldx #$41
1635 : 08                       php
1636 : ec1a02                   cpx abs1+2  ;test result
                                trap_ne
1639 : f003            >        beq skip1050
                       >        trap            ;failed not equal (non zero)
163b : 20d144          >        jsr report_error
                       >
163e :                 >skip1050
                        
163e : 68                       pla         ;load status
                                eor_flag 0
163f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1641 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1644 : f003            >        beq skip1053
                       >        trap            ;failed not equal (non zero)
1646 : 20d144          >        jsr report_error
                       >
1649 :                 >skip1053
                        
                                set_stat 0
                       >            load_flag 0
1649 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
164b : 48              >            pha         ;use stack to load status
164c : 28              >            plp
                        
164d : a200                     ldx #0
164f : 08                       php
1650 : ec1b02                   cpx abs1+3  ;test result
                                trap_ne
1653 : f003            >        beq skip1057
                       >        trap            ;failed not equal (non zero)
1655 : 20d144          >        jsr report_error
                       >
1658 :                 >skip1057
                        
1658 : 68                       pla         ;load status
                                eor_flag 0
1659 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
165b : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
165e : f003            >        beq skip1060
                       >        trap            ;failed not equal (non zero)
1660 : 20d144          >        jsr report_error
                       >
1663 :                 >skip1060
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1663 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1665 : 48              >            pha         ;use stack to load status
1666 : 28              >            plp
                        
1667 : a2c3                     ldx #$c3  
1669 : 08                       php
166a : ec1802                   cpx abs1    ;test result
                                trap_ne
166d : f003            >        beq skip1064
                       >        trap            ;failed not equal (non zero)
166f : 20d144          >        jsr report_error
                       >
1672 :                 >skip1064
                        
1672 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1673 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1675 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1678 : f003            >        beq skip1067
                       >        trap            ;failed not equal (non zero)
167a : 20d144          >        jsr report_error
                       >
167d :                 >skip1067
                        
                                set_stat $ff
                       >            load_flag $ff
167d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
167f : 48              >            pha         ;use stack to load status
1680 : 28              >            plp
                        
1681 : a282                     ldx #$82
1683 : 08                       php
1684 : ec1902                   cpx abs1+1  ;test result
                                trap_ne
1687 : f003            >        beq skip1071
                       >        trap            ;failed not equal (non zero)
1689 : 20d144          >        jsr report_error
                       >
168c :                 >skip1071
                        
168c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
168d : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
168f : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1692 : f003            >        beq skip1074
                       >        trap            ;failed not equal (non zero)
1694 : 20d144          >        jsr report_error
                       >
1697 :                 >skip1074
                        
                                set_stat $ff
                       >            load_flag $ff
1697 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1699 : 48              >            pha         ;use stack to load status
169a : 28              >            plp
                        
169b : a241                     ldx #$41
169d : 08                       php
169e : ec1a02                   cpx abs1+2  ;test result
                                trap_ne
16a1 : f003            >        beq skip1078
                       >        trap            ;failed not equal (non zero)
16a3 : 20d144          >        jsr report_error
                       >
16a6 :                 >skip1078
                        
16a6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
16a7 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
16a9 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
16ac : f003            >        beq skip1081
                       >        trap            ;failed not equal (non zero)
16ae : 20d144          >        jsr report_error
                       >
16b1 :                 >skip1081
                        
                                set_stat $ff
                       >            load_flag $ff
16b1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
16b3 : 48              >            pha         ;use stack to load status
16b4 : 28              >            plp
                        
16b5 : a200                     ldx #0
16b7 : 08                       php
16b8 : ec1b02                   cpx abs1+3  ;test result
                                trap_ne
16bb : f003            >        beq skip1085
                       >        trap            ;failed not equal (non zero)
16bd : 20d144          >        jsr report_error
                       >
16c0 :                 >skip1085
                        
16c0 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
16c1 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
16c3 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
16c6 : f003            >        beq skip1088
                       >        trap            ;failed not equal (non zero)
16c8 : 20d144          >        jsr report_error
                       >
16cb :                 >skip1088
                        
                        
16cb : a200                     ldx #0
16cd : a503                     lda zpt  
16cf : 49c3                     eor #$c3
16d1 : c50c                     cmp zp1  
                                trap_ne     ;store to zp data
16d3 : f003            >        beq skip1090
                       >        trap            ;failed not equal (non zero)
16d5 : 20d144          >        jsr report_error
                       >
16d8 :                 >skip1090
                        
16d8 : 8603                     stx zpt     ;clear                
16da : ad0302                   lda abst  
16dd : 49c3                     eor #$c3
16df : cd1802                   cmp abs1  
                                trap_ne     ;store to abs data
16e2 : f003            >        beq skip1092
                       >        trap            ;failed not equal (non zero)
16e4 : 20d144          >        jsr report_error
                       >
16e7 :                 >skip1092
                        
16e7 : 8e0302                   stx abst    ;clear                
16ea : a504                     lda zpt+1
16ec : 49c3                     eor #$c3
16ee : c50d                     cmp zp1+1
                                trap_ne     ;store to zp data
16f0 : f003            >        beq skip1094
                       >        trap            ;failed not equal (non zero)
16f2 : 20d144          >        jsr report_error
                       >
16f5 :                 >skip1094
                        
16f5 : 8604                     stx zpt+1   ;clear                
16f7 : ad0402                   lda abst+1
16fa : 49c3                     eor #$c3
16fc : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs data
16ff : f003            >        beq skip1096
                       >        trap            ;failed not equal (non zero)
1701 : 20d144          >        jsr report_error
                       >
1704 :                 >skip1096
                        
1704 : 8e0402                   stx abst+1  ;clear                
1707 : a505                     lda zpt+2
1709 : 49c3                     eor #$c3
170b : c50e                     cmp zp1+2
                                trap_ne     ;store to zp data
170d : f003            >        beq skip1098
                       >        trap            ;failed not equal (non zero)
170f : 20d144          >        jsr report_error
                       >
1712 :                 >skip1098
                        
1712 : 8605                     stx zpt+2   ;clear                
1714 : ad0502                   lda abst+2
1717 : 49c3                     eor #$c3
1719 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs data
171c : f003            >        beq skip1100
                       >        trap            ;failed not equal (non zero)
171e : 20d144          >        jsr report_error
                       >
1721 :                 >skip1100
                        
1721 : 8e0502                   stx abst+2  ;clear                
1724 : a506                     lda zpt+3
1726 : 49c3                     eor #$c3
1728 : c50f                     cmp zp1+3
                                trap_ne     ;store to zp data
172a : f003            >        beq skip1102
                       >        trap            ;failed not equal (non zero)
172c : 20d144          >        jsr report_error
                       >
172f :                 >skip1102
                        
172f : 8606                     stx zpt+3   ;clear                
1731 : ad0602                   lda abst+3
1734 : 49c3                     eor #$c3
1736 : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs data
1739 : f003            >        beq skip1104
                       >        trap            ;failed not equal (non zero)
173b : 20d144          >        jsr report_error
                       >
173e :                 >skip1104
                        
173e : 8e0602                   stx abst+3  ;clear                
                                next_test
1741 : ad0002          >            lda test_case   ;previous test
1744 : c913            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1746 : f003            >        beq skip1107
                       >        trap            ;failed not equal (non zero)
1748 : 20d144          >        jsr report_error
                       >
174b :                 >skip1107
                       >
0014 =                 >test_num = test_num + 1
174b : a914            >            lda #test_num   ;*** next tests' number
174d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDY / STY - zp / abs / #
                                set_stat 0
                       >            load_flag 0
1750 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1752 : 48              >            pha         ;use stack to load status
1753 : 28              >            plp
                        
1754 : a40c                     ldy zp1  
1756 : 08                       php         ;test stores do not alter flags
1757 : 98                       tya
1758 : 49c3                     eor #$c3
175a : a8                       tay
175b : 28                       plp
175c : 8c0302                   sty abst  
175f : 08                       php         ;flags after load/store sequence
1760 : 49c3                     eor #$c3
1762 : a8                       tay
1763 : c0c3                     cpy #$c3    ;test result
                                trap_ne
1765 : f003            >        beq skip1111
                       >        trap            ;failed not equal (non zero)
1767 : 20d144          >        jsr report_error
                       >
176a :                 >skip1111
                        
176a : 68                       pla         ;load status
                                eor_flag 0
176b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
176d : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1770 : f003            >        beq skip1114
                       >        trap            ;failed not equal (non zero)
1772 : 20d144          >        jsr report_error
                       >
1775 :                 >skip1114
                        
                                set_stat 0
                       >            load_flag 0
1775 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1777 : 48              >            pha         ;use stack to load status
1778 : 28              >            plp
                        
1779 : a40d                     ldy zp1+1
177b : 08                       php         ;test stores do not alter flags
177c : 98                       tya
177d : 49c3                     eor #$c3
177f : a8                       tay
1780 : 28                       plp
1781 : 8c0402                   sty abst+1
1784 : 08                       php         ;flags after load/store sequence
1785 : 49c3                     eor #$c3
1787 : a8                       tay
1788 : c082                     cpy #$82    ;test result
                                trap_ne
178a : f003            >        beq skip1118
                       >        trap            ;failed not equal (non zero)
178c : 20d144          >        jsr report_error
                       >
178f :                 >skip1118
                        
178f : 68                       pla         ;load status
                                eor_flag 0
1790 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1792 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1795 : f003            >        beq skip1121
                       >        trap            ;failed not equal (non zero)
1797 : 20d144          >        jsr report_error
                       >
179a :                 >skip1121
                        
                                set_stat 0
                       >            load_flag 0
179a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
179c : 48              >            pha         ;use stack to load status
179d : 28              >            plp
                        
179e : a40e                     ldy zp1+2
17a0 : 08                       php         ;test stores do not alter flags
17a1 : 98                       tya
17a2 : 49c3                     eor #$c3
17a4 : a8                       tay
17a5 : 28                       plp
17a6 : 8c0502                   sty abst+2
17a9 : 08                       php         ;flags after load/store sequence
17aa : 49c3                     eor #$c3
17ac : a8                       tay
17ad : c041                     cpy #$41    ;test result
                                trap_ne
17af : f003            >        beq skip1125
                       >        trap            ;failed not equal (non zero)
17b1 : 20d144          >        jsr report_error
                       >
17b4 :                 >skip1125
                        
17b4 : 68                       pla         ;load status
                                eor_flag 0
17b5 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
17b7 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
17ba : f003            >        beq skip1128
                       >        trap            ;failed not equal (non zero)
17bc : 20d144          >        jsr report_error
                       >
17bf :                 >skip1128
                        
                                set_stat 0
                       >            load_flag 0
17bf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
17c1 : 48              >            pha         ;use stack to load status
17c2 : 28              >            plp
                        
17c3 : a40f                     ldy zp1+3
17c5 : 08                       php         ;test stores do not alter flags
17c6 : 98                       tya
17c7 : 49c3                     eor #$c3
17c9 : a8                       tay
17ca : 28                       plp
17cb : 8c0602                   sty abst+3
17ce : 08                       php         ;flags after load/store sequence
17cf : 49c3                     eor #$c3
17d1 : a8                       tay
17d2 : c000                     cpy #0      ;test result
                                trap_ne
17d4 : f003            >        beq skip1132
                       >        trap            ;failed not equal (non zero)
17d6 : 20d144          >        jsr report_error
                       >
17d9 :                 >skip1132
                        
17d9 : 68                       pla         ;load status
                                eor_flag 0
17da : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
17dc : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
17df : f003            >        beq skip1135
                       >        trap            ;failed not equal (non zero)
17e1 : 20d144          >        jsr report_error
                       >
17e4 :                 >skip1135
                        
                        
                                set_stat $ff
                       >            load_flag $ff
17e4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
17e6 : 48              >            pha         ;use stack to load status
17e7 : 28              >            plp
                        
17e8 : a40c                     ldy zp1  
17ea : 08                       php         ;test stores do not alter flags
17eb : 98                       tya
17ec : 49c3                     eor #$c3
17ee : a8                       tay
17ef : 28                       plp
17f0 : 8c0302                   sty abst  
17f3 : 08                       php         ;flags after load/store sequence
17f4 : 49c3                     eor #$c3
17f6 : a8                       tay
17f7 : c0c3                     cpy #$c3    ;test result
                                trap_ne
17f9 : f003            >        beq skip1139
                       >        trap            ;failed not equal (non zero)
17fb : 20d144          >        jsr report_error
                       >
17fe :                 >skip1139
                        
17fe : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
17ff : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1801 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1804 : f003            >        beq skip1142
                       >        trap            ;failed not equal (non zero)
1806 : 20d144          >        jsr report_error
                       >
1809 :                 >skip1142
                        
                                set_stat $ff
                       >            load_flag $ff
1809 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
180b : 48              >            pha         ;use stack to load status
180c : 28              >            plp
                        
180d : a40d                     ldy zp1+1
180f : 08                       php         ;test stores do not alter flags
1810 : 98                       tya
1811 : 49c3                     eor #$c3
1813 : a8                       tay
1814 : 28                       plp
1815 : 8c0402                   sty abst+1
1818 : 08                       php         ;flags after load/store sequence
1819 : 49c3                     eor #$c3
181b : a8                       tay
181c : c082                     cpy #$82   ;test result
                                trap_ne
181e : f003            >        beq skip1146
                       >        trap            ;failed not equal (non zero)
1820 : 20d144          >        jsr report_error
                       >
1823 :                 >skip1146
                        
1823 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1824 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1826 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1829 : f003            >        beq skip1149
                       >        trap            ;failed not equal (non zero)
182b : 20d144          >        jsr report_error
                       >
182e :                 >skip1149
                        
                                set_stat $ff
                       >            load_flag $ff
182e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1830 : 48              >            pha         ;use stack to load status
1831 : 28              >            plp
                        
1832 : a40e                     ldy zp1+2
1834 : 08                       php         ;test stores do not alter flags
1835 : 98                       tya
1836 : 49c3                     eor #$c3
1838 : a8                       tay
1839 : 28                       plp
183a : 8c0502                   sty abst+2
183d : 08                       php         ;flags after load/store sequence
183e : 49c3                     eor #$c3
1840 : a8                       tay
1841 : c041                     cpy #$41    ;test result
                                trap_ne
1843 : f003            >        beq skip1153
                       >        trap            ;failed not equal (non zero)
1845 : 20d144          >        jsr report_error
                       >
1848 :                 >skip1153
                        
1848 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1849 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
184b : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
184e : f003            >        beq skip1156
                       >        trap            ;failed not equal (non zero)
1850 : 20d144          >        jsr report_error
                       >
1853 :                 >skip1156
                        
                                set_stat $ff
                       >            load_flag $ff
1853 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1855 : 48              >            pha         ;use stack to load status
1856 : 28              >            plp
                        
1857 : a40f                     ldy zp1+3
1859 : 08                       php         ;test stores do not alter flags
185a : 98                       tya
185b : 49c3                     eor #$c3
185d : a8                       tay
185e : 28                       plp
185f : 8c0602                   sty abst+3
1862 : 08                       php         ;flags after load/store sequence
1863 : 49c3                     eor #$c3
1865 : a8                       tay
1866 : c000                     cpy #0      ;test result
                                trap_ne
1868 : f003            >        beq skip1160
                       >        trap            ;failed not equal (non zero)
186a : 20d144          >        jsr report_error
                       >
186d :                 >skip1160
                        
186d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
186e : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1870 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1873 : f003            >        beq skip1163
                       >        trap            ;failed not equal (non zero)
1875 : 20d144          >        jsr report_error
                       >
1878 :                 >skip1163
                        
                                
                                set_stat 0
                       >            load_flag 0
1878 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
187a : 48              >            pha         ;use stack to load status
187b : 28              >            plp
                        
187c : ac1802                   ldy abs1  
187f : 08                       php         ;test stores do not alter flags
1880 : 98                       tya
1881 : 49c3                     eor #$c3
1883 : a8                       tay
1884 : 28                       plp
1885 : 8403                     sty zpt  
1887 : 08                       php         ;flags after load/store sequence
1888 : 49c3                     eor #$c3
188a : a8                       tay
188b : c40c                     cpy zp1     ;test result
                                trap_ne
188d : f003            >        beq skip1167
                       >        trap            ;failed not equal (non zero)
188f : 20d144          >        jsr report_error
                       >
1892 :                 >skip1167
                        
1892 : 68                       pla         ;load status
                                eor_flag 0
1893 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1895 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1898 : f003            >        beq skip1170
                       >        trap            ;failed not equal (non zero)
189a : 20d144          >        jsr report_error
                       >
189d :                 >skip1170
                        
                                set_stat 0
                       >            load_flag 0
189d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
189f : 48              >            pha         ;use stack to load status
18a0 : 28              >            plp
                        
18a1 : ac1902                   ldy abs1+1
18a4 : 08                       php         ;test stores do not alter flags
18a5 : 98                       tya
18a6 : 49c3                     eor #$c3
18a8 : a8                       tay
18a9 : 28                       plp
18aa : 8404                     sty zpt+1
18ac : 08                       php         ;flags after load/store sequence
18ad : 49c3                     eor #$c3
18af : a8                       tay
18b0 : c40d                     cpy zp1+1   ;test result
                                trap_ne
18b2 : f003            >        beq skip1174
                       >        trap            ;failed not equal (non zero)
18b4 : 20d144          >        jsr report_error
                       >
18b7 :                 >skip1174
                        
18b7 : 68                       pla         ;load status
                                eor_flag 0
18b8 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
18ba : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
18bd : f003            >        beq skip1177
                       >        trap            ;failed not equal (non zero)
18bf : 20d144          >        jsr report_error
                       >
18c2 :                 >skip1177
                        
                                set_stat 0
                       >            load_flag 0
18c2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
18c4 : 48              >            pha         ;use stack to load status
18c5 : 28              >            plp
                        
18c6 : ac1a02                   ldy abs1+2
18c9 : 08                       php         ;test stores do not alter flags
18ca : 98                       tya
18cb : 49c3                     eor #$c3
18cd : a8                       tay
18ce : 28                       plp
18cf : 8405                     sty zpt+2
18d1 : 08                       php         ;flags after load/store sequence
18d2 : 49c3                     eor #$c3
18d4 : a8                       tay
18d5 : c40e                     cpy zp1+2   ;test result
                                trap_ne
18d7 : f003            >        beq skip1181
                       >        trap            ;failed not equal (non zero)
18d9 : 20d144          >        jsr report_error
                       >
18dc :                 >skip1181
                        
18dc : 68                       pla         ;load status
                                eor_flag 0
18dd : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
18df : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
18e2 : f003            >        beq skip1184
                       >        trap            ;failed not equal (non zero)
18e4 : 20d144          >        jsr report_error
                       >
18e7 :                 >skip1184
                        
                                set_stat 0
                       >            load_flag 0
18e7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
18e9 : 48              >            pha         ;use stack to load status
18ea : 28              >            plp
                        
18eb : ac1b02                   ldy abs1+3
18ee : 08                       php         ;test stores do not alter flags
18ef : 98                       tya
18f0 : 49c3                     eor #$c3
18f2 : a8                       tay
18f3 : 28                       plp
18f4 : 8406                     sty zpt+3
18f6 : 08                       php         ;flags after load/store sequence
18f7 : 49c3                     eor #$c3
18f9 : a8                       tay
18fa : c40f                     cpy zp1+3   ;test result
                                trap_ne
18fc : f003            >        beq skip1188
                       >        trap            ;failed not equal (non zero)
18fe : 20d144          >        jsr report_error
                       >
1901 :                 >skip1188
                        
1901 : 68                       pla         ;load status
                                eor_flag 0
1902 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1904 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1907 : f003            >        beq skip1191
                       >        trap            ;failed not equal (non zero)
1909 : 20d144          >        jsr report_error
                       >
190c :                 >skip1191
                        
                        
                                set_stat $ff
                       >            load_flag $ff
190c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
190e : 48              >            pha         ;use stack to load status
190f : 28              >            plp
                        
1910 : ac1802                   ldy abs1  
1913 : 08                       php         ;test stores do not alter flags
1914 : 98                       tya
1915 : 49c3                     eor #$c3
1917 : a8                       tay
1918 : 28                       plp
1919 : 8403                     sty zpt  
191b : 08                       php         ;flags after load/store sequence
191c : 49c3                     eor #$c3
191e : a8                       tay
191f : c50c                     cmp zp1     ;test result
                                trap_ne
1921 : f003            >        beq skip1195
                       >        trap            ;failed not equal (non zero)
1923 : 20d144          >        jsr report_error
                       >
1926 :                 >skip1195
                        
1926 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1927 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1929 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
192c : f003            >        beq skip1198
                       >        trap            ;failed not equal (non zero)
192e : 20d144          >        jsr report_error
                       >
1931 :                 >skip1198
                        
                                set_stat $ff
                       >            load_flag $ff
1931 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1933 : 48              >            pha         ;use stack to load status
1934 : 28              >            plp
                        
1935 : ac1902                   ldy abs1+1
1938 : 08                       php         ;test stores do not alter flags
1939 : 98                       tya
193a : 49c3                     eor #$c3
193c : a8                       tay
193d : 28                       plp
193e : 8404                     sty zpt+1
1940 : 08                       php         ;flags after load/store sequence
1941 : 49c3                     eor #$c3
1943 : a8                       tay
1944 : c50d                     cmp zp1+1   ;test result
                                trap_ne
1946 : f003            >        beq skip1202
                       >        trap            ;failed not equal (non zero)
1948 : 20d144          >        jsr report_error
                       >
194b :                 >skip1202
                        
194b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
194c : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
194e : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1951 : f003            >        beq skip1205
                       >        trap            ;failed not equal (non zero)
1953 : 20d144          >        jsr report_error
                       >
1956 :                 >skip1205
                        
                                set_stat $ff
                       >            load_flag $ff
1956 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1958 : 48              >            pha         ;use stack to load status
1959 : 28              >            plp
                        
195a : ac1a02                   ldy abs1+2
195d : 08                       php         ;test stores do not alter flags
195e : 98                       tya
195f : 49c3                     eor #$c3
1961 : a8                       tay
1962 : 28                       plp
1963 : 8405                     sty zpt+2
1965 : 08                       php         ;flags after load/store sequence
1966 : 49c3                     eor #$c3
1968 : a8                       tay
1969 : c50e                     cmp zp1+2   ;test result
                                trap_ne
196b : f003            >        beq skip1209
                       >        trap            ;failed not equal (non zero)
196d : 20d144          >        jsr report_error
                       >
1970 :                 >skip1209
                        
1970 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1971 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1973 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1976 : f003            >        beq skip1212
                       >        trap            ;failed not equal (non zero)
1978 : 20d144          >        jsr report_error
                       >
197b :                 >skip1212
                        
                                set_stat $ff
                       >            load_flag $ff
197b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
197d : 48              >            pha         ;use stack to load status
197e : 28              >            plp
                        
197f : ac1b02                   ldy abs1+3
1982 : 08                       php         ;test stores do not alter flags
1983 : 98                       tya
1984 : 49c3                     eor #$c3
1986 : a8                       tay
1987 : 28                       plp
1988 : 8406                     sty zpt+3
198a : 08                       php         ;flags after load/store sequence
198b : 49c3                     eor #$c3
198d : a8                       tay
198e : c50f                     cmp zp1+3   ;test result
                                trap_ne
1990 : f003            >        beq skip1216
                       >        trap            ;failed not equal (non zero)
1992 : 20d144          >        jsr report_error
                       >
1995 :                 >skip1216
                        
1995 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1996 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1998 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
199b : f003            >        beq skip1219
                       >        trap            ;failed not equal (non zero)
199d : 20d144          >        jsr report_error
                       >
19a0 :                 >skip1219
                        
                        
                        
                                set_stat 0
                       >            load_flag 0
19a0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
19a2 : 48              >            pha         ;use stack to load status
19a3 : 28              >            plp
                        
19a4 : a0c3                     ldy #$c3  
19a6 : 08                       php
19a7 : cc1802                   cpy abs1    ;test result
                                trap_ne
19aa : f003            >        beq skip1223
                       >        trap            ;failed not equal (non zero)
19ac : 20d144          >        jsr report_error
                       >
19af :                 >skip1223
                        
19af : 68                       pla         ;load status
                                eor_flag 0
19b0 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
19b2 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
19b5 : f003            >        beq skip1226
                       >        trap            ;failed not equal (non zero)
19b7 : 20d144          >        jsr report_error
                       >
19ba :                 >skip1226
                        
                                set_stat 0
                       >            load_flag 0
19ba : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
19bc : 48              >            pha         ;use stack to load status
19bd : 28              >            plp
                        
19be : a082                     ldy #$82
19c0 : 08                       php
19c1 : cc1902                   cpy abs1+1  ;test result
                                trap_ne
19c4 : f003            >        beq skip1230
                       >        trap            ;failed not equal (non zero)
19c6 : 20d144          >        jsr report_error
                       >
19c9 :                 >skip1230
                        
19c9 : 68                       pla         ;load status
                                eor_flag 0
19ca : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
19cc : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
19cf : f003            >        beq skip1233
                       >        trap            ;failed not equal (non zero)
19d1 : 20d144          >        jsr report_error
                       >
19d4 :                 >skip1233
                        
                                set_stat 0
                       >            load_flag 0
19d4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
19d6 : 48              >            pha         ;use stack to load status
19d7 : 28              >            plp
                        
19d8 : a041                     ldy #$41
19da : 08                       php
19db : cc1a02                   cpy abs1+2  ;test result
                                trap_ne
19de : f003            >        beq skip1237
                       >        trap            ;failed not equal (non zero)
19e0 : 20d144          >        jsr report_error
                       >
19e3 :                 >skip1237
                        
19e3 : 68                       pla         ;load status
                                eor_flag 0
19e4 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
19e6 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
19e9 : f003            >        beq skip1240
                       >        trap            ;failed not equal (non zero)
19eb : 20d144          >        jsr report_error
                       >
19ee :                 >skip1240
                        
                                set_stat 0
                       >            load_flag 0
19ee : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
19f0 : 48              >            pha         ;use stack to load status
19f1 : 28              >            plp
                        
19f2 : a000                     ldy #0
19f4 : 08                       php
19f5 : cc1b02                   cpy abs1+3  ;test result
                                trap_ne
19f8 : f003            >        beq skip1244
                       >        trap            ;failed not equal (non zero)
19fa : 20d144          >        jsr report_error
                       >
19fd :                 >skip1244
                        
19fd : 68                       pla         ;load status
                                eor_flag 0
19fe : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1a00 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1a03 : f003            >        beq skip1247
                       >        trap            ;failed not equal (non zero)
1a05 : 20d144          >        jsr report_error
                       >
1a08 :                 >skip1247
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1a08 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a0a : 48              >            pha         ;use stack to load status
1a0b : 28              >            plp
                        
1a0c : a0c3                     ldy #$c3  
1a0e : 08                       php
1a0f : cc1802                   cpy abs1    ;test result
                                trap_ne
1a12 : f003            >        beq skip1251
                       >        trap            ;failed not equal (non zero)
1a14 : 20d144          >        jsr report_error
                       >
1a17 :                 >skip1251
                        
1a17 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1a18 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1a1a : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1a1d : f003            >        beq skip1254
                       >        trap            ;failed not equal (non zero)
1a1f : 20d144          >        jsr report_error
                       >
1a22 :                 >skip1254
                        
                                set_stat $ff
                       >            load_flag $ff
1a22 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a24 : 48              >            pha         ;use stack to load status
1a25 : 28              >            plp
                        
1a26 : a082                     ldy #$82
1a28 : 08                       php
1a29 : cc1902                   cpy abs1+1  ;test result
                                trap_ne
1a2c : f003            >        beq skip1258
                       >        trap            ;failed not equal (non zero)
1a2e : 20d144          >        jsr report_error
                       >
1a31 :                 >skip1258
                        
1a31 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1a32 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1a34 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1a37 : f003            >        beq skip1261
                       >        trap            ;failed not equal (non zero)
1a39 : 20d144          >        jsr report_error
                       >
1a3c :                 >skip1261
                        
                                set_stat $ff
                       >            load_flag $ff
1a3c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a3e : 48              >            pha         ;use stack to load status
1a3f : 28              >            plp
                        
1a40 : a041                     ldy #$41
1a42 : 08                       php
1a43 : cc1a02                   cpy abs1+2   ;test result
                                trap_ne
1a46 : f003            >        beq skip1265
                       >        trap            ;failed not equal (non zero)
1a48 : 20d144          >        jsr report_error
                       >
1a4b :                 >skip1265
                        
1a4b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1a4c : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1a4e : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1a51 : f003            >        beq skip1268
                       >        trap            ;failed not equal (non zero)
1a53 : 20d144          >        jsr report_error
                       >
1a56 :                 >skip1268
                        
                                set_stat $ff
                       >            load_flag $ff
1a56 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a58 : 48              >            pha         ;use stack to load status
1a59 : 28              >            plp
                        
1a5a : a000                     ldy #0
1a5c : 08                       php
1a5d : cc1b02                   cpy abs1+3  ;test result
                                trap_ne
1a60 : f003            >        beq skip1272
                       >        trap            ;failed not equal (non zero)
1a62 : 20d144          >        jsr report_error
                       >
1a65 :                 >skip1272
                        
1a65 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1a66 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1a68 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1a6b : f003            >        beq skip1275
                       >        trap            ;failed not equal (non zero)
1a6d : 20d144          >        jsr report_error
                       >
1a70 :                 >skip1275
                        
                                
1a70 : a000                     ldy #0
1a72 : a503                     lda zpt  
1a74 : 49c3                     eor #$c3
1a76 : c50c                     cmp zp1  
                                trap_ne     ;store to zp   data
1a78 : f003            >        beq skip1277
                       >        trap            ;failed not equal (non zero)
1a7a : 20d144          >        jsr report_error
                       >
1a7d :                 >skip1277
                        
1a7d : 8403                     sty zpt     ;clear                
1a7f : ad0302                   lda abst  
1a82 : 49c3                     eor #$c3
1a84 : cd1802                   cmp abs1  
                                trap_ne     ;store to abs   data
1a87 : f003            >        beq skip1279
                       >        trap            ;failed not equal (non zero)
1a89 : 20d144          >        jsr report_error
                       >
1a8c :                 >skip1279
                        
1a8c : 8c0302                   sty abst    ;clear                
1a8f : a504                     lda zpt+1
1a91 : 49c3                     eor #$c3
1a93 : c50d                     cmp zp1+1
                                trap_ne     ;store to zp+1 data
1a95 : f003            >        beq skip1281
                       >        trap            ;failed not equal (non zero)
1a97 : 20d144          >        jsr report_error
                       >
1a9a :                 >skip1281
                        
1a9a : 8404                     sty zpt+1   ;clear                
1a9c : ad0402                   lda abst+1
1a9f : 49c3                     eor #$c3
1aa1 : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs+1 data
1aa4 : f003            >        beq skip1283
                       >        trap            ;failed not equal (non zero)
1aa6 : 20d144          >        jsr report_error
                       >
1aa9 :                 >skip1283
                        
1aa9 : 8c0402                   sty abst+1  ;clear                
1aac : a505                     lda zpt+2
1aae : 49c3                     eor #$c3
1ab0 : c50e                     cmp zp1+2
                                trap_ne     ;store to zp+2 data
1ab2 : f003            >        beq skip1285
                       >        trap            ;failed not equal (non zero)
1ab4 : 20d144          >        jsr report_error
                       >
1ab7 :                 >skip1285
                        
1ab7 : 8405                     sty zpt+2   ;clear                
1ab9 : ad0502                   lda abst+2
1abc : 49c3                     eor #$c3
1abe : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs+2 data
1ac1 : f003            >        beq skip1287
                       >        trap            ;failed not equal (non zero)
1ac3 : 20d144          >        jsr report_error
                       >
1ac6 :                 >skip1287
                        
1ac6 : 8c0502                   sty abst+2  ;clear                
1ac9 : a506                     lda zpt+3
1acb : 49c3                     eor #$c3
1acd : c50f                     cmp zp1+3
                                trap_ne     ;store to zp+3 data
1acf : f003            >        beq skip1289
                       >        trap            ;failed not equal (non zero)
1ad1 : 20d144          >        jsr report_error
                       >
1ad4 :                 >skip1289
                        
1ad4 : 8406                     sty zpt+3   ;clear                
1ad6 : ad0602                   lda abst+3
1ad9 : 49c3                     eor #$c3
1adb : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs+3 data
1ade : f003            >        beq skip1291
                       >        trap            ;failed not equal (non zero)
1ae0 : 20d144          >        jsr report_error
                       >
1ae3 :                 >skip1291
                        
1ae3 : 8c0602                   sty abst+3  ;clear                
                                next_test
1ae6 : ad0002          >            lda test_case   ;previous test
1ae9 : c914            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1aeb : f003            >        beq skip1294
                       >        trap            ;failed not equal (non zero)
1aed : 20d144          >        jsr report_error
                       >
1af0 :                 >skip1294
                       >
0015 =                 >test_num = test_num + 1
1af0 : a915            >            lda #test_num   ;*** next tests' number
1af2 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing load / store accumulator LDA / STA all addressing modes
                        ; LDA / STA - zp,x / abs,x
1af5 : a203                     ldx #3
1af7 :                  tldax    
                                set_stat 0
                       >            load_flag 0
1af7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1af9 : 48              >            pha         ;use stack to load status
1afa : 28              >            plp
                        
1afb : b50c                     lda zp1,x
1afd : 08                       php         ;test stores do not alter flags
1afe : 49c3                     eor #$c3
1b00 : 28                       plp
1b01 : 9d0302                   sta abst,x
1b04 : 08                       php         ;flags after load/store sequence
1b05 : 49c3                     eor #$c3
1b07 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
1b0a : f003            >        beq skip1298
                       >        trap            ;failed not equal (non zero)
1b0c : 20d144          >        jsr report_error
                       >
1b0f :                 >skip1298
                        
1b0f : 68                       pla         ;load status
                                eor_flag 0
1b10 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1b12 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
1b15 : f003            >        beq skip1301
                       >        trap            ;failed not equal (non zero)
1b17 : 20d144          >        jsr report_error
                       >
1b1a :                 >skip1301
                        
1b1a : ca                       dex
1b1b : 10da                     bpl tldax                  
                        
1b1d : a203                     ldx #3
1b1f :                  tldax1   
                                set_stat $ff
                       >            load_flag $ff
1b1f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b21 : 48              >            pha         ;use stack to load status
1b22 : 28              >            plp
                        
1b23 : b50c                     lda zp1,x
1b25 : 08                       php         ;test stores do not alter flags
1b26 : 49c3                     eor #$c3
1b28 : 28                       plp
1b29 : 9d0302                   sta abst,x
1b2c : 08                       php         ;flags after load/store sequence
1b2d : 49c3                     eor #$c3
1b2f : dd1802                   cmp abs1,x   ;test result
                                trap_ne
1b32 : f003            >        beq skip1305
                       >        trap            ;failed not equal (non zero)
1b34 : 20d144          >        jsr report_error
                       >
1b37 :                 >skip1305
                        
1b37 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b38 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1b3a : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
1b3d : f003            >        beq skip1308
                       >        trap            ;failed not equal (non zero)
1b3f : 20d144          >        jsr report_error
                       >
1b42 :                 >skip1308
                        
1b42 : ca                       dex
1b43 : 10da                     bpl tldax1                  
                        
1b45 : a203                     ldx #3
1b47 :                  tldax2   
                                set_stat 0
                       >            load_flag 0
1b47 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b49 : 48              >            pha         ;use stack to load status
1b4a : 28              >            plp
                        
1b4b : bd1802                   lda abs1,x
1b4e : 08                       php         ;test stores do not alter flags
1b4f : 49c3                     eor #$c3
1b51 : 28                       plp
1b52 : 9503                     sta zpt,x
1b54 : 08                       php         ;flags after load/store sequence
1b55 : 49c3                     eor #$c3
1b57 : d50c                     cmp zp1,x   ;test result
                                trap_ne
1b59 : f003            >        beq skip1312
                       >        trap            ;failed not equal (non zero)
1b5b : 20d144          >        jsr report_error
                       >
1b5e :                 >skip1312
                        
1b5e : 68                       pla         ;load status
                                eor_flag 0
1b5f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1b61 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
1b64 : f003            >        beq skip1315
                       >        trap            ;failed not equal (non zero)
1b66 : 20d144          >        jsr report_error
                       >
1b69 :                 >skip1315
                        
1b69 : ca                       dex
1b6a : 10db                     bpl tldax2                  
                        
1b6c : a203                     ldx #3
1b6e :                  tldax3
                                set_stat $ff
                       >            load_flag $ff
1b6e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b70 : 48              >            pha         ;use stack to load status
1b71 : 28              >            plp
                        
1b72 : bd1802                   lda abs1,x
1b75 : 08                       php         ;test stores do not alter flags
1b76 : 49c3                     eor #$c3
1b78 : 28                       plp
1b79 : 9503                     sta zpt,x
1b7b : 08                       php         ;flags after load/store sequence
1b7c : 49c3                     eor #$c3
1b7e : d50c                     cmp zp1,x   ;test result
                                trap_ne
1b80 : f003            >        beq skip1319
                       >        trap            ;failed not equal (non zero)
1b82 : 20d144          >        jsr report_error
                       >
1b85 :                 >skip1319
                        
1b85 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b86 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1b88 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
1b8b : f003            >        beq skip1322
                       >        trap            ;failed not equal (non zero)
1b8d : 20d144          >        jsr report_error
                       >
1b90 :                 >skip1322
                        
1b90 : ca                       dex
1b91 : 10db                     bpl tldax3
                        
1b93 : a203                     ldx #3      ;testing store result
1b95 : a000                     ldy #0
1b97 : b503             tstax   lda zpt,x
1b99 : 49c3                     eor #$c3
1b9b : d50c                     cmp zp1,x
                                trap_ne     ;store to zp,x data
1b9d : f003            >        beq skip1324
                       >        trap            ;failed not equal (non zero)
1b9f : 20d144          >        jsr report_error
                       >
1ba2 :                 >skip1324
                        
1ba2 : 9403                     sty zpt,x   ;clear                
1ba4 : bd0302                   lda abst,x
1ba7 : 49c3                     eor #$c3
1ba9 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
1bac : f003            >        beq skip1326
                       >        trap            ;failed not equal (non zero)
1bae : 20d144          >        jsr report_error
                       >
1bb1 :                 >skip1326
                        
1bb1 : 8a                       txa
1bb2 : 9d0302                   sta abst,x  ;clear                
1bb5 : ca                       dex
1bb6 : 10df                     bpl tstax
                                next_test
1bb8 : ad0002          >            lda test_case   ;previous test
1bbb : c915            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1bbd : f003            >        beq skip1329
                       >        trap            ;failed not equal (non zero)
1bbf : 20d144          >        jsr report_error
                       >
1bc2 :                 >skip1329
                       >
0016 =                 >test_num = test_num + 1
1bc2 : a916            >            lda #test_num   ;*** next tests' number
1bc4 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - (zp),y / abs,y / (zp,x)
1bc7 : a003                     ldy #3
1bc9 :                  tlday    
                                set_stat 0
                       >            load_flag 0
1bc9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1bcb : 48              >            pha         ;use stack to load status
1bcc : 28              >            plp
                        
1bcd : b11d                     lda (ind1),y
1bcf : 08                       php         ;test stores do not alter flags
1bd0 : 49c3                     eor #$c3
1bd2 : 28                       plp
1bd3 : 990302                   sta abst,y
1bd6 : 08                       php         ;flags after load/store sequence
1bd7 : 49c3                     eor #$c3
1bd9 : d91802                   cmp abs1,y  ;test result
                                trap_ne
1bdc : f003            >        beq skip1333
                       >        trap            ;failed not equal (non zero)
1bde : 20d144          >        jsr report_error
                       >
1be1 :                 >skip1333
                        
1be1 : 68                       pla         ;load status
                                eor_flag 0
1be2 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1be4 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1be7 : f003            >        beq skip1336
                       >        trap            ;failed not equal (non zero)
1be9 : 20d144          >        jsr report_error
                       >
1bec :                 >skip1336
                        
1bec : 88                       dey
1bed : 10da                     bpl tlday                  
                        
1bef : a003                     ldy #3
1bf1 :                  tlday1   
                                set_stat $ff
                       >            load_flag $ff
1bf1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1bf3 : 48              >            pha         ;use stack to load status
1bf4 : 28              >            plp
                        
1bf5 : b11d                     lda (ind1),y
1bf7 : 08                       php         ;test stores do not alter flags
1bf8 : 49c3                     eor #$c3
1bfa : 28                       plp
1bfb : 990302                   sta abst,y
1bfe : 08                       php         ;flags after load/store sequence
1bff : 49c3                     eor #$c3
1c01 : d91802                   cmp abs1,y  ;test result
                                trap_ne
1c04 : f003            >        beq skip1340
                       >        trap            ;failed not equal (non zero)
1c06 : 20d144          >        jsr report_error
                       >
1c09 :                 >skip1340
                        
1c09 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c0a : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1c0c : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1c0f : f003            >        beq skip1343
                       >        trap            ;failed not equal (non zero)
1c11 : 20d144          >        jsr report_error
                       >
1c14 :                 >skip1343
                        
1c14 : 88                       dey
1c15 : 10da                     bpl tlday1                  
                        
1c17 : a003                     ldy #3      ;testing store result
1c19 : a200                     ldx #0
1c1b : b90302           tstay   lda abst,y
1c1e : 49c3                     eor #$c3
1c20 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
1c23 : f003            >        beq skip1345
                       >        trap            ;failed not equal (non zero)
1c25 : 20d144          >        jsr report_error
                       >
1c28 :                 >skip1345
                        
1c28 : 8a                       txa
1c29 : 990302                   sta abst,y  ;clear                
1c2c : 88                       dey
1c2d : 10ec                     bpl tstay
                        
1c2f : a003                     ldy #3
1c31 :                  tlday2   
                                set_stat 0
                       >            load_flag 0
1c31 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1c33 : 48              >            pha         ;use stack to load status
1c34 : 28              >            plp
                        
1c35 : b91802                   lda abs1,y
1c38 : 08                       php         ;test stores do not alter flags
1c39 : 49c3                     eor #$c3
1c3b : 28                       plp
1c3c : 9129                     sta (indt),y
1c3e : 08                       php         ;flags after load/store sequence
1c3f : 49c3                     eor #$c3
1c41 : d11d                     cmp (ind1),y    ;test result
                                trap_ne
1c43 : f003            >        beq skip1349
                       >        trap            ;failed not equal (non zero)
1c45 : 20d144          >        jsr report_error
                       >
1c48 :                 >skip1349
                        
1c48 : 68                       pla         ;load status
                                eor_flag 0
1c49 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1c4b : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1c4e : f003            >        beq skip1352
                       >        trap            ;failed not equal (non zero)
1c50 : 20d144          >        jsr report_error
                       >
1c53 :                 >skip1352
                        
1c53 : 88                       dey
1c54 : 10db                     bpl tlday2                  
                        
1c56 : a003                     ldy #3
1c58 :                  tlday3   
                                set_stat $ff
                       >            load_flag $ff
1c58 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c5a : 48              >            pha         ;use stack to load status
1c5b : 28              >            plp
                        
1c5c : b91802                   lda abs1,y
1c5f : 08                       php         ;test stores do not alter flags
1c60 : 49c3                     eor #$c3
1c62 : 28                       plp
1c63 : 9129                     sta (indt),y
1c65 : 08                       php         ;flags after load/store sequence
1c66 : 49c3                     eor #$c3
1c68 : d11d                     cmp (ind1),y   ;test result
                                trap_ne
1c6a : f003            >        beq skip1356
                       >        trap            ;failed not equal (non zero)
1c6c : 20d144          >        jsr report_error
                       >
1c6f :                 >skip1356
                        
1c6f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c70 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1c72 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1c75 : f003            >        beq skip1359
                       >        trap            ;failed not equal (non zero)
1c77 : 20d144          >        jsr report_error
                       >
1c7a :                 >skip1359
                        
1c7a : 88                       dey
1c7b : 10db                     bpl tlday3
                                
1c7d : a003                     ldy #3      ;testing store result
1c7f : a200                     ldx #0
1c81 : b90302           tstay1  lda abst,y
1c84 : 49c3                     eor #$c3
1c86 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
1c89 : f003            >        beq skip1361
                       >        trap            ;failed not equal (non zero)
1c8b : 20d144          >        jsr report_error
                       >
1c8e :                 >skip1361
                        
1c8e : 8a                       txa
1c8f : 990302                   sta abst,y  ;clear                
1c92 : 88                       dey
1c93 : 10ec                     bpl tstay1
                                
1c95 : a206                     ldx #6
1c97 : a003                     ldy #3
1c99 :                  tldax4   
                                set_stat 0
                       >            load_flag 0
1c99 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1c9b : 48              >            pha         ;use stack to load status
1c9c : 28              >            plp
                        
1c9d : a11d                     lda (ind1,x)
1c9f : 08                       php         ;test stores do not alter flags
1ca0 : 49c3                     eor #$c3
1ca2 : 28                       plp
1ca3 : 8129                     sta (indt,x)
1ca5 : 08                       php         ;flags after load/store sequence
1ca6 : 49c3                     eor #$c3
1ca8 : d91802                   cmp abs1,y  ;test result
                                trap_ne
1cab : f003            >        beq skip1365
                       >        trap            ;failed not equal (non zero)
1cad : 20d144          >        jsr report_error
                       >
1cb0 :                 >skip1365
                        
1cb0 : 68                       pla         ;load status
                                eor_flag 0
1cb1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1cb3 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1cb6 : f003            >        beq skip1368
                       >        trap            ;failed not equal (non zero)
1cb8 : 20d144          >        jsr report_error
                       >
1cbb :                 >skip1368
                        
1cbb : ca                       dex
1cbc : ca                       dex
1cbd : 88                       dey
1cbe : 10d9                     bpl tldax4                  
                        
1cc0 : a206                     ldx #6
1cc2 : a003                     ldy #3
1cc4 :                  tldax5
                                set_stat $ff
                       >            load_flag $ff
1cc4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1cc6 : 48              >            pha         ;use stack to load status
1cc7 : 28              >            plp
                        
1cc8 : a11d                     lda (ind1,x)
1cca : 08                       php         ;test stores do not alter flags
1ccb : 49c3                     eor #$c3
1ccd : 28                       plp
1cce : 8129                     sta (indt,x)
1cd0 : 08                       php         ;flags after load/store sequence
1cd1 : 49c3                     eor #$c3
1cd3 : d91802                   cmp abs1,y  ;test result
                                trap_ne
1cd6 : f003            >        beq skip1372
                       >        trap            ;failed not equal (non zero)
1cd8 : 20d144          >        jsr report_error
                       >
1cdb :                 >skip1372
                        
1cdb : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1cdc : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1cde : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1ce1 : f003            >        beq skip1375
                       >        trap            ;failed not equal (non zero)
1ce3 : 20d144          >        jsr report_error
                       >
1ce6 :                 >skip1375
                        
1ce6 : ca                       dex
1ce7 : ca                       dex
1ce8 : 88                       dey
1ce9 : 10d9                     bpl tldax5
                        
1ceb : a003                     ldy #3      ;testing store result
1ced : a200                     ldx #0
1cef : b90302           tstay2  lda abst,y
1cf2 : 49c3                     eor #$c3
1cf4 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
1cf7 : f003            >        beq skip1377
                       >        trap            ;failed not equal (non zero)
1cf9 : 20d144          >        jsr report_error
                       >
1cfc :                 >skip1377
                        
1cfc : 8a                       txa
1cfd : 990302                   sta abst,y  ;clear                
1d00 : 88                       dey
1d01 : 10ec                     bpl tstay2
                                next_test
1d03 : ad0002          >            lda test_case   ;previous test
1d06 : c916            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1d08 : f003            >        beq skip1380
                       >        trap            ;failed not equal (non zero)
1d0a : 20d144          >        jsr report_error
                       >
1d0d :                 >skip1380
                       >
0017 =                 >test_num = test_num + 1
1d0d : a917            >            lda #test_num   ;*** next tests' number
1d0f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
1d12 : a2fd                     ldx #3+$fa
1d14 : b512             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
1d16 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
1d19 : ca                       dex
1d1a : e0fa                     cpx #$fa
1d1c : b0f6                     bcs tldax6                  
1d1e : a2fd                     ldx #3+$fa
1d20 : bd1e01           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
1d23 : 9509                     sta zpt-$fa&$ff,x
1d25 : ca                       dex
1d26 : e0fa                     cpx #$fa
1d28 : b0f6                     bcs tldax7
                                                  
1d2a : a203                     ldx #3      ;testing wraparound result
1d2c : a000                     ldy #0
1d2e : b503             tstax1  lda zpt,x
1d30 : d50c                     cmp zp1,x
                                trap_ne     ;store to zp,x data
1d32 : f003            >        beq skip1382
                       >        trap            ;failed not equal (non zero)
1d34 : 20d144          >        jsr report_error
                       >
1d37 :                 >skip1382
                        
1d37 : 9403                     sty zpt,x   ;clear                
1d39 : bd0302                   lda abst,x
1d3c : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
1d3f : f003            >        beq skip1384
                       >        trap            ;failed not equal (non zero)
1d41 : 20d144          >        jsr report_error
                       >
1d44 :                 >skip1384
                        
1d44 : 8a                       txa
1d45 : 9d0302                   sta abst,x  ;clear                
1d48 : ca                       dex
1d49 : 10e3                     bpl tstax1
                        
1d4b : a0fb                     ldy #3+$f8
1d4d : a2fe                     ldx #6+$f8
1d4f : a125             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indirect
1d51 : 990b01                   sta abst-$f8,y
1d54 : ca                       dex
1d55 : ca                       dex
1d56 : 88                       dey
1d57 : c0f8                     cpy #$f8
1d59 : b0f4                     bcs tlday4
1d5b : a003                     ldy #3      ;testing wraparound result
1d5d : a200                     ldx #0
1d5f : b90302           tstay4  lda abst,y
1d62 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
1d65 : f003            >        beq skip1386
                       >        trap            ;failed not equal (non zero)
1d67 : 20d144          >        jsr report_error
                       >
1d6a :                 >skip1386
                        
1d6a : 8a                       txa
1d6b : 990302                   sta abst,y  ;clear                
1d6e : 88                       dey
1d6f : 10ee                     bpl tstay4
                                
1d71 : a0fb                     ldy #3+$f8
1d73 : b92001           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
1d76 : 9131                     sta (inwt),y
1d78 : 88                       dey
1d79 : c0f8                     cpy #$f8
1d7b : b0f6                     bcs tlday5                  
1d7d : a003                     ldy #3      ;testing wraparound result
1d7f : a200                     ldx #0
1d81 : b90302           tstay5  lda abst,y
1d84 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
1d87 : f003            >        beq skip1388
                       >        trap            ;failed not equal (non zero)
1d89 : 20d144          >        jsr report_error
                       >
1d8c :                 >skip1388
                        
1d8c : 8a                       txa
1d8d : 990302                   sta abst,y  ;clear                
1d90 : 88                       dey
1d91 : 10ee                     bpl tstay5
                        
1d93 : a0fb                     ldy #3+$f8
1d95 : a2fe                     ldx #6+$f8
1d97 : b127             tlday6  lda (inw1),y    ;no wrap on zp indirect indexed 
1d99 : 8131                     sta (indt-$f8&$ff,x)
1d9b : ca                       dex
1d9c : ca                       dex
1d9d : 88                       dey
1d9e : c0f8                     cpy #$f8
1da0 : b0f5                     bcs tlday6
1da2 : a003                     ldy #3      ;testing wraparound result
1da4 : a200                     ldx #0
1da6 : b90302           tstay6  lda abst,y
1da9 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
1dac : f003            >        beq skip1390
                       >        trap            ;failed not equal (non zero)
1dae : 20d144          >        jsr report_error
                       >
1db1 :                 >skip1390
                        
1db1 : 8a                       txa
1db2 : 990302                   sta abst,y  ;clear                
1db5 : 88                       dey
1db6 : 10ee                     bpl tstay6
                                next_test
1db8 : ad0002          >            lda test_case   ;previous test
1dbb : c917            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1dbd : f003            >        beq skip1393
                       >        trap            ;failed not equal (non zero)
1dbf : 20d144          >        jsr report_error
                       >
1dc2 :                 >skip1393
                       >
0018 =                 >test_num = test_num + 1
1dc2 : a918            >            lda #test_num   ;*** next tests' number
1dc4 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
1dc7 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
1dc9 : 48              >            pha         ;use stack to load status
1dca : 28              >            plp
                        
1dcb : a50c                     lda zp1
1dcd : 08                       php         ;test stores do not alter flags
1dce : 49c3                     eor #$c3
1dd0 : 28                       plp
1dd1 : 8d0302                   sta abst
1dd4 : 08                       php         ;flags after load/store sequence
1dd5 : 49c3                     eor #$c3
1dd7 : c9c3                     cmp #$c3    ;test result
                                trap_ne
1dd9 : f003            >        beq skip1397
                       >        trap            ;failed not equal (non zero)
1ddb : 20d144          >        jsr report_error
                       >
1dde :                 >skip1397
                        
1dde : 68                       pla         ;load status
                                eor_flag 0
1ddf : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1de1 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1de4 : f003            >        beq skip1400
                       >        trap            ;failed not equal (non zero)
1de6 : 20d144          >        jsr report_error
                       >
1de9 :                 >skip1400
                        
                                set_stat 0
                       >            load_flag 0
1de9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1deb : 48              >            pha         ;use stack to load status
1dec : 28              >            plp
                        
1ded : a50d                     lda zp1+1
1def : 08                       php         ;test stores do not alter flags
1df0 : 49c3                     eor #$c3
1df2 : 28                       plp
1df3 : 8d0402                   sta abst+1
1df6 : 08                       php         ;flags after load/store sequence
1df7 : 49c3                     eor #$c3
1df9 : c982                     cmp #$82    ;test result
                                trap_ne
1dfb : f003            >        beq skip1404
                       >        trap            ;failed not equal (non zero)
1dfd : 20d144          >        jsr report_error
                       >
1e00 :                 >skip1404
                        
1e00 : 68                       pla         ;load status
                                eor_flag 0
1e01 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1e03 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1e06 : f003            >        beq skip1407
                       >        trap            ;failed not equal (non zero)
1e08 : 20d144          >        jsr report_error
                       >
1e0b :                 >skip1407
                        
                                set_stat 0
                       >            load_flag 0
1e0b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1e0d : 48              >            pha         ;use stack to load status
1e0e : 28              >            plp
                        
1e0f : a50e                     lda zp1+2
1e11 : 08                       php         ;test stores do not alter flags
1e12 : 49c3                     eor #$c3
1e14 : 28                       plp
1e15 : 8d0502                   sta abst+2
1e18 : 08                       php         ;flags after load/store sequence
1e19 : 49c3                     eor #$c3
1e1b : c941                     cmp #$41    ;test result
                                trap_ne
1e1d : f003            >        beq skip1411
                       >        trap            ;failed not equal (non zero)
1e1f : 20d144          >        jsr report_error
                       >
1e22 :                 >skip1411
                        
1e22 : 68                       pla         ;load status
                                eor_flag 0
1e23 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1e25 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1e28 : f003            >        beq skip1414
                       >        trap            ;failed not equal (non zero)
1e2a : 20d144          >        jsr report_error
                       >
1e2d :                 >skip1414
                        
                                set_stat 0
                       >            load_flag 0
1e2d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1e2f : 48              >            pha         ;use stack to load status
1e30 : 28              >            plp
                        
1e31 : a50f                     lda zp1+3
1e33 : 08                       php         ;test stores do not alter flags
1e34 : 49c3                     eor #$c3
1e36 : 28                       plp
1e37 : 8d0602                   sta abst+3
1e3a : 08                       php         ;flags after load/store sequence
1e3b : 49c3                     eor #$c3
1e3d : c900                     cmp #0      ;test result
                                trap_ne
1e3f : f003            >        beq skip1418
                       >        trap            ;failed not equal (non zero)
1e41 : 20d144          >        jsr report_error
                       >
1e44 :                 >skip1418
                        
1e44 : 68                       pla         ;load status
                                eor_flag 0
1e45 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1e47 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1e4a : f003            >        beq skip1421
                       >        trap            ;failed not equal (non zero)
1e4c : 20d144          >        jsr report_error
                       >
1e4f :                 >skip1421
                        
                                set_stat $ff
                       >            load_flag $ff
1e4f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e51 : 48              >            pha         ;use stack to load status
1e52 : 28              >            plp
                        
1e53 : a50c                     lda zp1  
1e55 : 08                       php         ;test stores do not alter flags
1e56 : 49c3                     eor #$c3
1e58 : 28                       plp
1e59 : 8d0302                   sta abst  
1e5c : 08                       php         ;flags after load/store sequence
1e5d : 49c3                     eor #$c3
1e5f : c9c3                     cmp #$c3    ;test result
                                trap_ne
1e61 : f003            >        beq skip1425
                       >        trap            ;failed not equal (non zero)
1e63 : 20d144          >        jsr report_error
                       >
1e66 :                 >skip1425
                        
1e66 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1e67 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1e69 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1e6c : f003            >        beq skip1428
                       >        trap            ;failed not equal (non zero)
1e6e : 20d144          >        jsr report_error
                       >
1e71 :                 >skip1428
                        
                                set_stat $ff
                       >            load_flag $ff
1e71 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e73 : 48              >            pha         ;use stack to load status
1e74 : 28              >            plp
                        
1e75 : a50d                     lda zp1+1
1e77 : 08                       php         ;test stores do not alter flags
1e78 : 49c3                     eor #$c3
1e7a : 28                       plp
1e7b : 8d0402                   sta abst+1
1e7e : 08                       php         ;flags after load/store sequence
1e7f : 49c3                     eor #$c3
1e81 : c982                     cmp #$82    ;test result
                                trap_ne
1e83 : f003            >        beq skip1432
                       >        trap            ;failed not equal (non zero)
1e85 : 20d144          >        jsr report_error
                       >
1e88 :                 >skip1432
                        
1e88 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1e89 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1e8b : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1e8e : f003            >        beq skip1435
                       >        trap            ;failed not equal (non zero)
1e90 : 20d144          >        jsr report_error
                       >
1e93 :                 >skip1435
                        
                                set_stat $ff
                       >            load_flag $ff
1e93 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e95 : 48              >            pha         ;use stack to load status
1e96 : 28              >            plp
                        
1e97 : a50e                     lda zp1+2
1e99 : 08                       php         ;test stores do not alter flags
1e9a : 49c3                     eor #$c3
1e9c : 28                       plp
1e9d : 8d0502                   sta abst+2
1ea0 : 08                       php         ;flags after load/store sequence
1ea1 : 49c3                     eor #$c3
1ea3 : c941                     cmp #$41    ;test result
                                trap_ne
1ea5 : f003            >        beq skip1439
                       >        trap            ;failed not equal (non zero)
1ea7 : 20d144          >        jsr report_error
                       >
1eaa :                 >skip1439
                        
1eaa : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1eab : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1ead : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1eb0 : f003            >        beq skip1442
                       >        trap            ;failed not equal (non zero)
1eb2 : 20d144          >        jsr report_error
                       >
1eb5 :                 >skip1442
                        
                                set_stat $ff
                       >            load_flag $ff
1eb5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1eb7 : 48              >            pha         ;use stack to load status
1eb8 : 28              >            plp
                        
1eb9 : a50f                     lda zp1+3
1ebb : 08                       php         ;test stores do not alter flags
1ebc : 49c3                     eor #$c3
1ebe : 28                       plp
1ebf : 8d0602                   sta abst+3
1ec2 : 08                       php         ;flags after load/store sequence
1ec3 : 49c3                     eor #$c3
1ec5 : c900                     cmp #0      ;test result
                                trap_ne
1ec7 : f003            >        beq skip1446
                       >        trap            ;failed not equal (non zero)
1ec9 : 20d144          >        jsr report_error
                       >
1ecc :                 >skip1446
                        
1ecc : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1ecd : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1ecf : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1ed2 : f003            >        beq skip1449
                       >        trap            ;failed not equal (non zero)
1ed4 : 20d144          >        jsr report_error
                       >
1ed7 :                 >skip1449
                        
                                set_stat 0
                       >            load_flag 0
1ed7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ed9 : 48              >            pha         ;use stack to load status
1eda : 28              >            plp
                        
1edb : ad1802                   lda abs1  
1ede : 08                       php         ;test stores do not alter flags
1edf : 49c3                     eor #$c3
1ee1 : 28                       plp
1ee2 : 8503                     sta zpt  
1ee4 : 08                       php         ;flags after load/store sequence
1ee5 : 49c3                     eor #$c3
1ee7 : c50c                     cmp zp1     ;test result
                                trap_ne
1ee9 : f003            >        beq skip1453
                       >        trap            ;failed not equal (non zero)
1eeb : 20d144          >        jsr report_error
                       >
1eee :                 >skip1453
                        
1eee : 68                       pla         ;load status
                                eor_flag 0
1eef : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1ef1 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1ef4 : f003            >        beq skip1456
                       >        trap            ;failed not equal (non zero)
1ef6 : 20d144          >        jsr report_error
                       >
1ef9 :                 >skip1456
                        
                                set_stat 0
                       >            load_flag 0
1ef9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1efb : 48              >            pha         ;use stack to load status
1efc : 28              >            plp
                        
1efd : ad1902                   lda abs1+1
1f00 : 08                       php         ;test stores do not alter flags
1f01 : 49c3                     eor #$c3
1f03 : 28                       plp
1f04 : 8504                     sta zpt+1
1f06 : 08                       php         ;flags after load/store sequence
1f07 : 49c3                     eor #$c3
1f09 : c50d                     cmp zp1+1   ;test result
                                trap_ne
1f0b : f003            >        beq skip1460
                       >        trap            ;failed not equal (non zero)
1f0d : 20d144          >        jsr report_error
                       >
1f10 :                 >skip1460
                        
1f10 : 68                       pla         ;load status
                                eor_flag 0
1f11 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1f13 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1f16 : f003            >        beq skip1463
                       >        trap            ;failed not equal (non zero)
1f18 : 20d144          >        jsr report_error
                       >
1f1b :                 >skip1463
                        
                                set_stat 0
                       >            load_flag 0
1f1b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1f1d : 48              >            pha         ;use stack to load status
1f1e : 28              >            plp
                        
1f1f : ad1a02                   lda abs1+2
1f22 : 08                       php         ;test stores do not alter flags
1f23 : 49c3                     eor #$c3
1f25 : 28                       plp
1f26 : 8505                     sta zpt+2
1f28 : 08                       php         ;flags after load/store sequence
1f29 : 49c3                     eor #$c3
1f2b : c50e                     cmp zp1+2   ;test result
                                trap_ne
1f2d : f003            >        beq skip1467
                       >        trap            ;failed not equal (non zero)
1f2f : 20d144          >        jsr report_error
                       >
1f32 :                 >skip1467
                        
1f32 : 68                       pla         ;load status
                                eor_flag 0
1f33 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1f35 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1f38 : f003            >        beq skip1470
                       >        trap            ;failed not equal (non zero)
1f3a : 20d144          >        jsr report_error
                       >
1f3d :                 >skip1470
                        
                                set_stat 0
                       >            load_flag 0
1f3d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1f3f : 48              >            pha         ;use stack to load status
1f40 : 28              >            plp
                        
1f41 : ad1b02                   lda abs1+3
1f44 : 08                       php         ;test stores do not alter flags
1f45 : 49c3                     eor #$c3
1f47 : 28                       plp
1f48 : 8506                     sta zpt+3
1f4a : 08                       php         ;flags after load/store sequence
1f4b : 49c3                     eor #$c3
1f4d : c50f                     cmp zp1+3   ;test result
                                trap_ne
1f4f : f003            >        beq skip1474
                       >        trap            ;failed not equal (non zero)
1f51 : 20d144          >        jsr report_error
                       >
1f54 :                 >skip1474
                        
1f54 : 68                       pla         ;load status
                                eor_flag 0
1f55 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1f57 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1f5a : f003            >        beq skip1477
                       >        trap            ;failed not equal (non zero)
1f5c : 20d144          >        jsr report_error
                       >
1f5f :                 >skip1477
                        
                                set_stat $ff
                       >            load_flag $ff
1f5f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1f61 : 48              >            pha         ;use stack to load status
1f62 : 28              >            plp
                        
1f63 : ad1802                   lda abs1  
1f66 : 08                       php         ;test stores do not alter flags
1f67 : 49c3                     eor #$c3
1f69 : 28                       plp
1f6a : 8503                     sta zpt  
1f6c : 08                       php         ;flags after load/store sequence
1f6d : 49c3                     eor #$c3
1f6f : c50c                     cmp zp1     ;test result
                                trap_ne
1f71 : f003            >        beq skip1481
                       >        trap            ;failed not equal (non zero)
1f73 : 20d144          >        jsr report_error
                       >
1f76 :                 >skip1481
                        
1f76 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1f77 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1f79 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1f7c : f003            >        beq skip1484
                       >        trap            ;failed not equal (non zero)
1f7e : 20d144          >        jsr report_error
                       >
1f81 :                 >skip1484
                        
                                set_stat $ff
                       >            load_flag $ff
1f81 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1f83 : 48              >            pha         ;use stack to load status
1f84 : 28              >            plp
                        
1f85 : ad1902                   lda abs1+1
1f88 : 08                       php         ;test stores do not alter flags
1f89 : 49c3                     eor #$c3
1f8b : 28                       plp
1f8c : 8504                     sta zpt+1
1f8e : 08                       php         ;flags after load/store sequence
1f8f : 49c3                     eor #$c3
1f91 : c50d                     cmp zp1+1   ;test result
                                trap_ne
1f93 : f003            >        beq skip1488
                       >        trap            ;failed not equal (non zero)
1f95 : 20d144          >        jsr report_error
                       >
1f98 :                 >skip1488
                        
1f98 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1f99 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1f9b : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1f9e : f003            >        beq skip1491
                       >        trap            ;failed not equal (non zero)
1fa0 : 20d144          >        jsr report_error
                       >
1fa3 :                 >skip1491
                        
                                set_stat $ff
                       >            load_flag $ff
1fa3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1fa5 : 48              >            pha         ;use stack to load status
1fa6 : 28              >            plp
                        
1fa7 : ad1a02                   lda abs1+2
1faa : 08                       php         ;test stores do not alter flags
1fab : 49c3                     eor #$c3
1fad : 28                       plp
1fae : 8505                     sta zpt+2
1fb0 : 08                       php         ;flags after load/store sequence
1fb1 : 49c3                     eor #$c3
1fb3 : c50e                     cmp zp1+2   ;test result
                                trap_ne
1fb5 : f003            >        beq skip1495
                       >        trap            ;failed not equal (non zero)
1fb7 : 20d144          >        jsr report_error
                       >
1fba :                 >skip1495
                        
1fba : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1fbb : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1fbd : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1fc0 : f003            >        beq skip1498
                       >        trap            ;failed not equal (non zero)
1fc2 : 20d144          >        jsr report_error
                       >
1fc5 :                 >skip1498
                        
                                set_stat $ff
                       >            load_flag $ff
1fc5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1fc7 : 48              >            pha         ;use stack to load status
1fc8 : 28              >            plp
                        
1fc9 : ad1b02                   lda abs1+3
1fcc : 08                       php         ;test stores do not alter flags
1fcd : 49c3                     eor #$c3
1fcf : 28                       plp
1fd0 : 8506                     sta zpt+3
1fd2 : 08                       php         ;flags after load/store sequence
1fd3 : 49c3                     eor #$c3
1fd5 : c50f                     cmp zp1+3   ;test result
                                trap_ne
1fd7 : f003            >        beq skip1502
                       >        trap            ;failed not equal (non zero)
1fd9 : 20d144          >        jsr report_error
                       >
1fdc :                 >skip1502
                        
1fdc : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1fdd : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1fdf : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1fe2 : f003            >        beq skip1505
                       >        trap            ;failed not equal (non zero)
1fe4 : 20d144          >        jsr report_error
                       >
1fe7 :                 >skip1505
                        
                                set_stat 0  
                       >            load_flag 0  
1fe7 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
1fe9 : 48              >            pha         ;use stack to load status
1fea : 28              >            plp
                        
1feb : a9c3                     lda #$c3
1fed : 08                       php
1fee : cd1802                   cmp abs1    ;test result
                                trap_ne
1ff1 : f003            >        beq skip1509
                       >        trap            ;failed not equal (non zero)
1ff3 : 20d144          >        jsr report_error
                       >
1ff6 :                 >skip1509
                        
1ff6 : 68                       pla         ;load status
                                eor_flag 0
1ff7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
1ff9 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1ffc : f003            >        beq skip1512
                       >        trap            ;failed not equal (non zero)
1ffe : 20d144          >        jsr report_error
                       >
2001 :                 >skip1512
                        
                                set_stat 0
                       >            load_flag 0
2001 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2003 : 48              >            pha         ;use stack to load status
2004 : 28              >            plp
                        
2005 : a982                     lda #$82
2007 : 08                       php
2008 : cd1902                   cmp abs1+1  ;test result
                                trap_ne
200b : f003            >        beq skip1516
                       >        trap            ;failed not equal (non zero)
200d : 20d144          >        jsr report_error
                       >
2010 :                 >skip1516
                        
2010 : 68                       pla         ;load status
                                eor_flag 0
2011 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2013 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
2016 : f003            >        beq skip1519
                       >        trap            ;failed not equal (non zero)
2018 : 20d144          >        jsr report_error
                       >
201b :                 >skip1519
                        
                                set_stat 0
                       >            load_flag 0
201b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
201d : 48              >            pha         ;use stack to load status
201e : 28              >            plp
                        
201f : a941                     lda #$41
2021 : 08                       php
2022 : cd1a02                   cmp abs1+2  ;test result
                                trap_ne
2025 : f003            >        beq skip1523
                       >        trap            ;failed not equal (non zero)
2027 : 20d144          >        jsr report_error
                       >
202a :                 >skip1523
                        
202a : 68                       pla         ;load status
                                eor_flag 0
202b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
202d : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
2030 : f003            >        beq skip1526
                       >        trap            ;failed not equal (non zero)
2032 : 20d144          >        jsr report_error
                       >
2035 :                 >skip1526
                        
                                set_stat 0
                       >            load_flag 0
2035 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2037 : 48              >            pha         ;use stack to load status
2038 : 28              >            plp
                        
2039 : a900                     lda #0
203b : 08                       php
203c : cd1b02                   cmp abs1+3  ;test result
                                trap_ne
203f : f003            >        beq skip1530
                       >        trap            ;failed not equal (non zero)
2041 : 20d144          >        jsr report_error
                       >
2044 :                 >skip1530
                        
2044 : 68                       pla         ;load status
                                eor_flag 0
2045 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2047 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
204a : f003            >        beq skip1533
                       >        trap            ;failed not equal (non zero)
204c : 20d144          >        jsr report_error
                       >
204f :                 >skip1533
                        
                        
                                set_stat $ff
                       >            load_flag $ff
204f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2051 : 48              >            pha         ;use stack to load status
2052 : 28              >            plp
                        
2053 : a9c3                     lda #$c3  
2055 : 08                       php
2056 : cd1802                   cmp abs1    ;test result
                                trap_ne
2059 : f003            >        beq skip1537
                       >        trap            ;failed not equal (non zero)
205b : 20d144          >        jsr report_error
                       >
205e :                 >skip1537
                        
205e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
205f : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2061 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
2064 : f003            >        beq skip1540
                       >        trap            ;failed not equal (non zero)
2066 : 20d144          >        jsr report_error
                       >
2069 :                 >skip1540
                        
                                set_stat $ff
                       >            load_flag $ff
2069 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
206b : 48              >            pha         ;use stack to load status
206c : 28              >            plp
                        
206d : a982                     lda #$82
206f : 08                       php
2070 : cd1902                   cmp abs1+1  ;test result
                                trap_ne
2073 : f003            >        beq skip1544
                       >        trap            ;failed not equal (non zero)
2075 : 20d144          >        jsr report_error
                       >
2078 :                 >skip1544
                        
2078 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2079 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
207b : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
207e : f003            >        beq skip1547
                       >        trap            ;failed not equal (non zero)
2080 : 20d144          >        jsr report_error
                       >
2083 :                 >skip1547
                        
                                set_stat $ff
                       >            load_flag $ff
2083 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2085 : 48              >            pha         ;use stack to load status
2086 : 28              >            plp
                        
2087 : a941                     lda #$41
2089 : 08                       php
208a : cd1a02                   cmp abs1+2  ;test result
                                trap_ne
208d : f003            >        beq skip1551
                       >        trap            ;failed not equal (non zero)
208f : 20d144          >        jsr report_error
                       >
2092 :                 >skip1551
                        
2092 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2093 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2095 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
2098 : f003            >        beq skip1554
                       >        trap            ;failed not equal (non zero)
209a : 20d144          >        jsr report_error
                       >
209d :                 >skip1554
                        
                                set_stat $ff
                       >            load_flag $ff
209d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
209f : 48              >            pha         ;use stack to load status
20a0 : 28              >            plp
                        
20a1 : a900                     lda #0
20a3 : 08                       php
20a4 : cd1b02                   cmp abs1+3  ;test result
                                trap_ne
20a7 : f003            >        beq skip1558
                       >        trap            ;failed not equal (non zero)
20a9 : 20d144          >        jsr report_error
                       >
20ac :                 >skip1558
                        
20ac : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
20ad : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
20af : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
20b2 : f003            >        beq skip1561
                       >        trap            ;failed not equal (non zero)
20b4 : 20d144          >        jsr report_error
                       >
20b7 :                 >skip1561
                        
                        
20b7 : a200                     ldx #0
20b9 : a503                     lda zpt  
20bb : 49c3                     eor #$c3
20bd : c50c                     cmp zp1  
                                trap_ne     ;store to zp data
20bf : f003            >        beq skip1563
                       >        trap            ;failed not equal (non zero)
20c1 : 20d144          >        jsr report_error
                       >
20c4 :                 >skip1563
                        
20c4 : 8603                     stx zpt     ;clear                
20c6 : ad0302                   lda abst  
20c9 : 49c3                     eor #$c3
20cb : cd1802                   cmp abs1  
                                trap_ne     ;store to abs data
20ce : f003            >        beq skip1565
                       >        trap            ;failed not equal (non zero)
20d0 : 20d144          >        jsr report_error
                       >
20d3 :                 >skip1565
                        
20d3 : 8e0302                   stx abst    ;clear                
20d6 : a504                     lda zpt+1
20d8 : 49c3                     eor #$c3
20da : c50d                     cmp zp1+1
                                trap_ne     ;store to zp data
20dc : f003            >        beq skip1567
                       >        trap            ;failed not equal (non zero)
20de : 20d144          >        jsr report_error
                       >
20e1 :                 >skip1567
                        
20e1 : 8604                     stx zpt+1   ;clear                
20e3 : ad0402                   lda abst+1
20e6 : 49c3                     eor #$c3
20e8 : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs data
20eb : f003            >        beq skip1569
                       >        trap            ;failed not equal (non zero)
20ed : 20d144          >        jsr report_error
                       >
20f0 :                 >skip1569
                        
20f0 : 8e0402                   stx abst+1  ;clear                
20f3 : a505                     lda zpt+2
20f5 : 49c3                     eor #$c3
20f7 : c50e                     cmp zp1+2
                                trap_ne     ;store to zp data
20f9 : f003            >        beq skip1571
                       >        trap            ;failed not equal (non zero)
20fb : 20d144          >        jsr report_error
                       >
20fe :                 >skip1571
                        
20fe : 8605                     stx zpt+2   ;clear                
2100 : ad0502                   lda abst+2
2103 : 49c3                     eor #$c3
2105 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs data
2108 : f003            >        beq skip1573
                       >        trap            ;failed not equal (non zero)
210a : 20d144          >        jsr report_error
                       >
210d :                 >skip1573
                        
210d : 8e0502                   stx abst+2  ;clear                
2110 : a506                     lda zpt+3
2112 : 49c3                     eor #$c3
2114 : c50f                     cmp zp1+3
                                trap_ne     ;store to zp data
2116 : f003            >        beq skip1575
                       >        trap            ;failed not equal (non zero)
2118 : 20d144          >        jsr report_error
                       >
211b :                 >skip1575
                        
211b : 8606                     stx zpt+3   ;clear                
211d : ad0602                   lda abst+3
2120 : 49c3                     eor #$c3
2122 : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs data
2125 : f003            >        beq skip1577
                       >        trap            ;failed not equal (non zero)
2127 : 20d144          >        jsr report_error
                       >
212a :                 >skip1577
                        
212a : 8e0602                   stx abst+3  ;clear                
                                next_test
212d : ad0002          >            lda test_case   ;previous test
2130 : c918            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2132 : f003            >        beq skip1580
                       >        trap            ;failed not equal (non zero)
2134 : 20d144          >        jsr report_error
                       >
2137 :                 >skip1580
                       >
0019 =                 >test_num = test_num + 1
2137 : a919            >            lda #test_num   ;*** next tests' number
2139 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing bit test & compares BIT CPX CPY CMP all addressing modes
                        ; BIT - zp / abs
                                set_a $ff,0
                       >            load_flag 0
213c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
213e : 48              >            pha         ;use stack to load status
213f : a9ff            >            lda #$ff     ;precharge accu
2141 : 28              >            plp
                        
2142 : 240f                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
2144 : 08              >            php         ;save flags
2145 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
2147 : f003            >        beq skip1585
                       >        trap            ;failed not equal (non zero)
2149 : 20d144          >        jsr report_error
                       >
214c :                 >skip1585
                       >
214c : 68              >            pla         ;load status
214d : 48              >            pha
                       >            cmp_flag fz 
214e : c932            >            cmp #(fz |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2150 : f003            >        beq skip1588
                       >        trap            ;failed not equal (non zero)
2152 : 20d144          >        jsr report_error
                       >
2155 :                 >skip1588
                       >
2155 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
2156 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2158 : 48              >            pha         ;use stack to load status
2159 : a901            >            lda #1     ;precharge accu
215b : 28              >            plp
                        
215c : 240e                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
215e : 08              >            php         ;save flags
215f : c901            >            cmp #1     ;test result
                       >            trap_ne
2161 : f003            >        beq skip1593
                       >        trap            ;failed not equal (non zero)
2163 : 20d144          >        jsr report_error
                       >
2166 :                 >skip1593
                       >
2166 : 68              >            pla         ;load status
2167 : 48              >            pha
                       >            cmp_flag fv
2168 : c970            >            cmp #(fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
216a : f003            >        beq skip1596
                       >        trap            ;failed not equal (non zero)
216c : 20d144          >        jsr report_error
                       >
216f :                 >skip1596
                       >
216f : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
2170 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2172 : 48              >            pha         ;use stack to load status
2173 : a901            >            lda #1     ;precharge accu
2175 : 28              >            plp
                        
2176 : 240d                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
2178 : 08              >            php         ;save flags
2179 : c901            >            cmp #1     ;test result
                       >            trap_ne
217b : f003            >        beq skip1601
                       >        trap            ;failed not equal (non zero)
217d : 20d144          >        jsr report_error
                       >
2180 :                 >skip1601
                       >
2180 : 68              >            pla         ;load status
2181 : 48              >            pha
                       >            cmp_flag fnz
2182 : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2184 : f003            >        beq skip1604
                       >        trap            ;failed not equal (non zero)
2186 : 20d144          >        jsr report_error
                       >
2189 :                 >skip1604
                       >
2189 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
218a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
218c : 48              >            pha         ;use stack to load status
218d : a901            >            lda #1     ;precharge accu
218f : 28              >            plp
                        
2190 : 240c                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
2192 : 08              >            php         ;save flags
2193 : c901            >            cmp #1     ;test result
                       >            trap_ne
2195 : f003            >        beq skip1609
                       >        trap            ;failed not equal (non zero)
2197 : 20d144          >        jsr report_error
                       >
219a :                 >skip1609
                       >
219a : 68              >            pla         ;load status
219b : 48              >            pha
                       >            cmp_flag fnv
219c : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
219e : f003            >        beq skip1612
                       >        trap            ;failed not equal (non zero)
21a0 : 20d144          >        jsr report_error
                       >
21a3 :                 >skip1612
                       >
21a3 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
21a4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
21a6 : 48              >            pha         ;use stack to load status
21a7 : a9ff            >            lda #$ff     ;precharge accu
21a9 : 28              >            plp
                        
21aa : 240f                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
21ac : 08              >            php         ;save flags
21ad : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
21af : f003            >        beq skip1617
                       >        trap            ;failed not equal (non zero)
21b1 : 20d144          >        jsr report_error
                       >
21b4 :                 >skip1617
                       >
21b4 : 68              >            pla         ;load status
21b5 : 48              >            pha
                       >            cmp_flag ~fnv 
21b6 : c93f            >            cmp #(~fnv |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
21b8 : f003            >        beq skip1620
                       >        trap            ;failed not equal (non zero)
21ba : 20d144          >        jsr report_error
                       >
21bd :                 >skip1620
                       >
21bd : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
21be : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
21c0 : 48              >            pha         ;use stack to load status
21c1 : a901            >            lda #1     ;precharge accu
21c3 : 28              >            plp
                        
21c4 : 240e                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
21c6 : 08              >            php         ;save flags
21c7 : c901            >            cmp #1     ;test result
                       >            trap_ne
21c9 : f003            >        beq skip1625
                       >        trap            ;failed not equal (non zero)
21cb : 20d144          >        jsr report_error
                       >
21ce :                 >skip1625
                       >
21ce : 68              >            pla         ;load status
21cf : 48              >            pha
                       >            cmp_flag ~fnz
21d0 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
21d2 : f003            >        beq skip1628
                       >        trap            ;failed not equal (non zero)
21d4 : 20d144          >        jsr report_error
                       >
21d7 :                 >skip1628
                       >
21d7 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
21d8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
21da : 48              >            pha         ;use stack to load status
21db : a901            >            lda #1     ;precharge accu
21dd : 28              >            plp
                        
21de : 240d                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
21e0 : 08              >            php         ;save flags
21e1 : c901            >            cmp #1     ;test result
                       >            trap_ne
21e3 : f003            >        beq skip1633
                       >        trap            ;failed not equal (non zero)
21e5 : 20d144          >        jsr report_error
                       >
21e8 :                 >skip1633
                       >
21e8 : 68              >            pla         ;load status
21e9 : 48              >            pha
                       >            cmp_flag ~fv
21ea : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
21ec : f003            >        beq skip1636
                       >        trap            ;failed not equal (non zero)
21ee : 20d144          >        jsr report_error
                       >
21f1 :                 >skip1636
                       >
21f1 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
21f2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
21f4 : 48              >            pha         ;use stack to load status
21f5 : a901            >            lda #1     ;precharge accu
21f7 : 28              >            plp
                        
21f8 : 240c                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
21fa : 08              >            php         ;save flags
21fb : c901            >            cmp #1     ;test result
                       >            trap_ne
21fd : f003            >        beq skip1641
                       >        trap            ;failed not equal (non zero)
21ff : 20d144          >        jsr report_error
                       >
2202 :                 >skip1641
                       >
2202 : 68              >            pla         ;load status
2203 : 48              >            pha
                       >            cmp_flag ~fz
2204 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2206 : f003            >        beq skip1644
                       >        trap            ;failed not equal (non zero)
2208 : 20d144          >        jsr report_error
                       >
220b :                 >skip1644
                       >
220b : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,0
                       >            load_flag 0
220c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
220e : 48              >            pha         ;use stack to load status
220f : a9ff            >            lda #$ff     ;precharge accu
2211 : 28              >            plp
                        
2212 : 2c1b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
2215 : 08              >            php         ;save flags
2216 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
2218 : f003            >        beq skip1649
                       >        trap            ;failed not equal (non zero)
221a : 20d144          >        jsr report_error
                       >
221d :                 >skip1649
                       >
221d : 68              >            pla         ;load status
221e : 48              >            pha
                       >            cmp_flag fz 
221f : c932            >            cmp #(fz |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2221 : f003            >        beq skip1652
                       >        trap            ;failed not equal (non zero)
2223 : 20d144          >        jsr report_error
                       >
2226 :                 >skip1652
                       >
2226 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
2227 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2229 : 48              >            pha         ;use stack to load status
222a : a901            >            lda #1     ;precharge accu
222c : 28              >            plp
                        
222d : 2c1a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
2230 : 08              >            php         ;save flags
2231 : c901            >            cmp #1     ;test result
                       >            trap_ne
2233 : f003            >        beq skip1657
                       >        trap            ;failed not equal (non zero)
2235 : 20d144          >        jsr report_error
                       >
2238 :                 >skip1657
                       >
2238 : 68              >            pla         ;load status
2239 : 48              >            pha
                       >            cmp_flag fv
223a : c970            >            cmp #(fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
223c : f003            >        beq skip1660
                       >        trap            ;failed not equal (non zero)
223e : 20d144          >        jsr report_error
                       >
2241 :                 >skip1660
                       >
2241 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
2242 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2244 : 48              >            pha         ;use stack to load status
2245 : a901            >            lda #1     ;precharge accu
2247 : 28              >            plp
                        
2248 : 2c1902                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
224b : 08              >            php         ;save flags
224c : c901            >            cmp #1     ;test result
                       >            trap_ne
224e : f003            >        beq skip1665
                       >        trap            ;failed not equal (non zero)
2250 : 20d144          >        jsr report_error
                       >
2253 :                 >skip1665
                       >
2253 : 68              >            pla         ;load status
2254 : 48              >            pha
                       >            cmp_flag fnz
2255 : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2257 : f003            >        beq skip1668
                       >        trap            ;failed not equal (non zero)
2259 : 20d144          >        jsr report_error
                       >
225c :                 >skip1668
                       >
225c : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
225d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
225f : 48              >            pha         ;use stack to load status
2260 : a901            >            lda #1     ;precharge accu
2262 : 28              >            plp
                        
2263 : 2c1802                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
2266 : 08              >            php         ;save flags
2267 : c901            >            cmp #1     ;test result
                       >            trap_ne
2269 : f003            >        beq skip1673
                       >        trap            ;failed not equal (non zero)
226b : 20d144          >        jsr report_error
                       >
226e :                 >skip1673
                       >
226e : 68              >            pla         ;load status
226f : 48              >            pha
                       >            cmp_flag fnv
2270 : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2272 : f003            >        beq skip1676
                       >        trap            ;failed not equal (non zero)
2274 : 20d144          >        jsr report_error
                       >
2277 :                 >skip1676
                       >
2277 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
2278 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
227a : 48              >            pha         ;use stack to load status
227b : a9ff            >            lda #$ff     ;precharge accu
227d : 28              >            plp
                        
227e : 2c1b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
2281 : 08              >            php         ;save flags
2282 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
2284 : f003            >        beq skip1681
                       >        trap            ;failed not equal (non zero)
2286 : 20d144          >        jsr report_error
                       >
2289 :                 >skip1681
                       >
2289 : 68              >            pla         ;load status
228a : 48              >            pha
                       >            cmp_flag ~fnv 
228b : c93f            >            cmp #(~fnv |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
228d : f003            >        beq skip1684
                       >        trap            ;failed not equal (non zero)
228f : 20d144          >        jsr report_error
                       >
2292 :                 >skip1684
                       >
2292 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
2293 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2295 : 48              >            pha         ;use stack to load status
2296 : a901            >            lda #1     ;precharge accu
2298 : 28              >            plp
                        
2299 : 2c1a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
229c : 08              >            php         ;save flags
229d : c901            >            cmp #1     ;test result
                       >            trap_ne
229f : f003            >        beq skip1689
                       >        trap            ;failed not equal (non zero)
22a1 : 20d144          >        jsr report_error
                       >
22a4 :                 >skip1689
                       >
22a4 : 68              >            pla         ;load status
22a5 : 48              >            pha
                       >            cmp_flag ~fnz
22a6 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
22a8 : f003            >        beq skip1692
                       >        trap            ;failed not equal (non zero)
22aa : 20d144          >        jsr report_error
                       >
22ad :                 >skip1692
                       >
22ad : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
22ae : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
22b0 : 48              >            pha         ;use stack to load status
22b1 : a901            >            lda #1     ;precharge accu
22b3 : 28              >            plp
                        
22b4 : 2c1902                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
22b7 : 08              >            php         ;save flags
22b8 : c901            >            cmp #1     ;test result
                       >            trap_ne
22ba : f003            >        beq skip1697
                       >        trap            ;failed not equal (non zero)
22bc : 20d144          >        jsr report_error
                       >
22bf :                 >skip1697
                       >
22bf : 68              >            pla         ;load status
22c0 : 48              >            pha
                       >            cmp_flag ~fv
22c1 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
22c3 : f003            >        beq skip1700
                       >        trap            ;failed not equal (non zero)
22c5 : 20d144          >        jsr report_error
                       >
22c8 :                 >skip1700
                       >
22c8 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
22c9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
22cb : 48              >            pha         ;use stack to load status
22cc : a901            >            lda #1     ;precharge accu
22ce : 28              >            plp
                        
22cf : 2c1802                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
22d2 : 08              >            php         ;save flags
22d3 : c901            >            cmp #1     ;test result
                       >            trap_ne
22d5 : f003            >        beq skip1705
                       >        trap            ;failed not equal (non zero)
22d7 : 20d144          >        jsr report_error
                       >
22da :                 >skip1705
                       >
22da : 68              >            pla         ;load status
22db : 48              >            pha
                       >            cmp_flag ~fz
22dc : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
22de : f003            >        beq skip1708
                       >        trap            ;failed not equal (non zero)
22e0 : 20d144          >        jsr report_error
                       >
22e3 :                 >skip1708
                       >
22e3 : 28              >            plp         ;restore status
                        
                                next_test
22e4 : ad0002          >            lda test_case   ;previous test
22e7 : c919            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
22e9 : f003            >        beq skip1711
                       >        trap            ;failed not equal (non zero)
22eb : 20d144          >        jsr report_error
                       >
22ee :                 >skip1711
                       >
001a =                 >test_num = test_num + 1
22ee : a91a            >            lda #test_num   ;*** next tests' number
22f0 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; CPX - zp / abs / #         
                                set_x $80,0
                       >            load_flag 0
22f3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
22f5 : 48              >            pha         ;use stack to load status
22f6 : a280            >            ldx #$80     ;precharge index x
22f8 : 28              >            plp
                        
22f9 : e410                     cpx zp7f
                                tst_stat fc
22fb : 08              >            php         ;save status
22fc : 68              >            pla         ;use stack to retrieve status
22fd : 48              >            pha
                       >            cmp_flag fc
22fe : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2300 : f003            >        beq skip1717
                       >        trap            ;failed not equal (non zero)
2302 : 20d144          >        jsr report_error
                       >
2305 :                 >skip1717
                       >
2305 : 28              >            plp         ;restore status
                        
2306 : ca                       dex
2307 : e410                     cpx zp7f
                                tst_stat fzc
2309 : 08              >            php         ;save status
230a : 68              >            pla         ;use stack to retrieve status
230b : 48              >            pha
                       >            cmp_flag fzc
230c : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
230e : f003            >        beq skip1721
                       >        trap            ;failed not equal (non zero)
2310 : 20d144          >        jsr report_error
                       >
2313 :                 >skip1721
                       >
2313 : 28              >            plp         ;restore status
                        
2314 : ca                       dex
2315 : e410                     cpx zp7f
                                tst_x $7e,fn
2317 : 08              >            php         ;save flags
2318 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
231a : f003            >        beq skip1724
                       >        trap            ;failed not equal (non zero)
231c : 20d144          >        jsr report_error
                       >
231f :                 >skip1724
                       >
231f : 68              >            pla         ;load status
2320 : 48              >            pha
                       >            cmp_flag fn
2321 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2323 : f003            >        beq skip1727
                       >        trap            ;failed not equal (non zero)
2325 : 20d144          >        jsr report_error
                       >
2328 :                 >skip1727
                       >
2328 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
2329 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
232b : 48              >            pha         ;use stack to load status
232c : a280            >            ldx #$80     ;precharge index x
232e : 28              >            plp
                        
232f : e410                     cpx zp7f
                                tst_stat ~fnz
2331 : 08              >            php         ;save status
2332 : 68              >            pla         ;use stack to retrieve status
2333 : 48              >            pha
                       >            cmp_flag ~fnz
2334 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2336 : f003            >        beq skip1733
                       >        trap            ;failed not equal (non zero)
2338 : 20d144          >        jsr report_error
                       >
233b :                 >skip1733
                       >
233b : 28              >            plp         ;restore status
                        
233c : ca                       dex
233d : e410                     cpx zp7f
                                tst_stat ~fn
233f : 08              >            php         ;save status
2340 : 68              >            pla         ;use stack to retrieve status
2341 : 48              >            pha
                       >            cmp_flag ~fn
2342 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2344 : f003            >        beq skip1737
                       >        trap            ;failed not equal (non zero)
2346 : 20d144          >        jsr report_error
                       >
2349 :                 >skip1737
                       >
2349 : 28              >            plp         ;restore status
                        
234a : ca                       dex
234b : e410                     cpx zp7f
                                tst_x $7e,~fzc
234d : 08              >            php         ;save flags
234e : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
2350 : f003            >        beq skip1740
                       >        trap            ;failed not equal (non zero)
2352 : 20d144          >        jsr report_error
                       >
2355 :                 >skip1740
                       >
2355 : 68              >            pla         ;load status
2356 : 48              >            pha
                       >            cmp_flag ~fzc
2357 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2359 : f003            >        beq skip1743
                       >        trap            ;failed not equal (non zero)
235b : 20d144          >        jsr report_error
                       >
235e :                 >skip1743
                       >
235e : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
235f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2361 : 48              >            pha         ;use stack to load status
2362 : a280            >            ldx #$80     ;precharge index x
2364 : 28              >            plp
                        
2365 : ec1c02                   cpx abs7f
                                tst_stat fc
2368 : 08              >            php         ;save status
2369 : 68              >            pla         ;use stack to retrieve status
236a : 48              >            pha
                       >            cmp_flag fc
236b : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
236d : f003            >        beq skip1749
                       >        trap            ;failed not equal (non zero)
236f : 20d144          >        jsr report_error
                       >
2372 :                 >skip1749
                       >
2372 : 28              >            plp         ;restore status
                        
2373 : ca                       dex
2374 : ec1c02                   cpx abs7f
                                tst_stat fzc
2377 : 08              >            php         ;save status
2378 : 68              >            pla         ;use stack to retrieve status
2379 : 48              >            pha
                       >            cmp_flag fzc
237a : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
237c : f003            >        beq skip1753
                       >        trap            ;failed not equal (non zero)
237e : 20d144          >        jsr report_error
                       >
2381 :                 >skip1753
                       >
2381 : 28              >            plp         ;restore status
                        
2382 : ca                       dex
2383 : ec1c02                   cpx abs7f
                                tst_x $7e,fn
2386 : 08              >            php         ;save flags
2387 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
2389 : f003            >        beq skip1756
                       >        trap            ;failed not equal (non zero)
238b : 20d144          >        jsr report_error
                       >
238e :                 >skip1756
                       >
238e : 68              >            pla         ;load status
238f : 48              >            pha
                       >            cmp_flag fn
2390 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2392 : f003            >        beq skip1759
                       >        trap            ;failed not equal (non zero)
2394 : 20d144          >        jsr report_error
                       >
2397 :                 >skip1759
                       >
2397 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
2398 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
239a : 48              >            pha         ;use stack to load status
239b : a280            >            ldx #$80     ;precharge index x
239d : 28              >            plp
                        
239e : ec1c02                   cpx abs7f
                                tst_stat ~fnz
23a1 : 08              >            php         ;save status
23a2 : 68              >            pla         ;use stack to retrieve status
23a3 : 48              >            pha
                       >            cmp_flag ~fnz
23a4 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
23a6 : f003            >        beq skip1765
                       >        trap            ;failed not equal (non zero)
23a8 : 20d144          >        jsr report_error
                       >
23ab :                 >skip1765
                       >
23ab : 28              >            plp         ;restore status
                        
23ac : ca                       dex
23ad : ec1c02                   cpx abs7f
                                tst_stat ~fn
23b0 : 08              >            php         ;save status
23b1 : 68              >            pla         ;use stack to retrieve status
23b2 : 48              >            pha
                       >            cmp_flag ~fn
23b3 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
23b5 : f003            >        beq skip1769
                       >        trap            ;failed not equal (non zero)
23b7 : 20d144          >        jsr report_error
                       >
23ba :                 >skip1769
                       >
23ba : 28              >            plp         ;restore status
                        
23bb : ca                       dex
23bc : ec1c02                   cpx abs7f
                                tst_x $7e,~fzc
23bf : 08              >            php         ;save flags
23c0 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
23c2 : f003            >        beq skip1772
                       >        trap            ;failed not equal (non zero)
23c4 : 20d144          >        jsr report_error
                       >
23c7 :                 >skip1772
                       >
23c7 : 68              >            pla         ;load status
23c8 : 48              >            pha
                       >            cmp_flag ~fzc
23c9 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
23cb : f003            >        beq skip1775
                       >        trap            ;failed not equal (non zero)
23cd : 20d144          >        jsr report_error
                       >
23d0 :                 >skip1775
                       >
23d0 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
23d1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
23d3 : 48              >            pha         ;use stack to load status
23d4 : a280            >            ldx #$80     ;precharge index x
23d6 : 28              >            plp
                        
23d7 : e07f                     cpx #$7f
                                tst_stat fc
23d9 : 08              >            php         ;save status
23da : 68              >            pla         ;use stack to retrieve status
23db : 48              >            pha
                       >            cmp_flag fc
23dc : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
23de : f003            >        beq skip1781
                       >        trap            ;failed not equal (non zero)
23e0 : 20d144          >        jsr report_error
                       >
23e3 :                 >skip1781
                       >
23e3 : 28              >            plp         ;restore status
                        
23e4 : ca                       dex
23e5 : e07f                     cpx #$7f
                                tst_stat fzc
23e7 : 08              >            php         ;save status
23e8 : 68              >            pla         ;use stack to retrieve status
23e9 : 48              >            pha
                       >            cmp_flag fzc
23ea : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
23ec : f003            >        beq skip1785
                       >        trap            ;failed not equal (non zero)
23ee : 20d144          >        jsr report_error
                       >
23f1 :                 >skip1785
                       >
23f1 : 28              >            plp         ;restore status
                        
23f2 : ca                       dex
23f3 : e07f                     cpx #$7f
                                tst_x $7e,fn
23f5 : 08              >            php         ;save flags
23f6 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
23f8 : f003            >        beq skip1788
                       >        trap            ;failed not equal (non zero)
23fa : 20d144          >        jsr report_error
                       >
23fd :                 >skip1788
                       >
23fd : 68              >            pla         ;load status
23fe : 48              >            pha
                       >            cmp_flag fn
23ff : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2401 : f003            >        beq skip1791
                       >        trap            ;failed not equal (non zero)
2403 : 20d144          >        jsr report_error
                       >
2406 :                 >skip1791
                       >
2406 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
2407 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2409 : 48              >            pha         ;use stack to load status
240a : a280            >            ldx #$80     ;precharge index x
240c : 28              >            plp
                        
240d : e07f                     cpx #$7f
                                tst_stat ~fnz
240f : 08              >            php         ;save status
2410 : 68              >            pla         ;use stack to retrieve status
2411 : 48              >            pha
                       >            cmp_flag ~fnz
2412 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2414 : f003            >        beq skip1797
                       >        trap            ;failed not equal (non zero)
2416 : 20d144          >        jsr report_error
                       >
2419 :                 >skip1797
                       >
2419 : 28              >            plp         ;restore status
                        
241a : ca                       dex
241b : e07f                     cpx #$7f
                                tst_stat ~fn
241d : 08              >            php         ;save status
241e : 68              >            pla         ;use stack to retrieve status
241f : 48              >            pha
                       >            cmp_flag ~fn
2420 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2422 : f003            >        beq skip1801
                       >        trap            ;failed not equal (non zero)
2424 : 20d144          >        jsr report_error
                       >
2427 :                 >skip1801
                       >
2427 : 28              >            plp         ;restore status
                        
2428 : ca                       dex
2429 : e07f                     cpx #$7f
                                tst_x $7e,~fzc
242b : 08              >            php         ;save flags
242c : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
242e : f003            >        beq skip1804
                       >        trap            ;failed not equal (non zero)
2430 : 20d144          >        jsr report_error
                       >
2433 :                 >skip1804
                       >
2433 : 68              >            pla         ;load status
2434 : 48              >            pha
                       >            cmp_flag ~fzc
2435 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2437 : f003            >        beq skip1807
                       >        trap            ;failed not equal (non zero)
2439 : 20d144          >        jsr report_error
                       >
243c :                 >skip1807
                       >
243c : 28              >            plp         ;restore status
                        
                                next_test
243d : ad0002          >            lda test_case   ;previous test
2440 : c91a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2442 : f003            >        beq skip1810
                       >        trap            ;failed not equal (non zero)
2444 : 20d144          >        jsr report_error
                       >
2447 :                 >skip1810
                       >
001b =                 >test_num = test_num + 1
2447 : a91b            >            lda #test_num   ;*** next tests' number
2449 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CPY - zp / abs / #         
                                set_y $80,0
                       >            load_flag 0
244c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
244e : 48              >            pha         ;use stack to load status
244f : a080            >            ldy #$80     ;precharge index y
2451 : 28              >            plp
                        
2452 : c410                     cpy zp7f
                                tst_stat fc
2454 : 08              >            php         ;save status
2455 : 68              >            pla         ;use stack to retrieve status
2456 : 48              >            pha
                       >            cmp_flag fc
2457 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2459 : f003            >        beq skip1816
                       >        trap            ;failed not equal (non zero)
245b : 20d144          >        jsr report_error
                       >
245e :                 >skip1816
                       >
245e : 28              >            plp         ;restore status
                        
245f : 88                       dey
2460 : c410                     cpy zp7f
                                tst_stat fzc
2462 : 08              >            php         ;save status
2463 : 68              >            pla         ;use stack to retrieve status
2464 : 48              >            pha
                       >            cmp_flag fzc
2465 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2467 : f003            >        beq skip1820
                       >        trap            ;failed not equal (non zero)
2469 : 20d144          >        jsr report_error
                       >
246c :                 >skip1820
                       >
246c : 28              >            plp         ;restore status
                        
246d : 88                       dey
246e : c410                     cpy zp7f
                                tst_y $7e,fn
2470 : 08              >            php         ;save flags
2471 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2473 : f003            >        beq skip1823
                       >        trap            ;failed not equal (non zero)
2475 : 20d144          >        jsr report_error
                       >
2478 :                 >skip1823
                       >
2478 : 68              >            pla         ;load status
2479 : 48              >            pha
                       >            cmp_flag fn
247a : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
247c : f003            >        beq skip1826
                       >        trap            ;failed not equal (non zero)
247e : 20d144          >        jsr report_error
                       >
2481 :                 >skip1826
                       >
2481 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
2482 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2484 : 48              >            pha         ;use stack to load status
2485 : a080            >            ldy #$80     ;precharge index y
2487 : 28              >            plp
                        
2488 : c410                     cpy zp7f
                                tst_stat ~fnz
248a : 08              >            php         ;save status
248b : 68              >            pla         ;use stack to retrieve status
248c : 48              >            pha
                       >            cmp_flag ~fnz
248d : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
248f : f003            >        beq skip1832
                       >        trap            ;failed not equal (non zero)
2491 : 20d144          >        jsr report_error
                       >
2494 :                 >skip1832
                       >
2494 : 28              >            plp         ;restore status
                        
2495 : 88                       dey
2496 : c410                     cpy zp7f
                                tst_stat ~fn
2498 : 08              >            php         ;save status
2499 : 68              >            pla         ;use stack to retrieve status
249a : 48              >            pha
                       >            cmp_flag ~fn
249b : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
249d : f003            >        beq skip1836
                       >        trap            ;failed not equal (non zero)
249f : 20d144          >        jsr report_error
                       >
24a2 :                 >skip1836
                       >
24a2 : 28              >            plp         ;restore status
                        
24a3 : 88                       dey
24a4 : c410                     cpy zp7f
                                tst_y $7e,~fzc
24a6 : 08              >            php         ;save flags
24a7 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
24a9 : f003            >        beq skip1839
                       >        trap            ;failed not equal (non zero)
24ab : 20d144          >        jsr report_error
                       >
24ae :                 >skip1839
                       >
24ae : 68              >            pla         ;load status
24af : 48              >            pha
                       >            cmp_flag ~fzc
24b0 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
24b2 : f003            >        beq skip1842
                       >        trap            ;failed not equal (non zero)
24b4 : 20d144          >        jsr report_error
                       >
24b7 :                 >skip1842
                       >
24b7 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
24b8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
24ba : 48              >            pha         ;use stack to load status
24bb : a080            >            ldy #$80     ;precharge index y
24bd : 28              >            plp
                        
24be : cc1c02                   cpy abs7f
                                tst_stat fc
24c1 : 08              >            php         ;save status
24c2 : 68              >            pla         ;use stack to retrieve status
24c3 : 48              >            pha
                       >            cmp_flag fc
24c4 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
24c6 : f003            >        beq skip1848
                       >        trap            ;failed not equal (non zero)
24c8 : 20d144          >        jsr report_error
                       >
24cb :                 >skip1848
                       >
24cb : 28              >            plp         ;restore status
                        
24cc : 88                       dey
24cd : cc1c02                   cpy abs7f
                                tst_stat fzc
24d0 : 08              >            php         ;save status
24d1 : 68              >            pla         ;use stack to retrieve status
24d2 : 48              >            pha
                       >            cmp_flag fzc
24d3 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
24d5 : f003            >        beq skip1852
                       >        trap            ;failed not equal (non zero)
24d7 : 20d144          >        jsr report_error
                       >
24da :                 >skip1852
                       >
24da : 28              >            plp         ;restore status
                        
24db : 88                       dey
24dc : cc1c02                   cpy abs7f
                                tst_y $7e,fn
24df : 08              >            php         ;save flags
24e0 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
24e2 : f003            >        beq skip1855
                       >        trap            ;failed not equal (non zero)
24e4 : 20d144          >        jsr report_error
                       >
24e7 :                 >skip1855
                       >
24e7 : 68              >            pla         ;load status
24e8 : 48              >            pha
                       >            cmp_flag fn
24e9 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
24eb : f003            >        beq skip1858
                       >        trap            ;failed not equal (non zero)
24ed : 20d144          >        jsr report_error
                       >
24f0 :                 >skip1858
                       >
24f0 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
24f1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
24f3 : 48              >            pha         ;use stack to load status
24f4 : a080            >            ldy #$80     ;precharge index y
24f6 : 28              >            plp
                        
24f7 : cc1c02                   cpy abs7f
                                tst_stat ~fnz
24fa : 08              >            php         ;save status
24fb : 68              >            pla         ;use stack to retrieve status
24fc : 48              >            pha
                       >            cmp_flag ~fnz
24fd : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
24ff : f003            >        beq skip1864
                       >        trap            ;failed not equal (non zero)
2501 : 20d144          >        jsr report_error
                       >
2504 :                 >skip1864
                       >
2504 : 28              >            plp         ;restore status
                        
2505 : 88                       dey
2506 : cc1c02                   cpy abs7f
                                tst_stat ~fn
2509 : 08              >            php         ;save status
250a : 68              >            pla         ;use stack to retrieve status
250b : 48              >            pha
                       >            cmp_flag ~fn
250c : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
250e : f003            >        beq skip1868
                       >        trap            ;failed not equal (non zero)
2510 : 20d144          >        jsr report_error
                       >
2513 :                 >skip1868
                       >
2513 : 28              >            plp         ;restore status
                        
2514 : 88                       dey
2515 : cc1c02                   cpy abs7f
                                tst_y $7e,~fzc
2518 : 08              >            php         ;save flags
2519 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
251b : f003            >        beq skip1871
                       >        trap            ;failed not equal (non zero)
251d : 20d144          >        jsr report_error
                       >
2520 :                 >skip1871
                       >
2520 : 68              >            pla         ;load status
2521 : 48              >            pha
                       >            cmp_flag ~fzc
2522 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2524 : f003            >        beq skip1874
                       >        trap            ;failed not equal (non zero)
2526 : 20d144          >        jsr report_error
                       >
2529 :                 >skip1874
                       >
2529 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
252a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
252c : 48              >            pha         ;use stack to load status
252d : a080            >            ldy #$80     ;precharge index y
252f : 28              >            plp
                        
2530 : c07f                     cpy #$7f
                                tst_stat fc
2532 : 08              >            php         ;save status
2533 : 68              >            pla         ;use stack to retrieve status
2534 : 48              >            pha
                       >            cmp_flag fc
2535 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2537 : f003            >        beq skip1880
                       >        trap            ;failed not equal (non zero)
2539 : 20d144          >        jsr report_error
                       >
253c :                 >skip1880
                       >
253c : 28              >            plp         ;restore status
                        
253d : 88                       dey
253e : c07f                     cpy #$7f
                                tst_stat fzc
2540 : 08              >            php         ;save status
2541 : 68              >            pla         ;use stack to retrieve status
2542 : 48              >            pha
                       >            cmp_flag fzc
2543 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2545 : f003            >        beq skip1884
                       >        trap            ;failed not equal (non zero)
2547 : 20d144          >        jsr report_error
                       >
254a :                 >skip1884
                       >
254a : 28              >            plp         ;restore status
                        
254b : 88                       dey
254c : c07f                     cpy #$7f
                                tst_y $7e,fn
254e : 08              >            php         ;save flags
254f : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2551 : f003            >        beq skip1887
                       >        trap            ;failed not equal (non zero)
2553 : 20d144          >        jsr report_error
                       >
2556 :                 >skip1887
                       >
2556 : 68              >            pla         ;load status
2557 : 48              >            pha
                       >            cmp_flag fn
2558 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
255a : f003            >        beq skip1890
                       >        trap            ;failed not equal (non zero)
255c : 20d144          >        jsr report_error
                       >
255f :                 >skip1890
                       >
255f : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
2560 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2562 : 48              >            pha         ;use stack to load status
2563 : a080            >            ldy #$80     ;precharge index y
2565 : 28              >            plp
                        
2566 : c07f                     cpy #$7f
                                tst_stat ~fnz
2568 : 08              >            php         ;save status
2569 : 68              >            pla         ;use stack to retrieve status
256a : 48              >            pha
                       >            cmp_flag ~fnz
256b : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
256d : f003            >        beq skip1896
                       >        trap            ;failed not equal (non zero)
256f : 20d144          >        jsr report_error
                       >
2572 :                 >skip1896
                       >
2572 : 28              >            plp         ;restore status
                        
2573 : 88                       dey
2574 : c07f                     cpy #$7f
                                tst_stat ~fn
2576 : 08              >            php         ;save status
2577 : 68              >            pla         ;use stack to retrieve status
2578 : 48              >            pha
                       >            cmp_flag ~fn
2579 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
257b : f003            >        beq skip1900
                       >        trap            ;failed not equal (non zero)
257d : 20d144          >        jsr report_error
                       >
2580 :                 >skip1900
                       >
2580 : 28              >            plp         ;restore status
                        
2581 : 88                       dey
2582 : c07f                     cpy #$7f
                                tst_y $7e,~fzc
2584 : 08              >            php         ;save flags
2585 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2587 : f003            >        beq skip1903
                       >        trap            ;failed not equal (non zero)
2589 : 20d144          >        jsr report_error
                       >
258c :                 >skip1903
                       >
258c : 68              >            pla         ;load status
258d : 48              >            pha
                       >            cmp_flag ~fzc
258e : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2590 : f003            >        beq skip1906
                       >        trap            ;failed not equal (non zero)
2592 : 20d144          >        jsr report_error
                       >
2595 :                 >skip1906
                       >
2595 : 28              >            plp         ;restore status
                        
                                next_test
2596 : ad0002          >            lda test_case   ;previous test
2599 : c91b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
259b : f003            >        beq skip1909
                       >        trap            ;failed not equal (non zero)
259d : 20d144          >        jsr report_error
                       >
25a0 :                 >skip1909
                       >
001c =                 >test_num = test_num + 1
25a0 : a91c            >            lda #test_num   ;*** next tests' number
25a2 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CMP - zp / abs / #         
                                set_a $80,0
                       >            load_flag 0
25a5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
25a7 : 48              >            pha         ;use stack to load status
25a8 : a980            >            lda #$80     ;precharge accu
25aa : 28              >            plp
                        
25ab : c510                     cmp zp7f
                                tst_a $80,fc
25ad : 08              >            php         ;save flags
25ae : c980            >            cmp #$80     ;test result
                       >            trap_ne
25b0 : f003            >        beq skip1914
                       >        trap            ;failed not equal (non zero)
25b2 : 20d144          >        jsr report_error
                       >
25b5 :                 >skip1914
                       >
25b5 : 68              >            pla         ;load status
25b6 : 48              >            pha
                       >            cmp_flag fc
25b7 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
25b9 : f003            >        beq skip1917
                       >        trap            ;failed not equal (non zero)
25bb : 20d144          >        jsr report_error
                       >
25be :                 >skip1917
                       >
25be : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
25bf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
25c1 : 48              >            pha         ;use stack to load status
25c2 : a97f            >            lda #$7f     ;precharge accu
25c4 : 28              >            plp
                        
25c5 : c510                     cmp zp7f
                                tst_a $7f,fzc
25c7 : 08              >            php         ;save flags
25c8 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
25ca : f003            >        beq skip1922
                       >        trap            ;failed not equal (non zero)
25cc : 20d144          >        jsr report_error
                       >
25cf :                 >skip1922
                       >
25cf : 68              >            pla         ;load status
25d0 : 48              >            pha
                       >            cmp_flag fzc
25d1 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
25d3 : f003            >        beq skip1925
                       >        trap            ;failed not equal (non zero)
25d5 : 20d144          >        jsr report_error
                       >
25d8 :                 >skip1925
                       >
25d8 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
25d9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
25db : 48              >            pha         ;use stack to load status
25dc : a97e            >            lda #$7e     ;precharge accu
25de : 28              >            plp
                        
25df : c510                     cmp zp7f
                                tst_a $7e,fn
25e1 : 08              >            php         ;save flags
25e2 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
25e4 : f003            >        beq skip1930
                       >        trap            ;failed not equal (non zero)
25e6 : 20d144          >        jsr report_error
                       >
25e9 :                 >skip1930
                       >
25e9 : 68              >            pla         ;load status
25ea : 48              >            pha
                       >            cmp_flag fn
25eb : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
25ed : f003            >        beq skip1933
                       >        trap            ;failed not equal (non zero)
25ef : 20d144          >        jsr report_error
                       >
25f2 :                 >skip1933
                       >
25f2 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
25f3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
25f5 : 48              >            pha         ;use stack to load status
25f6 : a980            >            lda #$80     ;precharge accu
25f8 : 28              >            plp
                        
25f9 : c510                     cmp zp7f
                                tst_a $80,~fnz
25fb : 08              >            php         ;save flags
25fc : c980            >            cmp #$80     ;test result
                       >            trap_ne
25fe : f003            >        beq skip1938
                       >        trap            ;failed not equal (non zero)
2600 : 20d144          >        jsr report_error
                       >
2603 :                 >skip1938
                       >
2603 : 68              >            pla         ;load status
2604 : 48              >            pha
                       >            cmp_flag ~fnz
2605 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2607 : f003            >        beq skip1941
                       >        trap            ;failed not equal (non zero)
2609 : 20d144          >        jsr report_error
                       >
260c :                 >skip1941
                       >
260c : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
260d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
260f : 48              >            pha         ;use stack to load status
2610 : a97f            >            lda #$7f     ;precharge accu
2612 : 28              >            plp
                        
2613 : c510                     cmp zp7f
                                tst_a $7f,~fn
2615 : 08              >            php         ;save flags
2616 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2618 : f003            >        beq skip1946
                       >        trap            ;failed not equal (non zero)
261a : 20d144          >        jsr report_error
                       >
261d :                 >skip1946
                       >
261d : 68              >            pla         ;load status
261e : 48              >            pha
                       >            cmp_flag ~fn
261f : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2621 : f003            >        beq skip1949
                       >        trap            ;failed not equal (non zero)
2623 : 20d144          >        jsr report_error
                       >
2626 :                 >skip1949
                       >
2626 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2627 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2629 : 48              >            pha         ;use stack to load status
262a : a97e            >            lda #$7e     ;precharge accu
262c : 28              >            plp
                        
262d : c510                     cmp zp7f
                                tst_a $7e,~fzc
262f : 08              >            php         ;save flags
2630 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2632 : f003            >        beq skip1954
                       >        trap            ;failed not equal (non zero)
2634 : 20d144          >        jsr report_error
                       >
2637 :                 >skip1954
                       >
2637 : 68              >            pla         ;load status
2638 : 48              >            pha
                       >            cmp_flag ~fzc
2639 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
263b : f003            >        beq skip1957
                       >        trap            ;failed not equal (non zero)
263d : 20d144          >        jsr report_error
                       >
2640 :                 >skip1957
                       >
2640 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
2641 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2643 : 48              >            pha         ;use stack to load status
2644 : a980            >            lda #$80     ;precharge accu
2646 : 28              >            plp
                        
2647 : cd1c02                   cmp abs7f
                                tst_a $80,fc
264a : 08              >            php         ;save flags
264b : c980            >            cmp #$80     ;test result
                       >            trap_ne
264d : f003            >        beq skip1962
                       >        trap            ;failed not equal (non zero)
264f : 20d144          >        jsr report_error
                       >
2652 :                 >skip1962
                       >
2652 : 68              >            pla         ;load status
2653 : 48              >            pha
                       >            cmp_flag fc
2654 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2656 : f003            >        beq skip1965
                       >        trap            ;failed not equal (non zero)
2658 : 20d144          >        jsr report_error
                       >
265b :                 >skip1965
                       >
265b : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
265c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
265e : 48              >            pha         ;use stack to load status
265f : a97f            >            lda #$7f     ;precharge accu
2661 : 28              >            plp
                        
2662 : cd1c02                   cmp abs7f
                                tst_a $7f,fzc
2665 : 08              >            php         ;save flags
2666 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2668 : f003            >        beq skip1970
                       >        trap            ;failed not equal (non zero)
266a : 20d144          >        jsr report_error
                       >
266d :                 >skip1970
                       >
266d : 68              >            pla         ;load status
266e : 48              >            pha
                       >            cmp_flag fzc
266f : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2671 : f003            >        beq skip1973
                       >        trap            ;failed not equal (non zero)
2673 : 20d144          >        jsr report_error
                       >
2676 :                 >skip1973
                       >
2676 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2677 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2679 : 48              >            pha         ;use stack to load status
267a : a97e            >            lda #$7e     ;precharge accu
267c : 28              >            plp
                        
267d : cd1c02                   cmp abs7f
                                tst_a $7e,fn
2680 : 08              >            php         ;save flags
2681 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2683 : f003            >        beq skip1978
                       >        trap            ;failed not equal (non zero)
2685 : 20d144          >        jsr report_error
                       >
2688 :                 >skip1978
                       >
2688 : 68              >            pla         ;load status
2689 : 48              >            pha
                       >            cmp_flag fn
268a : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
268c : f003            >        beq skip1981
                       >        trap            ;failed not equal (non zero)
268e : 20d144          >        jsr report_error
                       >
2691 :                 >skip1981
                       >
2691 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2692 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2694 : 48              >            pha         ;use stack to load status
2695 : a980            >            lda #$80     ;precharge accu
2697 : 28              >            plp
                        
2698 : cd1c02                   cmp abs7f
                                tst_a $80,~fnz
269b : 08              >            php         ;save flags
269c : c980            >            cmp #$80     ;test result
                       >            trap_ne
269e : f003            >        beq skip1986
                       >        trap            ;failed not equal (non zero)
26a0 : 20d144          >        jsr report_error
                       >
26a3 :                 >skip1986
                       >
26a3 : 68              >            pla         ;load status
26a4 : 48              >            pha
                       >            cmp_flag ~fnz
26a5 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
26a7 : f003            >        beq skip1989
                       >        trap            ;failed not equal (non zero)
26a9 : 20d144          >        jsr report_error
                       >
26ac :                 >skip1989
                       >
26ac : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
26ad : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
26af : 48              >            pha         ;use stack to load status
26b0 : a97f            >            lda #$7f     ;precharge accu
26b2 : 28              >            plp
                        
26b3 : cd1c02                   cmp abs7f
                                tst_a $7f,~fn
26b6 : 08              >            php         ;save flags
26b7 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
26b9 : f003            >        beq skip1994
                       >        trap            ;failed not equal (non zero)
26bb : 20d144          >        jsr report_error
                       >
26be :                 >skip1994
                       >
26be : 68              >            pla         ;load status
26bf : 48              >            pha
                       >            cmp_flag ~fn
26c0 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
26c2 : f003            >        beq skip1997
                       >        trap            ;failed not equal (non zero)
26c4 : 20d144          >        jsr report_error
                       >
26c7 :                 >skip1997
                       >
26c7 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
26c8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
26ca : 48              >            pha         ;use stack to load status
26cb : a97e            >            lda #$7e     ;precharge accu
26cd : 28              >            plp
                        
26ce : cd1c02                   cmp abs7f
                                tst_a $7e,~fzc
26d1 : 08              >            php         ;save flags
26d2 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
26d4 : f003            >        beq skip2002
                       >        trap            ;failed not equal (non zero)
26d6 : 20d144          >        jsr report_error
                       >
26d9 :                 >skip2002
                       >
26d9 : 68              >            pla         ;load status
26da : 48              >            pha
                       >            cmp_flag ~fzc
26db : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
26dd : f003            >        beq skip2005
                       >        trap            ;failed not equal (non zero)
26df : 20d144          >        jsr report_error
                       >
26e2 :                 >skip2005
                       >
26e2 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
26e3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
26e5 : 48              >            pha         ;use stack to load status
26e6 : a980            >            lda #$80     ;precharge accu
26e8 : 28              >            plp
                        
26e9 : c97f                     cmp #$7f
                                tst_a $80,fc
26eb : 08              >            php         ;save flags
26ec : c980            >            cmp #$80     ;test result
                       >            trap_ne
26ee : f003            >        beq skip2010
                       >        trap            ;failed not equal (non zero)
26f0 : 20d144          >        jsr report_error
                       >
26f3 :                 >skip2010
                       >
26f3 : 68              >            pla         ;load status
26f4 : 48              >            pha
                       >            cmp_flag fc
26f5 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
26f7 : f003            >        beq skip2013
                       >        trap            ;failed not equal (non zero)
26f9 : 20d144          >        jsr report_error
                       >
26fc :                 >skip2013
                       >
26fc : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
26fd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
26ff : 48              >            pha         ;use stack to load status
2700 : a97f            >            lda #$7f     ;precharge accu
2702 : 28              >            plp
                        
2703 : c97f                     cmp #$7f
                                tst_a $7f,fzc
2705 : 08              >            php         ;save flags
2706 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2708 : f003            >        beq skip2018
                       >        trap            ;failed not equal (non zero)
270a : 20d144          >        jsr report_error
                       >
270d :                 >skip2018
                       >
270d : 68              >            pla         ;load status
270e : 48              >            pha
                       >            cmp_flag fzc
270f : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2711 : f003            >        beq skip2021
                       >        trap            ;failed not equal (non zero)
2713 : 20d144          >        jsr report_error
                       >
2716 :                 >skip2021
                       >
2716 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2717 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2719 : 48              >            pha         ;use stack to load status
271a : a97e            >            lda #$7e     ;precharge accu
271c : 28              >            plp
                        
271d : c97f                     cmp #$7f
                                tst_a $7e,fn
271f : 08              >            php         ;save flags
2720 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2722 : f003            >        beq skip2026
                       >        trap            ;failed not equal (non zero)
2724 : 20d144          >        jsr report_error
                       >
2727 :                 >skip2026
                       >
2727 : 68              >            pla         ;load status
2728 : 48              >            pha
                       >            cmp_flag fn
2729 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
272b : f003            >        beq skip2029
                       >        trap            ;failed not equal (non zero)
272d : 20d144          >        jsr report_error
                       >
2730 :                 >skip2029
                       >
2730 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2731 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2733 : 48              >            pha         ;use stack to load status
2734 : a980            >            lda #$80     ;precharge accu
2736 : 28              >            plp
                        
2737 : c97f                     cmp #$7f
                                tst_a $80,~fnz
2739 : 08              >            php         ;save flags
273a : c980            >            cmp #$80     ;test result
                       >            trap_ne
273c : f003            >        beq skip2034
                       >        trap            ;failed not equal (non zero)
273e : 20d144          >        jsr report_error
                       >
2741 :                 >skip2034
                       >
2741 : 68              >            pla         ;load status
2742 : 48              >            pha
                       >            cmp_flag ~fnz
2743 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2745 : f003            >        beq skip2037
                       >        trap            ;failed not equal (non zero)
2747 : 20d144          >        jsr report_error
                       >
274a :                 >skip2037
                       >
274a : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
274b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
274d : 48              >            pha         ;use stack to load status
274e : a97f            >            lda #$7f     ;precharge accu
2750 : 28              >            plp
                        
2751 : c97f                     cmp #$7f
                                tst_a $7f,~fn
2753 : 08              >            php         ;save flags
2754 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2756 : f003            >        beq skip2042
                       >        trap            ;failed not equal (non zero)
2758 : 20d144          >        jsr report_error
                       >
275b :                 >skip2042
                       >
275b : 68              >            pla         ;load status
275c : 48              >            pha
                       >            cmp_flag ~fn
275d : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
275f : f003            >        beq skip2045
                       >        trap            ;failed not equal (non zero)
2761 : 20d144          >        jsr report_error
                       >
2764 :                 >skip2045
                       >
2764 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2765 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2767 : 48              >            pha         ;use stack to load status
2768 : a97e            >            lda #$7e     ;precharge accu
276a : 28              >            plp
                        
276b : c97f                     cmp #$7f
                                tst_a $7e,~fzc
276d : 08              >            php         ;save flags
276e : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2770 : f003            >        beq skip2050
                       >        trap            ;failed not equal (non zero)
2772 : 20d144          >        jsr report_error
                       >
2775 :                 >skip2050
                       >
2775 : 68              >            pla         ;load status
2776 : 48              >            pha
                       >            cmp_flag ~fzc
2777 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2779 : f003            >        beq skip2053
                       >        trap            ;failed not equal (non zero)
277b : 20d144          >        jsr report_error
                       >
277e :                 >skip2053
                       >
277e : 28              >            plp         ;restore status
                        
                        
277f : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                       >            load_flag 0
2781 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2783 : 48              >            pha         ;use stack to load status
2784 : a980            >            lda #$80     ;precharge accu
2786 : 28              >            plp
                        
2787 : d50c                     cmp zp1,x
                                tst_a $80,fc
2789 : 08              >            php         ;save flags
278a : c980            >            cmp #$80     ;test result
                       >            trap_ne
278c : f003            >        beq skip2058
                       >        trap            ;failed not equal (non zero)
278e : 20d144          >        jsr report_error
                       >
2791 :                 >skip2058
                       >
2791 : 68              >            pla         ;load status
2792 : 48              >            pha
                       >            cmp_flag fc
2793 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2795 : f003            >        beq skip2061
                       >        trap            ;failed not equal (non zero)
2797 : 20d144          >        jsr report_error
                       >
279a :                 >skip2061
                       >
279a : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
279b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
279d : 48              >            pha         ;use stack to load status
279e : a97f            >            lda #$7f     ;precharge accu
27a0 : 28              >            plp
                        
27a1 : d50c                     cmp zp1,x
                                tst_a $7f,fzc
27a3 : 08              >            php         ;save flags
27a4 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
27a6 : f003            >        beq skip2066
                       >        trap            ;failed not equal (non zero)
27a8 : 20d144          >        jsr report_error
                       >
27ab :                 >skip2066
                       >
27ab : 68              >            pla         ;load status
27ac : 48              >            pha
                       >            cmp_flag fzc
27ad : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
27af : f003            >        beq skip2069
                       >        trap            ;failed not equal (non zero)
27b1 : 20d144          >        jsr report_error
                       >
27b4 :                 >skip2069
                       >
27b4 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
27b5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
27b7 : 48              >            pha         ;use stack to load status
27b8 : a97e            >            lda #$7e     ;precharge accu
27ba : 28              >            plp
                        
27bb : d50c                     cmp zp1,x
                                tst_a $7e,fn
27bd : 08              >            php         ;save flags
27be : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
27c0 : f003            >        beq skip2074
                       >        trap            ;failed not equal (non zero)
27c2 : 20d144          >        jsr report_error
                       >
27c5 :                 >skip2074
                       >
27c5 : 68              >            pla         ;load status
27c6 : 48              >            pha
                       >            cmp_flag fn
27c7 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
27c9 : f003            >        beq skip2077
                       >        trap            ;failed not equal (non zero)
27cb : 20d144          >        jsr report_error
                       >
27ce :                 >skip2077
                       >
27ce : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
27cf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
27d1 : 48              >            pha         ;use stack to load status
27d2 : a980            >            lda #$80     ;precharge accu
27d4 : 28              >            plp
                        
27d5 : d50c                     cmp zp1,x
                                tst_a $80,~fnz
27d7 : 08              >            php         ;save flags
27d8 : c980            >            cmp #$80     ;test result
                       >            trap_ne
27da : f003            >        beq skip2082
                       >        trap            ;failed not equal (non zero)
27dc : 20d144          >        jsr report_error
                       >
27df :                 >skip2082
                       >
27df : 68              >            pla         ;load status
27e0 : 48              >            pha
                       >            cmp_flag ~fnz
27e1 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
27e3 : f003            >        beq skip2085
                       >        trap            ;failed not equal (non zero)
27e5 : 20d144          >        jsr report_error
                       >
27e8 :                 >skip2085
                       >
27e8 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
27e9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
27eb : 48              >            pha         ;use stack to load status
27ec : a97f            >            lda #$7f     ;precharge accu
27ee : 28              >            plp
                        
27ef : d50c                     cmp zp1,x
                                tst_a $7f,~fn
27f1 : 08              >            php         ;save flags
27f2 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
27f4 : f003            >        beq skip2090
                       >        trap            ;failed not equal (non zero)
27f6 : 20d144          >        jsr report_error
                       >
27f9 :                 >skip2090
                       >
27f9 : 68              >            pla         ;load status
27fa : 48              >            pha
                       >            cmp_flag ~fn
27fb : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
27fd : f003            >        beq skip2093
                       >        trap            ;failed not equal (non zero)
27ff : 20d144          >        jsr report_error
                       >
2802 :                 >skip2093
                       >
2802 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2803 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2805 : 48              >            pha         ;use stack to load status
2806 : a97e            >            lda #$7e     ;precharge accu
2808 : 28              >            plp
                        
2809 : d50c                     cmp zp1,x
                                tst_a $7e,~fzc
280b : 08              >            php         ;save flags
280c : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
280e : f003            >        beq skip2098
                       >        trap            ;failed not equal (non zero)
2810 : 20d144          >        jsr report_error
                       >
2813 :                 >skip2098
                       >
2813 : 68              >            pla         ;load status
2814 : 48              >            pha
                       >            cmp_flag ~fzc
2815 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2817 : f003            >        beq skip2101
                       >        trap            ;failed not equal (non zero)
2819 : 20d144          >        jsr report_error
                       >
281c :                 >skip2101
                       >
281c : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
281d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
281f : 48              >            pha         ;use stack to load status
2820 : a980            >            lda #$80     ;precharge accu
2822 : 28              >            plp
                        
2823 : dd1802                   cmp abs1,x
                                tst_a $80,fc
2826 : 08              >            php         ;save flags
2827 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2829 : f003            >        beq skip2106
                       >        trap            ;failed not equal (non zero)
282b : 20d144          >        jsr report_error
                       >
282e :                 >skip2106
                       >
282e : 68              >            pla         ;load status
282f : 48              >            pha
                       >            cmp_flag fc
2830 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2832 : f003            >        beq skip2109
                       >        trap            ;failed not equal (non zero)
2834 : 20d144          >        jsr report_error
                       >
2837 :                 >skip2109
                       >
2837 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2838 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
283a : 48              >            pha         ;use stack to load status
283b : a97f            >            lda #$7f     ;precharge accu
283d : 28              >            plp
                        
283e : dd1802                   cmp abs1,x
                                tst_a $7f,fzc
2841 : 08              >            php         ;save flags
2842 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2844 : f003            >        beq skip2114
                       >        trap            ;failed not equal (non zero)
2846 : 20d144          >        jsr report_error
                       >
2849 :                 >skip2114
                       >
2849 : 68              >            pla         ;load status
284a : 48              >            pha
                       >            cmp_flag fzc
284b : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
284d : f003            >        beq skip2117
                       >        trap            ;failed not equal (non zero)
284f : 20d144          >        jsr report_error
                       >
2852 :                 >skip2117
                       >
2852 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2853 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2855 : 48              >            pha         ;use stack to load status
2856 : a97e            >            lda #$7e     ;precharge accu
2858 : 28              >            plp
                        
2859 : dd1802                   cmp abs1,x
                                tst_a $7e,fn
285c : 08              >            php         ;save flags
285d : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
285f : f003            >        beq skip2122
                       >        trap            ;failed not equal (non zero)
2861 : 20d144          >        jsr report_error
                       >
2864 :                 >skip2122
                       >
2864 : 68              >            pla         ;load status
2865 : 48              >            pha
                       >            cmp_flag fn
2866 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2868 : f003            >        beq skip2125
                       >        trap            ;failed not equal (non zero)
286a : 20d144          >        jsr report_error
                       >
286d :                 >skip2125
                       >
286d : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
286e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2870 : 48              >            pha         ;use stack to load status
2871 : a980            >            lda #$80     ;precharge accu
2873 : 28              >            plp
                        
2874 : dd1802                   cmp abs1,x
                                tst_a $80,~fnz
2877 : 08              >            php         ;save flags
2878 : c980            >            cmp #$80     ;test result
                       >            trap_ne
287a : f003            >        beq skip2130
                       >        trap            ;failed not equal (non zero)
287c : 20d144          >        jsr report_error
                       >
287f :                 >skip2130
                       >
287f : 68              >            pla         ;load status
2880 : 48              >            pha
                       >            cmp_flag ~fnz
2881 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2883 : f003            >        beq skip2133
                       >        trap            ;failed not equal (non zero)
2885 : 20d144          >        jsr report_error
                       >
2888 :                 >skip2133
                       >
2888 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2889 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
288b : 48              >            pha         ;use stack to load status
288c : a97f            >            lda #$7f     ;precharge accu
288e : 28              >            plp
                        
288f : dd1802                   cmp abs1,x
                                tst_a $7f,~fn
2892 : 08              >            php         ;save flags
2893 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2895 : f003            >        beq skip2138
                       >        trap            ;failed not equal (non zero)
2897 : 20d144          >        jsr report_error
                       >
289a :                 >skip2138
                       >
289a : 68              >            pla         ;load status
289b : 48              >            pha
                       >            cmp_flag ~fn
289c : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
289e : f003            >        beq skip2141
                       >        trap            ;failed not equal (non zero)
28a0 : 20d144          >        jsr report_error
                       >
28a3 :                 >skip2141
                       >
28a3 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
28a4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
28a6 : 48              >            pha         ;use stack to load status
28a7 : a97e            >            lda #$7e     ;precharge accu
28a9 : 28              >            plp
                        
28aa : dd1802                   cmp abs1,x
                                tst_a $7e,~fzc
28ad : 08              >            php         ;save flags
28ae : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
28b0 : f003            >        beq skip2146
                       >        trap            ;failed not equal (non zero)
28b2 : 20d144          >        jsr report_error
                       >
28b5 :                 >skip2146
                       >
28b5 : 68              >            pla         ;load status
28b6 : 48              >            pha
                       >            cmp_flag ~fzc
28b7 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
28b9 : f003            >        beq skip2149
                       >        trap            ;failed not equal (non zero)
28bb : 20d144          >        jsr report_error
                       >
28be :                 >skip2149
                       >
28be : 28              >            plp         ;restore status
                        
                        
28bf : a004                     ldy #4          ;with indexing by Y
28c1 : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                       >            load_flag 0
28c3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
28c5 : 48              >            pha         ;use stack to load status
28c6 : a980            >            lda #$80     ;precharge accu
28c8 : 28              >            plp
                        
28c9 : d91802                   cmp abs1,y
                                tst_a $80,fc
28cc : 08              >            php         ;save flags
28cd : c980            >            cmp #$80     ;test result
                       >            trap_ne
28cf : f003            >        beq skip2154
                       >        trap            ;failed not equal (non zero)
28d1 : 20d144          >        jsr report_error
                       >
28d4 :                 >skip2154
                       >
28d4 : 68              >            pla         ;load status
28d5 : 48              >            pha
                       >            cmp_flag fc
28d6 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
28d8 : f003            >        beq skip2157
                       >        trap            ;failed not equal (non zero)
28da : 20d144          >        jsr report_error
                       >
28dd :                 >skip2157
                       >
28dd : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
28de : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
28e0 : 48              >            pha         ;use stack to load status
28e1 : a97f            >            lda #$7f     ;precharge accu
28e3 : 28              >            plp
                        
28e4 : d91802                   cmp abs1,y
                                tst_a $7f,fzc
28e7 : 08              >            php         ;save flags
28e8 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
28ea : f003            >        beq skip2162
                       >        trap            ;failed not equal (non zero)
28ec : 20d144          >        jsr report_error
                       >
28ef :                 >skip2162
                       >
28ef : 68              >            pla         ;load status
28f0 : 48              >            pha
                       >            cmp_flag fzc
28f1 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
28f3 : f003            >        beq skip2165
                       >        trap            ;failed not equal (non zero)
28f5 : 20d144          >        jsr report_error
                       >
28f8 :                 >skip2165
                       >
28f8 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
28f9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
28fb : 48              >            pha         ;use stack to load status
28fc : a97e            >            lda #$7e     ;precharge accu
28fe : 28              >            plp
                        
28ff : d91802                   cmp abs1,y
                                tst_a $7e,fn
2902 : 08              >            php         ;save flags
2903 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2905 : f003            >        beq skip2170
                       >        trap            ;failed not equal (non zero)
2907 : 20d144          >        jsr report_error
                       >
290a :                 >skip2170
                       >
290a : 68              >            pla         ;load status
290b : 48              >            pha
                       >            cmp_flag fn
290c : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
290e : f003            >        beq skip2173
                       >        trap            ;failed not equal (non zero)
2910 : 20d144          >        jsr report_error
                       >
2913 :                 >skip2173
                       >
2913 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2914 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2916 : 48              >            pha         ;use stack to load status
2917 : a980            >            lda #$80     ;precharge accu
2919 : 28              >            plp
                        
291a : d91802                   cmp abs1,y
                                tst_a $80,~fnz
291d : 08              >            php         ;save flags
291e : c980            >            cmp #$80     ;test result
                       >            trap_ne
2920 : f003            >        beq skip2178
                       >        trap            ;failed not equal (non zero)
2922 : 20d144          >        jsr report_error
                       >
2925 :                 >skip2178
                       >
2925 : 68              >            pla         ;load status
2926 : 48              >            pha
                       >            cmp_flag ~fnz
2927 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2929 : f003            >        beq skip2181
                       >        trap            ;failed not equal (non zero)
292b : 20d144          >        jsr report_error
                       >
292e :                 >skip2181
                       >
292e : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
292f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2931 : 48              >            pha         ;use stack to load status
2932 : a97f            >            lda #$7f     ;precharge accu
2934 : 28              >            plp
                        
2935 : d91802                   cmp abs1,y
                                tst_a $7f,~fn
2938 : 08              >            php         ;save flags
2939 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
293b : f003            >        beq skip2186
                       >        trap            ;failed not equal (non zero)
293d : 20d144          >        jsr report_error
                       >
2940 :                 >skip2186
                       >
2940 : 68              >            pla         ;load status
2941 : 48              >            pha
                       >            cmp_flag ~fn
2942 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2944 : f003            >        beq skip2189
                       >        trap            ;failed not equal (non zero)
2946 : 20d144          >        jsr report_error
                       >
2949 :                 >skip2189
                       >
2949 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
294a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
294c : 48              >            pha         ;use stack to load status
294d : a97e            >            lda #$7e     ;precharge accu
294f : 28              >            plp
                        
2950 : d91802                   cmp abs1,y
                                tst_a $7e,~fzc
2953 : 08              >            php         ;save flags
2954 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2956 : f003            >        beq skip2194
                       >        trap            ;failed not equal (non zero)
2958 : 20d144          >        jsr report_error
                       >
295b :                 >skip2194
                       >
295b : 68              >            pla         ;load status
295c : 48              >            pha
                       >            cmp_flag ~fzc
295d : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
295f : f003            >        beq skip2197
                       >        trap            ;failed not equal (non zero)
2961 : 20d144          >        jsr report_error
                       >
2964 :                 >skip2197
                       >
2964 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
2965 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2967 : 48              >            pha         ;use stack to load status
2968 : a980            >            lda #$80     ;precharge accu
296a : 28              >            plp
                        
296b : c11d                     cmp (ind1,x)
                                tst_a $80,fc
296d : 08              >            php         ;save flags
296e : c980            >            cmp #$80     ;test result
                       >            trap_ne
2970 : f003            >        beq skip2202
                       >        trap            ;failed not equal (non zero)
2972 : 20d144          >        jsr report_error
                       >
2975 :                 >skip2202
                       >
2975 : 68              >            pla         ;load status
2976 : 48              >            pha
                       >            cmp_flag fc
2977 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2979 : f003            >        beq skip2205
                       >        trap            ;failed not equal (non zero)
297b : 20d144          >        jsr report_error
                       >
297e :                 >skip2205
                       >
297e : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
297f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2981 : 48              >            pha         ;use stack to load status
2982 : a97f            >            lda #$7f     ;precharge accu
2984 : 28              >            plp
                        
2985 : c11d                     cmp (ind1,x)
                                tst_a $7f,fzc
2987 : 08              >            php         ;save flags
2988 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
298a : f003            >        beq skip2210
                       >        trap            ;failed not equal (non zero)
298c : 20d144          >        jsr report_error
                       >
298f :                 >skip2210
                       >
298f : 68              >            pla         ;load status
2990 : 48              >            pha
                       >            cmp_flag fzc
2991 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2993 : f003            >        beq skip2213
                       >        trap            ;failed not equal (non zero)
2995 : 20d144          >        jsr report_error
                       >
2998 :                 >skip2213
                       >
2998 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2999 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
299b : 48              >            pha         ;use stack to load status
299c : a97e            >            lda #$7e     ;precharge accu
299e : 28              >            plp
                        
299f : c11d                     cmp (ind1,x)
                                tst_a $7e,fn
29a1 : 08              >            php         ;save flags
29a2 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
29a4 : f003            >        beq skip2218
                       >        trap            ;failed not equal (non zero)
29a6 : 20d144          >        jsr report_error
                       >
29a9 :                 >skip2218
                       >
29a9 : 68              >            pla         ;load status
29aa : 48              >            pha
                       >            cmp_flag fn
29ab : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
29ad : f003            >        beq skip2221
                       >        trap            ;failed not equal (non zero)
29af : 20d144          >        jsr report_error
                       >
29b2 :                 >skip2221
                       >
29b2 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
29b3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
29b5 : 48              >            pha         ;use stack to load status
29b6 : a980            >            lda #$80     ;precharge accu
29b8 : 28              >            plp
                        
29b9 : c11d                     cmp (ind1,x)
                                tst_a $80,~fnz
29bb : 08              >            php         ;save flags
29bc : c980            >            cmp #$80     ;test result
                       >            trap_ne
29be : f003            >        beq skip2226
                       >        trap            ;failed not equal (non zero)
29c0 : 20d144          >        jsr report_error
                       >
29c3 :                 >skip2226
                       >
29c3 : 68              >            pla         ;load status
29c4 : 48              >            pha
                       >            cmp_flag ~fnz
29c5 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
29c7 : f003            >        beq skip2229
                       >        trap            ;failed not equal (non zero)
29c9 : 20d144          >        jsr report_error
                       >
29cc :                 >skip2229
                       >
29cc : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
29cd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
29cf : 48              >            pha         ;use stack to load status
29d0 : a97f            >            lda #$7f     ;precharge accu
29d2 : 28              >            plp
                        
29d3 : c11d                     cmp (ind1,x)
                                tst_a $7f,~fn
29d5 : 08              >            php         ;save flags
29d6 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
29d8 : f003            >        beq skip2234
                       >        trap            ;failed not equal (non zero)
29da : 20d144          >        jsr report_error
                       >
29dd :                 >skip2234
                       >
29dd : 68              >            pla         ;load status
29de : 48              >            pha
                       >            cmp_flag ~fn
29df : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
29e1 : f003            >        beq skip2237
                       >        trap            ;failed not equal (non zero)
29e3 : 20d144          >        jsr report_error
                       >
29e6 :                 >skip2237
                       >
29e6 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
29e7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
29e9 : 48              >            pha         ;use stack to load status
29ea : a97e            >            lda #$7e     ;precharge accu
29ec : 28              >            plp
                        
29ed : c11d                     cmp (ind1,x)
                                tst_a $7e,~fzc
29ef : 08              >            php         ;save flags
29f0 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
29f2 : f003            >        beq skip2242
                       >        trap            ;failed not equal (non zero)
29f4 : 20d144          >        jsr report_error
                       >
29f7 :                 >skip2242
                       >
29f7 : 68              >            pla         ;load status
29f8 : 48              >            pha
                       >            cmp_flag ~fzc
29f9 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
29fb : f003            >        beq skip2245
                       >        trap            ;failed not equal (non zero)
29fd : 20d144          >        jsr report_error
                       >
2a00 :                 >skip2245
                       >
2a00 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
2a01 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2a03 : 48              >            pha         ;use stack to load status
2a04 : a980            >            lda #$80     ;precharge accu
2a06 : 28              >            plp
                        
2a07 : d11d                     cmp (ind1),y
                                tst_a $80,fc
2a09 : 08              >            php         ;save flags
2a0a : c980            >            cmp #$80     ;test result
                       >            trap_ne
2a0c : f003            >        beq skip2250
                       >        trap            ;failed not equal (non zero)
2a0e : 20d144          >        jsr report_error
                       >
2a11 :                 >skip2250
                       >
2a11 : 68              >            pla         ;load status
2a12 : 48              >            pha
                       >            cmp_flag fc
2a13 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a15 : f003            >        beq skip2253
                       >        trap            ;failed not equal (non zero)
2a17 : 20d144          >        jsr report_error
                       >
2a1a :                 >skip2253
                       >
2a1a : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2a1b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2a1d : 48              >            pha         ;use stack to load status
2a1e : a97f            >            lda #$7f     ;precharge accu
2a20 : 28              >            plp
                        
2a21 : d11d                     cmp (ind1),y
                                tst_a $7f,fzc
2a23 : 08              >            php         ;save flags
2a24 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2a26 : f003            >        beq skip2258
                       >        trap            ;failed not equal (non zero)
2a28 : 20d144          >        jsr report_error
                       >
2a2b :                 >skip2258
                       >
2a2b : 68              >            pla         ;load status
2a2c : 48              >            pha
                       >            cmp_flag fzc
2a2d : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a2f : f003            >        beq skip2261
                       >        trap            ;failed not equal (non zero)
2a31 : 20d144          >        jsr report_error
                       >
2a34 :                 >skip2261
                       >
2a34 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2a35 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2a37 : 48              >            pha         ;use stack to load status
2a38 : a97e            >            lda #$7e     ;precharge accu
2a3a : 28              >            plp
                        
2a3b : d11d                     cmp (ind1),y
                                tst_a $7e,fn
2a3d : 08              >            php         ;save flags
2a3e : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2a40 : f003            >        beq skip2266
                       >        trap            ;failed not equal (non zero)
2a42 : 20d144          >        jsr report_error
                       >
2a45 :                 >skip2266
                       >
2a45 : 68              >            pla         ;load status
2a46 : 48              >            pha
                       >            cmp_flag fn
2a47 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a49 : f003            >        beq skip2269
                       >        trap            ;failed not equal (non zero)
2a4b : 20d144          >        jsr report_error
                       >
2a4e :                 >skip2269
                       >
2a4e : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2a4f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a51 : 48              >            pha         ;use stack to load status
2a52 : a980            >            lda #$80     ;precharge accu
2a54 : 28              >            plp
                        
2a55 : d11d                     cmp (ind1),y
                                tst_a $80,~fnz
2a57 : 08              >            php         ;save flags
2a58 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2a5a : f003            >        beq skip2274
                       >        trap            ;failed not equal (non zero)
2a5c : 20d144          >        jsr report_error
                       >
2a5f :                 >skip2274
                       >
2a5f : 68              >            pla         ;load status
2a60 : 48              >            pha
                       >            cmp_flag ~fnz
2a61 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a63 : f003            >        beq skip2277
                       >        trap            ;failed not equal (non zero)
2a65 : 20d144          >        jsr report_error
                       >
2a68 :                 >skip2277
                       >
2a68 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2a69 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a6b : 48              >            pha         ;use stack to load status
2a6c : a97f            >            lda #$7f     ;precharge accu
2a6e : 28              >            plp
                        
2a6f : d11d                     cmp (ind1),y
                                tst_a $7f,~fn
2a71 : 08              >            php         ;save flags
2a72 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2a74 : f003            >        beq skip2282
                       >        trap            ;failed not equal (non zero)
2a76 : 20d144          >        jsr report_error
                       >
2a79 :                 >skip2282
                       >
2a79 : 68              >            pla         ;load status
2a7a : 48              >            pha
                       >            cmp_flag ~fn
2a7b : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a7d : f003            >        beq skip2285
                       >        trap            ;failed not equal (non zero)
2a7f : 20d144          >        jsr report_error
                       >
2a82 :                 >skip2285
                       >
2a82 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2a83 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a85 : 48              >            pha         ;use stack to load status
2a86 : a97e            >            lda #$7e     ;precharge accu
2a88 : 28              >            plp
                        
2a89 : d11d                     cmp (ind1),y
                                tst_a $7e,~fzc
2a8b : 08              >            php         ;save flags
2a8c : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2a8e : f003            >        beq skip2290
                       >        trap            ;failed not equal (non zero)
2a90 : 20d144          >        jsr report_error
                       >
2a93 :                 >skip2290
                       >
2a93 : 68              >            pla         ;load status
2a94 : 48              >            pha
                       >            cmp_flag ~fzc
2a95 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2a97 : f003            >        beq skip2293
                       >        trap            ;failed not equal (non zero)
2a99 : 20d144          >        jsr report_error
                       >
2a9c :                 >skip2293
                       >
2a9c : 28              >            plp         ;restore status
                        
                                next_test
2a9d : ad0002          >            lda test_case   ;previous test
2aa0 : c91c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2aa2 : f003            >        beq skip2296
                       >        trap            ;failed not equal (non zero)
2aa4 : 20d144          >        jsr report_error
                       >
2aa7 :                 >skip2296
                       >
001d =                 >test_num = test_num + 1
2aa7 : a91d            >            lda #test_num   ;*** next tests' number
2aa9 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing shifts - ASL LSR ROL ROR all addressing modes
                        ; shifts - accumulator
2aac : a205                     ldx #5
2aae :                  tasl
                                set_ax zps,0
                       >            load_flag 0
2aae : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2ab0 : 48              >            pha         ;use stack to load status
2ab1 : b50a            >            lda zps,x    ;precharge accu
2ab3 : 28              >            plp
                        
2ab4 : 0a                       asl a
                                tst_ax rASL,fASL,0
2ab5 : 08              >            php         ;save flags
2ab6 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2ab9 : f003            >        beq skip2301
                       >        trap            ;failed not equal (non zero)
2abb : 20d144          >        jsr report_error
                       >
2abe :                 >skip2301
                       >
2abe : 68              >            pla         ;load status
                       >            eor_flag 0
2abf : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2ac1 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
2ac4 : f003            >        beq skip2304
                       >        trap            ;failed not equal (non zero)
2ac6 : 20d144          >        jsr report_error
                       >
2ac9 :                 >skip2304
                       >
                        
2ac9 : ca                       dex
2aca : 10e2                     bpl tasl
2acc : a205                     ldx #5
2ace :                  tasl1
                                set_ax zps,$ff
                       >            load_flag $ff
2ace : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2ad0 : 48              >            pha         ;use stack to load status
2ad1 : b50a            >            lda zps,x    ;precharge accu
2ad3 : 28              >            plp
                        
2ad4 : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
2ad5 : 08              >            php         ;save flags
2ad6 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2ad9 : f003            >        beq skip2309
                       >        trap            ;failed not equal (non zero)
2adb : 20d144          >        jsr report_error
                       >
2ade :                 >skip2309
                       >
2ade : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2adf : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2ae1 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
2ae4 : f003            >        beq skip2312
                       >        trap            ;failed not equal (non zero)
2ae6 : 20d144          >        jsr report_error
                       >
2ae9 :                 >skip2312
                       >
                        
2ae9 : ca                       dex
2aea : 10e2                     bpl tasl1
                        
2aec : a205                     ldx #5
2aee :                  tlsr
                                set_ax zps,0
                       >            load_flag 0
2aee : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2af0 : 48              >            pha         ;use stack to load status
2af1 : b50a            >            lda zps,x    ;precharge accu
2af3 : 28              >            plp
                        
2af4 : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
2af5 : 08              >            php         ;save flags
2af6 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2af9 : f003            >        beq skip2317
                       >        trap            ;failed not equal (non zero)
2afb : 20d144          >        jsr report_error
                       >
2afe :                 >skip2317
                       >
2afe : 68              >            pla         ;load status
                       >            eor_flag 0
2aff : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2b01 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
2b04 : f003            >        beq skip2320
                       >        trap            ;failed not equal (non zero)
2b06 : 20d144          >        jsr report_error
                       >
2b09 :                 >skip2320
                       >
                        
2b09 : ca                       dex
2b0a : 10e2                     bpl tlsr
2b0c : a205                     ldx #5
2b0e :                  tlsr1
                                set_ax zps,$ff
                       >            load_flag $ff
2b0e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b10 : 48              >            pha         ;use stack to load status
2b11 : b50a            >            lda zps,x    ;precharge accu
2b13 : 28              >            plp
                        
2b14 : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
2b15 : 08              >            php         ;save flags
2b16 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2b19 : f003            >        beq skip2325
                       >        trap            ;failed not equal (non zero)
2b1b : 20d144          >        jsr report_error
                       >
2b1e :                 >skip2325
                       >
2b1e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2b1f : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2b21 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
2b24 : f003            >        beq skip2328
                       >        trap            ;failed not equal (non zero)
2b26 : 20d144          >        jsr report_error
                       >
2b29 :                 >skip2328
                       >
                        
2b29 : ca                       dex
2b2a : 10e2                     bpl tlsr1
                        
2b2c : a205                     ldx #5
2b2e :                  trol
                                set_ax zps,0
                       >            load_flag 0
2b2e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2b30 : 48              >            pha         ;use stack to load status
2b31 : b50a            >            lda zps,x    ;precharge accu
2b33 : 28              >            plp
                        
2b34 : 2a                       rol a
                                tst_ax rROL,fROL,0
2b35 : 08              >            php         ;save flags
2b36 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2b39 : f003            >        beq skip2333
                       >        trap            ;failed not equal (non zero)
2b3b : 20d144          >        jsr report_error
                       >
2b3e :                 >skip2333
                       >
2b3e : 68              >            pla         ;load status
                       >            eor_flag 0
2b3f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2b41 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
2b44 : f003            >        beq skip2336
                       >        trap            ;failed not equal (non zero)
2b46 : 20d144          >        jsr report_error
                       >
2b49 :                 >skip2336
                       >
                        
2b49 : ca                       dex
2b4a : 10e2                     bpl trol
2b4c : a205                     ldx #5
2b4e :                  trol1
                                set_ax zps,$ff-fc
                       >            load_flag $ff-fc
2b4e : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2b50 : 48              >            pha         ;use stack to load status
2b51 : b50a            >            lda zps,x    ;precharge accu
2b53 : 28              >            plp
                        
2b54 : 2a                       rol a
                                tst_ax rROL,fROL,$ff-fnzc
2b55 : 08              >            php         ;save flags
2b56 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2b59 : f003            >        beq skip2341
                       >        trap            ;failed not equal (non zero)
2b5b : 20d144          >        jsr report_error
                       >
2b5e :                 >skip2341
                       >
2b5e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2b5f : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2b61 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
2b64 : f003            >        beq skip2344
                       >        trap            ;failed not equal (non zero)
2b66 : 20d144          >        jsr report_error
                       >
2b69 :                 >skip2344
                       >
                        
2b69 : ca                       dex
2b6a : 10e2                     bpl trol1
                        
2b6c : a205                     ldx #5
2b6e :                  trolc
                                set_ax zps,fc
                       >            load_flag fc
2b6e : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2b70 : 48              >            pha         ;use stack to load status
2b71 : b50a            >            lda zps,x    ;precharge accu
2b73 : 28              >            plp
                        
2b74 : 2a                       rol a
                                tst_ax rROLc,fROLc,0
2b75 : 08              >            php         ;save flags
2b76 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2b79 : f003            >        beq skip2349
                       >        trap            ;failed not equal (non zero)
2b7b : 20d144          >        jsr report_error
                       >
2b7e :                 >skip2349
                       >
2b7e : 68              >            pla         ;load status
                       >            eor_flag 0
2b7f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2b81 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
2b84 : f003            >        beq skip2352
                       >        trap            ;failed not equal (non zero)
2b86 : 20d144          >        jsr report_error
                       >
2b89 :                 >skip2352
                       >
                        
2b89 : ca                       dex
2b8a : 10e2                     bpl trolc
2b8c : a205                     ldx #5
2b8e :                  trolc1
                                set_ax zps,$ff
                       >            load_flag $ff
2b8e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b90 : 48              >            pha         ;use stack to load status
2b91 : b50a            >            lda zps,x    ;precharge accu
2b93 : 28              >            plp
                        
2b94 : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
2b95 : 08              >            php         ;save flags
2b96 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2b99 : f003            >        beq skip2357
                       >        trap            ;failed not equal (non zero)
2b9b : 20d144          >        jsr report_error
                       >
2b9e :                 >skip2357
                       >
2b9e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2b9f : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2ba1 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
2ba4 : f003            >        beq skip2360
                       >        trap            ;failed not equal (non zero)
2ba6 : 20d144          >        jsr report_error
                       >
2ba9 :                 >skip2360
                       >
                        
2ba9 : ca                       dex
2baa : 10e2                     bpl trolc1
                        
2bac : a205                     ldx #5
2bae :                  tror
                                set_ax zps,0
                       >            load_flag 0
2bae : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2bb0 : 48              >            pha         ;use stack to load status
2bb1 : b50a            >            lda zps,x    ;precharge accu
2bb3 : 28              >            plp
                        
2bb4 : 6a                       ror a
                                tst_ax rROR,fROR,0
2bb5 : 08              >            php         ;save flags
2bb6 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2bb9 : f003            >        beq skip2365
                       >        trap            ;failed not equal (non zero)
2bbb : 20d144          >        jsr report_error
                       >
2bbe :                 >skip2365
                       >
2bbe : 68              >            pla         ;load status
                       >            eor_flag 0
2bbf : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2bc1 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
2bc4 : f003            >        beq skip2368
                       >        trap            ;failed not equal (non zero)
2bc6 : 20d144          >        jsr report_error
                       >
2bc9 :                 >skip2368
                       >
                        
2bc9 : ca                       dex
2bca : 10e2                     bpl tror
2bcc : a205                     ldx #5
2bce :                  tror1
                                set_ax zps,$ff-fc
                       >            load_flag $ff-fc
2bce : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2bd0 : 48              >            pha         ;use stack to load status
2bd1 : b50a            >            lda zps,x    ;precharge accu
2bd3 : 28              >            plp
                        
2bd4 : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
2bd5 : 08              >            php         ;save flags
2bd6 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2bd9 : f003            >        beq skip2373
                       >        trap            ;failed not equal (non zero)
2bdb : 20d144          >        jsr report_error
                       >
2bde :                 >skip2373
                       >
2bde : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2bdf : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2be1 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
2be4 : f003            >        beq skip2376
                       >        trap            ;failed not equal (non zero)
2be6 : 20d144          >        jsr report_error
                       >
2be9 :                 >skip2376
                       >
                        
2be9 : ca                       dex
2bea : 10e2                     bpl tror1
                        
2bec : a205                     ldx #5
2bee :                  trorc
                                set_ax zps,fc
                       >            load_flag fc
2bee : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2bf0 : 48              >            pha         ;use stack to load status
2bf1 : b50a            >            lda zps,x    ;precharge accu
2bf3 : 28              >            plp
                        
2bf4 : 6a                       ror a
                                tst_ax rRORc,fRORc,0
2bf5 : 08              >            php         ;save flags
2bf6 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2bf9 : f003            >        beq skip2381
                       >        trap            ;failed not equal (non zero)
2bfb : 20d144          >        jsr report_error
                       >
2bfe :                 >skip2381
                       >
2bfe : 68              >            pla         ;load status
                       >            eor_flag 0
2bff : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2c01 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
2c04 : f003            >        beq skip2384
                       >        trap            ;failed not equal (non zero)
2c06 : 20d144          >        jsr report_error
                       >
2c09 :                 >skip2384
                       >
                        
2c09 : ca                       dex
2c0a : 10e2                     bpl trorc
2c0c : a205                     ldx #5
2c0e :                  trorc1
                                set_ax zps,$ff
                       >            load_flag $ff
2c0e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2c10 : 48              >            pha         ;use stack to load status
2c11 : b50a            >            lda zps,x    ;precharge accu
2c13 : 28              >            plp
                        
2c14 : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
2c15 : 08              >            php         ;save flags
2c16 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2c19 : f003            >        beq skip2389
                       >        trap            ;failed not equal (non zero)
2c1b : 20d144          >        jsr report_error
                       >
2c1e :                 >skip2389
                       >
2c1e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2c1f : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2c21 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
2c24 : f003            >        beq skip2392
                       >        trap            ;failed not equal (non zero)
2c26 : 20d144          >        jsr report_error
                       >
2c29 :                 >skip2392
                       >
                        
2c29 : ca                       dex
2c2a : 10e2                     bpl trorc1
                                next_test
2c2c : ad0002          >            lda test_case   ;previous test
2c2f : c91d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2c31 : f003            >        beq skip2395
                       >        trap            ;failed not equal (non zero)
2c33 : 20d144          >        jsr report_error
                       >
2c36 :                 >skip2395
                       >
001e =                 >test_num = test_num + 1
2c36 : a91e            >            lda #test_num   ;*** next tests' number
2c38 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zeropage
2c3b : a205                     ldx #5
2c3d :                  tasl2
                                set_z zps,0
                       >            load_flag 0
2c3d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2c3f : 48              >            pha         ;use stack to load status
2c40 : b50a            >            lda zps,x    ;load to zeropage
2c42 : 8503            >            sta zpt
2c44 : 28              >            plp
                        
2c45 : 0603                     asl zpt
                                tst_z rASL,fASL,0
2c47 : 08              >            php         ;save flags
2c48 : a503            >            lda zpt
2c4a : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2c4d : f003            >        beq skip2400
                       >        trap            ;failed not equal (non zero)
2c4f : 20d144          >        jsr report_error
                       >
2c52 :                 >skip2400
                       >
2c52 : 68              >            pla         ;load status
                       >            eor_flag 0
2c53 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2c55 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2c58 : f003            >        beq skip2403
                       >        trap            ;failed not equal (non zero)
2c5a : 20d144          >        jsr report_error
                       >
2c5d :                 >skip2403
                       >
                        
2c5d : ca                       dex
2c5e : 10dd                     bpl tasl2
2c60 : a205                     ldx #5
2c62 :                  tasl3
                                set_z zps,$ff
                       >            load_flag $ff
2c62 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2c64 : 48              >            pha         ;use stack to load status
2c65 : b50a            >            lda zps,x    ;load to zeropage
2c67 : 8503            >            sta zpt
2c69 : 28              >            plp
                        
2c6a : 0603                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
2c6c : 08              >            php         ;save flags
2c6d : a503            >            lda zpt
2c6f : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2c72 : f003            >        beq skip2408
                       >        trap            ;failed not equal (non zero)
2c74 : 20d144          >        jsr report_error
                       >
2c77 :                 >skip2408
                       >
2c77 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2c78 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2c7a : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2c7d : f003            >        beq skip2411
                       >        trap            ;failed not equal (non zero)
2c7f : 20d144          >        jsr report_error
                       >
2c82 :                 >skip2411
                       >
                        
2c82 : ca                       dex
2c83 : 10dd                     bpl tasl3
                        
2c85 : a205                     ldx #5
2c87 :                  tlsr2
                                set_z zps,0
                       >            load_flag 0
2c87 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2c89 : 48              >            pha         ;use stack to load status
2c8a : b50a            >            lda zps,x    ;load to zeropage
2c8c : 8503            >            sta zpt
2c8e : 28              >            plp
                        
2c8f : 4603                     lsr zpt
                                tst_z rLSR,fLSR,0
2c91 : 08              >            php         ;save flags
2c92 : a503            >            lda zpt
2c94 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2c97 : f003            >        beq skip2416
                       >        trap            ;failed not equal (non zero)
2c99 : 20d144          >        jsr report_error
                       >
2c9c :                 >skip2416
                       >
2c9c : 68              >            pla         ;load status
                       >            eor_flag 0
2c9d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2c9f : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2ca2 : f003            >        beq skip2419
                       >        trap            ;failed not equal (non zero)
2ca4 : 20d144          >        jsr report_error
                       >
2ca7 :                 >skip2419
                       >
                        
2ca7 : ca                       dex
2ca8 : 10dd                     bpl tlsr2
2caa : a205                     ldx #5
2cac :                  tlsr3
                                set_z zps,$ff
                       >            load_flag $ff
2cac : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2cae : 48              >            pha         ;use stack to load status
2caf : b50a            >            lda zps,x    ;load to zeropage
2cb1 : 8503            >            sta zpt
2cb3 : 28              >            plp
                        
2cb4 : 4603                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
2cb6 : 08              >            php         ;save flags
2cb7 : a503            >            lda zpt
2cb9 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2cbc : f003            >        beq skip2424
                       >        trap            ;failed not equal (non zero)
2cbe : 20d144          >        jsr report_error
                       >
2cc1 :                 >skip2424
                       >
2cc1 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2cc2 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2cc4 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2cc7 : f003            >        beq skip2427
                       >        trap            ;failed not equal (non zero)
2cc9 : 20d144          >        jsr report_error
                       >
2ccc :                 >skip2427
                       >
                        
2ccc : ca                       dex
2ccd : 10dd                     bpl tlsr3
                        
2ccf : a205                     ldx #5
2cd1 :                  trol2
                                set_z zps,0
                       >            load_flag 0
2cd1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2cd3 : 48              >            pha         ;use stack to load status
2cd4 : b50a            >            lda zps,x    ;load to zeropage
2cd6 : 8503            >            sta zpt
2cd8 : 28              >            plp
                        
2cd9 : 2603                     rol zpt
                                tst_z rROL,fROL,0
2cdb : 08              >            php         ;save flags
2cdc : a503            >            lda zpt
2cde : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2ce1 : f003            >        beq skip2432
                       >        trap            ;failed not equal (non zero)
2ce3 : 20d144          >        jsr report_error
                       >
2ce6 :                 >skip2432
                       >
2ce6 : 68              >            pla         ;load status
                       >            eor_flag 0
2ce7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2ce9 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2cec : f003            >        beq skip2435
                       >        trap            ;failed not equal (non zero)
2cee : 20d144          >        jsr report_error
                       >
2cf1 :                 >skip2435
                       >
                        
2cf1 : ca                       dex
2cf2 : 10dd                     bpl trol2
2cf4 : a205                     ldx #5
2cf6 :                  trol3
                                set_z zps,$ff-fc
                       >            load_flag $ff-fc
2cf6 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2cf8 : 48              >            pha         ;use stack to load status
2cf9 : b50a            >            lda zps,x    ;load to zeropage
2cfb : 8503            >            sta zpt
2cfd : 28              >            plp
                        
2cfe : 2603                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
2d00 : 08              >            php         ;save flags
2d01 : a503            >            lda zpt
2d03 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2d06 : f003            >        beq skip2440
                       >        trap            ;failed not equal (non zero)
2d08 : 20d144          >        jsr report_error
                       >
2d0b :                 >skip2440
                       >
2d0b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2d0c : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2d0e : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2d11 : f003            >        beq skip2443
                       >        trap            ;failed not equal (non zero)
2d13 : 20d144          >        jsr report_error
                       >
2d16 :                 >skip2443
                       >
                        
2d16 : ca                       dex
2d17 : 10dd                     bpl trol3
                        
2d19 : a205                     ldx #5
2d1b :                  trolc2
                                set_z zps,fc
                       >            load_flag fc
2d1b : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2d1d : 48              >            pha         ;use stack to load status
2d1e : b50a            >            lda zps,x    ;load to zeropage
2d20 : 8503            >            sta zpt
2d22 : 28              >            plp
                        
2d23 : 2603                     rol zpt
                                tst_z rROLc,fROLc,0
2d25 : 08              >            php         ;save flags
2d26 : a503            >            lda zpt
2d28 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2d2b : f003            >        beq skip2448
                       >        trap            ;failed not equal (non zero)
2d2d : 20d144          >        jsr report_error
                       >
2d30 :                 >skip2448
                       >
2d30 : 68              >            pla         ;load status
                       >            eor_flag 0
2d31 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2d33 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2d36 : f003            >        beq skip2451
                       >        trap            ;failed not equal (non zero)
2d38 : 20d144          >        jsr report_error
                       >
2d3b :                 >skip2451
                       >
                        
2d3b : ca                       dex
2d3c : 10dd                     bpl trolc2
2d3e : a205                     ldx #5
2d40 :                  trolc3
                                set_z zps,$ff
                       >            load_flag $ff
2d40 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2d42 : 48              >            pha         ;use stack to load status
2d43 : b50a            >            lda zps,x    ;load to zeropage
2d45 : 8503            >            sta zpt
2d47 : 28              >            plp
                        
2d48 : 2603                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
2d4a : 08              >            php         ;save flags
2d4b : a503            >            lda zpt
2d4d : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2d50 : f003            >        beq skip2456
                       >        trap            ;failed not equal (non zero)
2d52 : 20d144          >        jsr report_error
                       >
2d55 :                 >skip2456
                       >
2d55 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2d56 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2d58 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2d5b : f003            >        beq skip2459
                       >        trap            ;failed not equal (non zero)
2d5d : 20d144          >        jsr report_error
                       >
2d60 :                 >skip2459
                       >
                        
2d60 : ca                       dex
2d61 : 10dd                     bpl trolc3
                        
2d63 : a205                     ldx #5
2d65 :                  tror2
                                set_z zps,0
                       >            load_flag 0
2d65 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2d67 : 48              >            pha         ;use stack to load status
2d68 : b50a            >            lda zps,x    ;load to zeropage
2d6a : 8503            >            sta zpt
2d6c : 28              >            plp
                        
2d6d : 6603                     ror zpt
                                tst_z rROR,fROR,0
2d6f : 08              >            php         ;save flags
2d70 : a503            >            lda zpt
2d72 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2d75 : f003            >        beq skip2464
                       >        trap            ;failed not equal (non zero)
2d77 : 20d144          >        jsr report_error
                       >
2d7a :                 >skip2464
                       >
2d7a : 68              >            pla         ;load status
                       >            eor_flag 0
2d7b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2d7d : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2d80 : f003            >        beq skip2467
                       >        trap            ;failed not equal (non zero)
2d82 : 20d144          >        jsr report_error
                       >
2d85 :                 >skip2467
                       >
                        
2d85 : ca                       dex
2d86 : 10dd                     bpl tror2
2d88 : a205                     ldx #5
2d8a :                  tror3
                                set_z zps,$ff-fc
                       >            load_flag $ff-fc
2d8a : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2d8c : 48              >            pha         ;use stack to load status
2d8d : b50a            >            lda zps,x    ;load to zeropage
2d8f : 8503            >            sta zpt
2d91 : 28              >            plp
                        
2d92 : 6603                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
2d94 : 08              >            php         ;save flags
2d95 : a503            >            lda zpt
2d97 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2d9a : f003            >        beq skip2472
                       >        trap            ;failed not equal (non zero)
2d9c : 20d144          >        jsr report_error
                       >
2d9f :                 >skip2472
                       >
2d9f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2da0 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2da2 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2da5 : f003            >        beq skip2475
                       >        trap            ;failed not equal (non zero)
2da7 : 20d144          >        jsr report_error
                       >
2daa :                 >skip2475
                       >
                        
2daa : ca                       dex
2dab : 10dd                     bpl tror3
                        
2dad : a205                     ldx #5
2daf :                  trorc2
                                set_z zps,fc
                       >            load_flag fc
2daf : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2db1 : 48              >            pha         ;use stack to load status
2db2 : b50a            >            lda zps,x    ;load to zeropage
2db4 : 8503            >            sta zpt
2db6 : 28              >            plp
                        
2db7 : 6603                     ror zpt
                                tst_z rRORc,fRORc,0
2db9 : 08              >            php         ;save flags
2dba : a503            >            lda zpt
2dbc : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2dbf : f003            >        beq skip2480
                       >        trap            ;failed not equal (non zero)
2dc1 : 20d144          >        jsr report_error
                       >
2dc4 :                 >skip2480
                       >
2dc4 : 68              >            pla         ;load status
                       >            eor_flag 0
2dc5 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2dc7 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2dca : f003            >        beq skip2483
                       >        trap            ;failed not equal (non zero)
2dcc : 20d144          >        jsr report_error
                       >
2dcf :                 >skip2483
                       >
                        
2dcf : ca                       dex
2dd0 : 10dd                     bpl trorc2
2dd2 : a205                     ldx #5
2dd4 :                  trorc3
                                set_z zps,$ff
                       >            load_flag $ff
2dd4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2dd6 : 48              >            pha         ;use stack to load status
2dd7 : b50a            >            lda zps,x    ;load to zeropage
2dd9 : 8503            >            sta zpt
2ddb : 28              >            plp
                        
2ddc : 6603                     ror zpt
                                tst_z rRORc,fRORc,$ff-fnzc
2dde : 08              >            php         ;save flags
2ddf : a503            >            lda zpt
2de1 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2de4 : f003            >        beq skip2488
                       >        trap            ;failed not equal (non zero)
2de6 : 20d144          >        jsr report_error
                       >
2de9 :                 >skip2488
                       >
2de9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2dea : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2dec : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2def : f003            >        beq skip2491
                       >        trap            ;failed not equal (non zero)
2df1 : 20d144          >        jsr report_error
                       >
2df4 :                 >skip2491
                       >
                        
2df4 : ca                       dex
2df5 : 10dd                     bpl trorc3
                                next_test
2df7 : ad0002          >            lda test_case   ;previous test
2dfa : c91e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2dfc : f003            >        beq skip2494
                       >        trap            ;failed not equal (non zero)
2dfe : 20d144          >        jsr report_error
                       >
2e01 :                 >skip2494
                       >
001f =                 >test_num = test_num + 1
2e01 : a91f            >            lda #test_num   ;*** next tests' number
2e03 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - absolute
2e06 : a205                     ldx #5
2e08 :                  tasl4
                                set_abs zps,0
                       >            load_flag 0
2e08 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2e0a : 48              >            pha         ;use stack to load status
2e0b : b50a            >            lda zps,x    ;load to memory
2e0d : 8d0302          >            sta abst
2e10 : 28              >            plp
                        
2e11 : 0e0302                   asl abst
                                tst_abs rASL,fASL,0
2e14 : 08              >            php         ;save flags
2e15 : ad0302          >            lda abst
2e18 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2e1b : f003            >        beq skip2499
                       >        trap            ;failed not equal (non zero)
2e1d : 20d144          >        jsr report_error
                       >
2e20 :                 >skip2499
                       >
2e20 : 68              >            pla         ;load status
                       >            eor_flag 0
2e21 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2e23 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2e26 : f003            >        beq skip2502
                       >        trap            ;failed not equal (non zero)
2e28 : 20d144          >        jsr report_error
                       >
2e2b :                 >skip2502
                       >
                        
2e2b : ca                       dex
2e2c : 10da                     bpl tasl4
2e2e : a205                     ldx #5
2e30 :                  tasl5
                                set_abs zps,$ff
                       >            load_flag $ff
2e30 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2e32 : 48              >            pha         ;use stack to load status
2e33 : b50a            >            lda zps,x    ;load to memory
2e35 : 8d0302          >            sta abst
2e38 : 28              >            plp
                        
2e39 : 0e0302                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
2e3c : 08              >            php         ;save flags
2e3d : ad0302          >            lda abst
2e40 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2e43 : f003            >        beq skip2507
                       >        trap            ;failed not equal (non zero)
2e45 : 20d144          >        jsr report_error
                       >
2e48 :                 >skip2507
                       >
2e48 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2e49 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2e4b : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2e4e : f003            >        beq skip2510
                       >        trap            ;failed not equal (non zero)
2e50 : 20d144          >        jsr report_error
                       >
2e53 :                 >skip2510
                       >
                        
2e53 : ca                       dex
2e54 : 10da                     bpl tasl5
                        
2e56 : a205                     ldx #5
2e58 :                  tlsr4
                                set_abs zps,0
                       >            load_flag 0
2e58 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2e5a : 48              >            pha         ;use stack to load status
2e5b : b50a            >            lda zps,x    ;load to memory
2e5d : 8d0302          >            sta abst
2e60 : 28              >            plp
                        
2e61 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,0
2e64 : 08              >            php         ;save flags
2e65 : ad0302          >            lda abst
2e68 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2e6b : f003            >        beq skip2515
                       >        trap            ;failed not equal (non zero)
2e6d : 20d144          >        jsr report_error
                       >
2e70 :                 >skip2515
                       >
2e70 : 68              >            pla         ;load status
                       >            eor_flag 0
2e71 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2e73 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2e76 : f003            >        beq skip2518
                       >        trap            ;failed not equal (non zero)
2e78 : 20d144          >        jsr report_error
                       >
2e7b :                 >skip2518
                       >
                        
2e7b : ca                       dex
2e7c : 10da                     bpl tlsr4
2e7e : a205                     ldx #5
2e80 :                  tlsr5
                                set_abs zps,$ff
                       >            load_flag $ff
2e80 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2e82 : 48              >            pha         ;use stack to load status
2e83 : b50a            >            lda zps,x    ;load to memory
2e85 : 8d0302          >            sta abst
2e88 : 28              >            plp
                        
2e89 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,$ff-fnzc
2e8c : 08              >            php         ;save flags
2e8d : ad0302          >            lda abst
2e90 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2e93 : f003            >        beq skip2523
                       >        trap            ;failed not equal (non zero)
2e95 : 20d144          >        jsr report_error
                       >
2e98 :                 >skip2523
                       >
2e98 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2e99 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2e9b : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2e9e : f003            >        beq skip2526
                       >        trap            ;failed not equal (non zero)
2ea0 : 20d144          >        jsr report_error
                       >
2ea3 :                 >skip2526
                       >
                        
2ea3 : ca                       dex
2ea4 : 10da                     bpl tlsr5
                        
2ea6 : a205                     ldx #5
2ea8 :                  trol4
                                set_abs zps,0
                       >            load_flag 0
2ea8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2eaa : 48              >            pha         ;use stack to load status
2eab : b50a            >            lda zps,x    ;load to memory
2ead : 8d0302          >            sta abst
2eb0 : 28              >            plp
                        
2eb1 : 2e0302                   rol abst
                                tst_abs rROL,fROL,0
2eb4 : 08              >            php         ;save flags
2eb5 : ad0302          >            lda abst
2eb8 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2ebb : f003            >        beq skip2531
                       >        trap            ;failed not equal (non zero)
2ebd : 20d144          >        jsr report_error
                       >
2ec0 :                 >skip2531
                       >
2ec0 : 68              >            pla         ;load status
                       >            eor_flag 0
2ec1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2ec3 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2ec6 : f003            >        beq skip2534
                       >        trap            ;failed not equal (non zero)
2ec8 : 20d144          >        jsr report_error
                       >
2ecb :                 >skip2534
                       >
                        
2ecb : ca                       dex
2ecc : 10da                     bpl trol4
2ece : a205                     ldx #5
2ed0 :                  trol5
                                set_abs zps,$ff-fc
                       >            load_flag $ff-fc
2ed0 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2ed2 : 48              >            pha         ;use stack to load status
2ed3 : b50a            >            lda zps,x    ;load to memory
2ed5 : 8d0302          >            sta abst
2ed8 : 28              >            plp
                        
2ed9 : 2e0302                   rol abst
                                tst_abs rROL,fROL,$ff-fnzc
2edc : 08              >            php         ;save flags
2edd : ad0302          >            lda abst
2ee0 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2ee3 : f003            >        beq skip2539
                       >        trap            ;failed not equal (non zero)
2ee5 : 20d144          >        jsr report_error
                       >
2ee8 :                 >skip2539
                       >
2ee8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2ee9 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2eeb : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2eee : f003            >        beq skip2542
                       >        trap            ;failed not equal (non zero)
2ef0 : 20d144          >        jsr report_error
                       >
2ef3 :                 >skip2542
                       >
                        
2ef3 : ca                       dex
2ef4 : 10da                     bpl trol5
                        
2ef6 : a205                     ldx #5
2ef8 :                  trolc4
                                set_abs zps,fc
                       >            load_flag fc
2ef8 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2efa : 48              >            pha         ;use stack to load status
2efb : b50a            >            lda zps,x    ;load to memory
2efd : 8d0302          >            sta abst
2f00 : 28              >            plp
                        
2f01 : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,0
2f04 : 08              >            php         ;save flags
2f05 : ad0302          >            lda abst
2f08 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2f0b : f003            >        beq skip2547
                       >        trap            ;failed not equal (non zero)
2f0d : 20d144          >        jsr report_error
                       >
2f10 :                 >skip2547
                       >
2f10 : 68              >            pla         ;load status
                       >            eor_flag 0
2f11 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2f13 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2f16 : f003            >        beq skip2550
                       >        trap            ;failed not equal (non zero)
2f18 : 20d144          >        jsr report_error
                       >
2f1b :                 >skip2550
                       >
                        
2f1b : ca                       dex
2f1c : 10da                     bpl trolc4
2f1e : a205                     ldx #5
2f20 :                  trolc5
                                set_abs zps,$ff
                       >            load_flag $ff
2f20 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2f22 : 48              >            pha         ;use stack to load status
2f23 : b50a            >            lda zps,x    ;load to memory
2f25 : 8d0302          >            sta abst
2f28 : 28              >            plp
                        
2f29 : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
2f2c : 08              >            php         ;save flags
2f2d : ad0302          >            lda abst
2f30 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2f33 : f003            >        beq skip2555
                       >        trap            ;failed not equal (non zero)
2f35 : 20d144          >        jsr report_error
                       >
2f38 :                 >skip2555
                       >
2f38 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2f39 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2f3b : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2f3e : f003            >        beq skip2558
                       >        trap            ;failed not equal (non zero)
2f40 : 20d144          >        jsr report_error
                       >
2f43 :                 >skip2558
                       >
                        
2f43 : ca                       dex
2f44 : 10da                     bpl trolc5
                        
2f46 : a205                     ldx #5
2f48 :                  tror4
                                set_abs zps,0
                       >            load_flag 0
2f48 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2f4a : 48              >            pha         ;use stack to load status
2f4b : b50a            >            lda zps,x    ;load to memory
2f4d : 8d0302          >            sta abst
2f50 : 28              >            plp
                        
2f51 : 6e0302                   ror abst
                                tst_abs rROR,fROR,0
2f54 : 08              >            php         ;save flags
2f55 : ad0302          >            lda abst
2f58 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2f5b : f003            >        beq skip2563
                       >        trap            ;failed not equal (non zero)
2f5d : 20d144          >        jsr report_error
                       >
2f60 :                 >skip2563
                       >
2f60 : 68              >            pla         ;load status
                       >            eor_flag 0
2f61 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2f63 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2f66 : f003            >        beq skip2566
                       >        trap            ;failed not equal (non zero)
2f68 : 20d144          >        jsr report_error
                       >
2f6b :                 >skip2566
                       >
                        
2f6b : ca                       dex
2f6c : 10da                     bpl tror4
2f6e : a205                     ldx #5
2f70 :                  tror5
                                set_abs zps,$ff-fc
                       >            load_flag $ff-fc
2f70 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2f72 : 48              >            pha         ;use stack to load status
2f73 : b50a            >            lda zps,x    ;load to memory
2f75 : 8d0302          >            sta abst
2f78 : 28              >            plp
                        
2f79 : 6e0302                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
2f7c : 08              >            php         ;save flags
2f7d : ad0302          >            lda abst
2f80 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2f83 : f003            >        beq skip2571
                       >        trap            ;failed not equal (non zero)
2f85 : 20d144          >        jsr report_error
                       >
2f88 :                 >skip2571
                       >
2f88 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2f89 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2f8b : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2f8e : f003            >        beq skip2574
                       >        trap            ;failed not equal (non zero)
2f90 : 20d144          >        jsr report_error
                       >
2f93 :                 >skip2574
                       >
                        
2f93 : ca                       dex
2f94 : 10da                     bpl tror5
                        
2f96 : a205                     ldx #5
2f98 :                  trorc4
                                set_abs zps,fc
                       >            load_flag fc
2f98 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2f9a : 48              >            pha         ;use stack to load status
2f9b : b50a            >            lda zps,x    ;load to memory
2f9d : 8d0302          >            sta abst
2fa0 : 28              >            plp
                        
2fa1 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,0
2fa4 : 08              >            php         ;save flags
2fa5 : ad0302          >            lda abst
2fa8 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2fab : f003            >        beq skip2579
                       >        trap            ;failed not equal (non zero)
2fad : 20d144          >        jsr report_error
                       >
2fb0 :                 >skip2579
                       >
2fb0 : 68              >            pla         ;load status
                       >            eor_flag 0
2fb1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
2fb3 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2fb6 : f003            >        beq skip2582
                       >        trap            ;failed not equal (non zero)
2fb8 : 20d144          >        jsr report_error
                       >
2fbb :                 >skip2582
                       >
                        
2fbb : ca                       dex
2fbc : 10da                     bpl trorc4
2fbe : a205                     ldx #5
2fc0 :                  trorc5
                                set_abs zps,$ff
                       >            load_flag $ff
2fc0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2fc2 : 48              >            pha         ;use stack to load status
2fc3 : b50a            >            lda zps,x    ;load to memory
2fc5 : 8d0302          >            sta abst
2fc8 : 28              >            plp
                        
2fc9 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
2fcc : 08              >            php         ;save flags
2fcd : ad0302          >            lda abst
2fd0 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2fd3 : f003            >        beq skip2587
                       >        trap            ;failed not equal (non zero)
2fd5 : 20d144          >        jsr report_error
                       >
2fd8 :                 >skip2587
                       >
2fd8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2fd9 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
2fdb : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2fde : f003            >        beq skip2590
                       >        trap            ;failed not equal (non zero)
2fe0 : 20d144          >        jsr report_error
                       >
2fe3 :                 >skip2590
                       >
                        
2fe3 : ca                       dex
2fe4 : 10da                     bpl trorc5
                                next_test
2fe6 : ad0002          >            lda test_case   ;previous test
2fe9 : c91f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2feb : f003            >        beq skip2593
                       >        trap            ;failed not equal (non zero)
2fed : 20d144          >        jsr report_error
                       >
2ff0 :                 >skip2593
                       >
0020 =                 >test_num = test_num + 1
2ff0 : a920            >            lda #test_num   ;*** next tests' number
2ff2 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zp indexed
2ff5 : a205                     ldx #5
2ff7 :                  tasl6
                                set_zx zps,0
                       >            load_flag 0
2ff7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2ff9 : 48              >            pha         ;use stack to load status
2ffa : b50a            >            lda zps,x    ;load to indexed zeropage
2ffc : 9503            >            sta zpt,x
2ffe : 28              >            plp
                        
2fff : 1603                     asl zpt,x
                                tst_zx rASL,fASL,0
3001 : 08              >            php         ;save flags
3002 : b503            >            lda zpt,x
3004 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
3007 : f003            >        beq skip2598
                       >        trap            ;failed not equal (non zero)
3009 : 20d144          >        jsr report_error
                       >
300c :                 >skip2598
                       >
300c : 68              >            pla         ;load status
                       >            eor_flag 0
300d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
300f : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
3012 : f003            >        beq skip2601
                       >        trap            ;failed not equal (non zero)
3014 : 20d144          >        jsr report_error
                       >
3017 :                 >skip2601
                       >
                        
3017 : ca                       dex
3018 : 10dd                     bpl tasl6
301a : a205                     ldx #5
301c :                  tasl7
                                set_zx zps,$ff
                       >            load_flag $ff
301c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
301e : 48              >            pha         ;use stack to load status
301f : b50a            >            lda zps,x    ;load to indexed zeropage
3021 : 9503            >            sta zpt,x
3023 : 28              >            plp
                        
3024 : 1603                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
3026 : 08              >            php         ;save flags
3027 : b503            >            lda zpt,x
3029 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
302c : f003            >        beq skip2606
                       >        trap            ;failed not equal (non zero)
302e : 20d144          >        jsr report_error
                       >
3031 :                 >skip2606
                       >
3031 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
3032 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
3034 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
3037 : f003            >        beq skip2609
                       >        trap            ;failed not equal (non zero)
3039 : 20d144          >        jsr report_error
                       >
303c :                 >skip2609
                       >
                        
303c : ca                       dex
303d : 10dd                     bpl tasl7
                        
303f : a205                     ldx #5
3041 :                  tlsr6
                                set_zx zps,0
                       >            load_flag 0
3041 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3043 : 48              >            pha         ;use stack to load status
3044 : b50a            >            lda zps,x    ;load to indexed zeropage
3046 : 9503            >            sta zpt,x
3048 : 28              >            plp
                        
3049 : 5603                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
304b : 08              >            php         ;save flags
304c : b503            >            lda zpt,x
304e : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
3051 : f003            >        beq skip2614
                       >        trap            ;failed not equal (non zero)
3053 : 20d144          >        jsr report_error
                       >
3056 :                 >skip2614
                       >
3056 : 68              >            pla         ;load status
                       >            eor_flag 0
3057 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3059 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
305c : f003            >        beq skip2617
                       >        trap            ;failed not equal (non zero)
305e : 20d144          >        jsr report_error
                       >
3061 :                 >skip2617
                       >
                        
3061 : ca                       dex
3062 : 10dd                     bpl tlsr6
3064 : a205                     ldx #5
3066 :                  tlsr7
                                set_zx zps,$ff
                       >            load_flag $ff
3066 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3068 : 48              >            pha         ;use stack to load status
3069 : b50a            >            lda zps,x    ;load to indexed zeropage
306b : 9503            >            sta zpt,x
306d : 28              >            plp
                        
306e : 5603                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
3070 : 08              >            php         ;save flags
3071 : b503            >            lda zpt,x
3073 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
3076 : f003            >        beq skip2622
                       >        trap            ;failed not equal (non zero)
3078 : 20d144          >        jsr report_error
                       >
307b :                 >skip2622
                       >
307b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
307c : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
307e : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
3081 : f003            >        beq skip2625
                       >        trap            ;failed not equal (non zero)
3083 : 20d144          >        jsr report_error
                       >
3086 :                 >skip2625
                       >
                        
3086 : ca                       dex
3087 : 10dd                     bpl tlsr7
                        
3089 : a205                     ldx #5
308b :                  trol6
                                set_zx zps,0
                       >            load_flag 0
308b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
308d : 48              >            pha         ;use stack to load status
308e : b50a            >            lda zps,x    ;load to indexed zeropage
3090 : 9503            >            sta zpt,x
3092 : 28              >            plp
                        
3093 : 3603                     rol zpt,x
                                tst_zx rROL,fROL,0
3095 : 08              >            php         ;save flags
3096 : b503            >            lda zpt,x
3098 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
309b : f003            >        beq skip2630
                       >        trap            ;failed not equal (non zero)
309d : 20d144          >        jsr report_error
                       >
30a0 :                 >skip2630
                       >
30a0 : 68              >            pla         ;load status
                       >            eor_flag 0
30a1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
30a3 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
30a6 : f003            >        beq skip2633
                       >        trap            ;failed not equal (non zero)
30a8 : 20d144          >        jsr report_error
                       >
30ab :                 >skip2633
                       >
                        
30ab : ca                       dex
30ac : 10dd                     bpl trol6
30ae : a205                     ldx #5
30b0 :                  trol7
                                set_zx zps,$ff-fc
                       >            load_flag $ff-fc
30b0 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
30b2 : 48              >            pha         ;use stack to load status
30b3 : b50a            >            lda zps,x    ;load to indexed zeropage
30b5 : 9503            >            sta zpt,x
30b7 : 28              >            plp
                        
30b8 : 3603                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
30ba : 08              >            php         ;save flags
30bb : b503            >            lda zpt,x
30bd : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
30c0 : f003            >        beq skip2638
                       >        trap            ;failed not equal (non zero)
30c2 : 20d144          >        jsr report_error
                       >
30c5 :                 >skip2638
                       >
30c5 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
30c6 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
30c8 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
30cb : f003            >        beq skip2641
                       >        trap            ;failed not equal (non zero)
30cd : 20d144          >        jsr report_error
                       >
30d0 :                 >skip2641
                       >
                        
30d0 : ca                       dex
30d1 : 10dd                     bpl trol7
                        
30d3 : a205                     ldx #5
30d5 :                  trolc6
                                set_zx zps,fc
                       >            load_flag fc
30d5 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
30d7 : 48              >            pha         ;use stack to load status
30d8 : b50a            >            lda zps,x    ;load to indexed zeropage
30da : 9503            >            sta zpt,x
30dc : 28              >            plp
                        
30dd : 3603                     rol zpt,x
                                tst_zx rROLc,fROLc,0
30df : 08              >            php         ;save flags
30e0 : b503            >            lda zpt,x
30e2 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
30e5 : f003            >        beq skip2646
                       >        trap            ;failed not equal (non zero)
30e7 : 20d144          >        jsr report_error
                       >
30ea :                 >skip2646
                       >
30ea : 68              >            pla         ;load status
                       >            eor_flag 0
30eb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
30ed : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
30f0 : f003            >        beq skip2649
                       >        trap            ;failed not equal (non zero)
30f2 : 20d144          >        jsr report_error
                       >
30f5 :                 >skip2649
                       >
                        
30f5 : ca                       dex
30f6 : 10dd                     bpl trolc6
30f8 : a205                     ldx #5
30fa :                  trolc7
                                set_zx zps,$ff
                       >            load_flag $ff
30fa : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
30fc : 48              >            pha         ;use stack to load status
30fd : b50a            >            lda zps,x    ;load to indexed zeropage
30ff : 9503            >            sta zpt,x
3101 : 28              >            plp
                        
3102 : 3603                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
3104 : 08              >            php         ;save flags
3105 : b503            >            lda zpt,x
3107 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
310a : f003            >        beq skip2654
                       >        trap            ;failed not equal (non zero)
310c : 20d144          >        jsr report_error
                       >
310f :                 >skip2654
                       >
310f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
3110 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
3112 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
3115 : f003            >        beq skip2657
                       >        trap            ;failed not equal (non zero)
3117 : 20d144          >        jsr report_error
                       >
311a :                 >skip2657
                       >
                        
311a : ca                       dex
311b : 10dd                     bpl trolc7
                        
311d : a205                     ldx #5
311f :                  tror6
                                set_zx zps,0
                       >            load_flag 0
311f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3121 : 48              >            pha         ;use stack to load status
3122 : b50a            >            lda zps,x    ;load to indexed zeropage
3124 : 9503            >            sta zpt,x
3126 : 28              >            plp
                        
3127 : 7603                     ror zpt,x
                                tst_zx rROR,fROR,0
3129 : 08              >            php         ;save flags
312a : b503            >            lda zpt,x
312c : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
312f : f003            >        beq skip2662
                       >        trap            ;failed not equal (non zero)
3131 : 20d144          >        jsr report_error
                       >
3134 :                 >skip2662
                       >
3134 : 68              >            pla         ;load status
                       >            eor_flag 0
3135 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3137 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
313a : f003            >        beq skip2665
                       >        trap            ;failed not equal (non zero)
313c : 20d144          >        jsr report_error
                       >
313f :                 >skip2665
                       >
                        
313f : ca                       dex
3140 : 10dd                     bpl tror6
3142 : a205                     ldx #5
3144 :                  tror7
                                set_zx zps,$ff-fc
                       >            load_flag $ff-fc
3144 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
3146 : 48              >            pha         ;use stack to load status
3147 : b50a            >            lda zps,x    ;load to indexed zeropage
3149 : 9503            >            sta zpt,x
314b : 28              >            plp
                        
314c : 7603                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
314e : 08              >            php         ;save flags
314f : b503            >            lda zpt,x
3151 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
3154 : f003            >        beq skip2670
                       >        trap            ;failed not equal (non zero)
3156 : 20d144          >        jsr report_error
                       >
3159 :                 >skip2670
                       >
3159 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
315a : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
315c : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
315f : f003            >        beq skip2673
                       >        trap            ;failed not equal (non zero)
3161 : 20d144          >        jsr report_error
                       >
3164 :                 >skip2673
                       >
                        
3164 : ca                       dex
3165 : 10dd                     bpl tror7
                        
3167 : a205                     ldx #5
3169 :                  trorc6
                                set_zx zps,fc
                       >            load_flag fc
3169 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
316b : 48              >            pha         ;use stack to load status
316c : b50a            >            lda zps,x    ;load to indexed zeropage
316e : 9503            >            sta zpt,x
3170 : 28              >            plp
                        
3171 : 7603                     ror zpt,x
                                tst_zx rRORc,fRORc,0
3173 : 08              >            php         ;save flags
3174 : b503            >            lda zpt,x
3176 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
3179 : f003            >        beq skip2678
                       >        trap            ;failed not equal (non zero)
317b : 20d144          >        jsr report_error
                       >
317e :                 >skip2678
                       >
317e : 68              >            pla         ;load status
                       >            eor_flag 0
317f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3181 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
3184 : f003            >        beq skip2681
                       >        trap            ;failed not equal (non zero)
3186 : 20d144          >        jsr report_error
                       >
3189 :                 >skip2681
                       >
                        
3189 : ca                       dex
318a : 10dd                     bpl trorc6
318c : a205                     ldx #5
318e :                  trorc7
                                set_zx zps,$ff
                       >            load_flag $ff
318e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3190 : 48              >            pha         ;use stack to load status
3191 : b50a            >            lda zps,x    ;load to indexed zeropage
3193 : 9503            >            sta zpt,x
3195 : 28              >            plp
                        
3196 : 7603                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
3198 : 08              >            php         ;save flags
3199 : b503            >            lda zpt,x
319b : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
319e : f003            >        beq skip2686
                       >        trap            ;failed not equal (non zero)
31a0 : 20d144          >        jsr report_error
                       >
31a3 :                 >skip2686
                       >
31a3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
31a4 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
31a6 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
31a9 : f003            >        beq skip2689
                       >        trap            ;failed not equal (non zero)
31ab : 20d144          >        jsr report_error
                       >
31ae :                 >skip2689
                       >
                        
31ae : ca                       dex
31af : 10dd                     bpl trorc7
                                next_test
31b1 : ad0002          >            lda test_case   ;previous test
31b4 : c920            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
31b6 : f003            >        beq skip2692
                       >        trap            ;failed not equal (non zero)
31b8 : 20d144          >        jsr report_error
                       >
31bb :                 >skip2692
                       >
0021 =                 >test_num = test_num + 1
31bb : a921            >            lda #test_num   ;*** next tests' number
31bd : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; shifts - abs indexed
31c0 : a205                     ldx #5
31c2 :                  tasl8
                                set_absx zps,0
                       >            load_flag 0
31c2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
31c4 : 48              >            pha         ;use stack to load status
31c5 : b50a            >            lda zps,x    ;load to indexed memory
31c7 : 9d0302          >            sta abst,x
31ca : 28              >            plp
                        
31cb : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,0
31ce : 08              >            php         ;save flags
31cf : bd0302          >            lda abst,x
31d2 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
31d5 : f003            >        beq skip2697
                       >        trap            ;failed not equal (non zero)
31d7 : 20d144          >        jsr report_error
                       >
31da :                 >skip2697
                       >
31da : 68              >            pla         ;load status
                       >            eor_flag 0
31db : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
31dd : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
31e0 : f003            >        beq skip2700
                       >        trap            ;failed not equal (non zero)
31e2 : 20d144          >        jsr report_error
                       >
31e5 :                 >skip2700
                       >
                        
31e5 : ca                       dex
31e6 : 10da                     bpl tasl8
31e8 : a205                     ldx #5
31ea :                  tasl9
                                set_absx zps,$ff
                       >            load_flag $ff
31ea : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
31ec : 48              >            pha         ;use stack to load status
31ed : b50a            >            lda zps,x    ;load to indexed memory
31ef : 9d0302          >            sta abst,x
31f2 : 28              >            plp
                        
31f3 : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
31f6 : 08              >            php         ;save flags
31f7 : bd0302          >            lda abst,x
31fa : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
31fd : f003            >        beq skip2705
                       >        trap            ;failed not equal (non zero)
31ff : 20d144          >        jsr report_error
                       >
3202 :                 >skip2705
                       >
3202 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
3203 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
3205 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
3208 : f003            >        beq skip2708
                       >        trap            ;failed not equal (non zero)
320a : 20d144          >        jsr report_error
                       >
320d :                 >skip2708
                       >
                        
320d : ca                       dex
320e : 10da                     bpl tasl9
                        
3210 : a205                     ldx #5
3212 :                  tlsr8
                                set_absx zps,0
                       >            load_flag 0
3212 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3214 : 48              >            pha         ;use stack to load status
3215 : b50a            >            lda zps,x    ;load to indexed memory
3217 : 9d0302          >            sta abst,x
321a : 28              >            plp
                        
321b : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,0
321e : 08              >            php         ;save flags
321f : bd0302          >            lda abst,x
3222 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
3225 : f003            >        beq skip2713
                       >        trap            ;failed not equal (non zero)
3227 : 20d144          >        jsr report_error
                       >
322a :                 >skip2713
                       >
322a : 68              >            pla         ;load status
                       >            eor_flag 0
322b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
322d : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
3230 : f003            >        beq skip2716
                       >        trap            ;failed not equal (non zero)
3232 : 20d144          >        jsr report_error
                       >
3235 :                 >skip2716
                       >
                        
3235 : ca                       dex
3236 : 10da                     bpl tlsr8
3238 : a205                     ldx #5
323a :                  tlsr9
                                set_absx zps,$ff
                       >            load_flag $ff
323a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
323c : 48              >            pha         ;use stack to load status
323d : b50a            >            lda zps,x    ;load to indexed memory
323f : 9d0302          >            sta abst,x
3242 : 28              >            plp
                        
3243 : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
3246 : 08              >            php         ;save flags
3247 : bd0302          >            lda abst,x
324a : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
324d : f003            >        beq skip2721
                       >        trap            ;failed not equal (non zero)
324f : 20d144          >        jsr report_error
                       >
3252 :                 >skip2721
                       >
3252 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
3253 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
3255 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
3258 : f003            >        beq skip2724
                       >        trap            ;failed not equal (non zero)
325a : 20d144          >        jsr report_error
                       >
325d :                 >skip2724
                       >
                        
325d : ca                       dex
325e : 10da                     bpl tlsr9
                        
3260 : a205                     ldx #5
3262 :                  trol8
                                set_absx zps,0
                       >            load_flag 0
3262 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3264 : 48              >            pha         ;use stack to load status
3265 : b50a            >            lda zps,x    ;load to indexed memory
3267 : 9d0302          >            sta abst,x
326a : 28              >            plp
                        
326b : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,0
326e : 08              >            php         ;save flags
326f : bd0302          >            lda abst,x
3272 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
3275 : f003            >        beq skip2729
                       >        trap            ;failed not equal (non zero)
3277 : 20d144          >        jsr report_error
                       >
327a :                 >skip2729
                       >
327a : 68              >            pla         ;load status
                       >            eor_flag 0
327b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
327d : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
3280 : f003            >        beq skip2732
                       >        trap            ;failed not equal (non zero)
3282 : 20d144          >        jsr report_error
                       >
3285 :                 >skip2732
                       >
                        
3285 : ca                       dex
3286 : 10da                     bpl trol8
3288 : a205                     ldx #5
328a :                  trol9
                                set_absx zps,$ff-fc
                       >            load_flag $ff-fc
328a : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
328c : 48              >            pha         ;use stack to load status
328d : b50a            >            lda zps,x    ;load to indexed memory
328f : 9d0302          >            sta abst,x
3292 : 28              >            plp
                        
3293 : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
3296 : 08              >            php         ;save flags
3297 : bd0302          >            lda abst,x
329a : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
329d : f003            >        beq skip2737
                       >        trap            ;failed not equal (non zero)
329f : 20d144          >        jsr report_error
                       >
32a2 :                 >skip2737
                       >
32a2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
32a3 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
32a5 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
32a8 : f003            >        beq skip2740
                       >        trap            ;failed not equal (non zero)
32aa : 20d144          >        jsr report_error
                       >
32ad :                 >skip2740
                       >
                        
32ad : ca                       dex
32ae : 10da                     bpl trol9
                        
32b0 : a205                     ldx #5
32b2 :                  trolc8
                                set_absx zps,fc
                       >            load_flag fc
32b2 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
32b4 : 48              >            pha         ;use stack to load status
32b5 : b50a            >            lda zps,x    ;load to indexed memory
32b7 : 9d0302          >            sta abst,x
32ba : 28              >            plp
                        
32bb : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,0
32be : 08              >            php         ;save flags
32bf : bd0302          >            lda abst,x
32c2 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
32c5 : f003            >        beq skip2745
                       >        trap            ;failed not equal (non zero)
32c7 : 20d144          >        jsr report_error
                       >
32ca :                 >skip2745
                       >
32ca : 68              >            pla         ;load status
                       >            eor_flag 0
32cb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
32cd : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
32d0 : f003            >        beq skip2748
                       >        trap            ;failed not equal (non zero)
32d2 : 20d144          >        jsr report_error
                       >
32d5 :                 >skip2748
                       >
                        
32d5 : ca                       dex
32d6 : 10da                     bpl trolc8
32d8 : a205                     ldx #5
32da :                  trolc9
                                set_absx zps,$ff
                       >            load_flag $ff
32da : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
32dc : 48              >            pha         ;use stack to load status
32dd : b50a            >            lda zps,x    ;load to indexed memory
32df : 9d0302          >            sta abst,x
32e2 : 28              >            plp
                        
32e3 : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
32e6 : 08              >            php         ;save flags
32e7 : bd0302          >            lda abst,x
32ea : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
32ed : f003            >        beq skip2753
                       >        trap            ;failed not equal (non zero)
32ef : 20d144          >        jsr report_error
                       >
32f2 :                 >skip2753
                       >
32f2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
32f3 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
32f5 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
32f8 : f003            >        beq skip2756
                       >        trap            ;failed not equal (non zero)
32fa : 20d144          >        jsr report_error
                       >
32fd :                 >skip2756
                       >
                        
32fd : ca                       dex
32fe : 10da                     bpl trolc9
                        
3300 : a205                     ldx #5
3302 :                  tror8
                                set_absx zps,0
                       >            load_flag 0
3302 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3304 : 48              >            pha         ;use stack to load status
3305 : b50a            >            lda zps,x    ;load to indexed memory
3307 : 9d0302          >            sta abst,x
330a : 28              >            plp
                        
330b : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,0
330e : 08              >            php         ;save flags
330f : bd0302          >            lda abst,x
3312 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
3315 : f003            >        beq skip2761
                       >        trap            ;failed not equal (non zero)
3317 : 20d144          >        jsr report_error
                       >
331a :                 >skip2761
                       >
331a : 68              >            pla         ;load status
                       >            eor_flag 0
331b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
331d : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
3320 : f003            >        beq skip2764
                       >        trap            ;failed not equal (non zero)
3322 : 20d144          >        jsr report_error
                       >
3325 :                 >skip2764
                       >
                        
3325 : ca                       dex
3326 : 10da                     bpl tror8
3328 : a205                     ldx #5
332a :                  tror9
                                set_absx zps,$ff-fc
                       >            load_flag $ff-fc
332a : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
332c : 48              >            pha         ;use stack to load status
332d : b50a            >            lda zps,x    ;load to indexed memory
332f : 9d0302          >            sta abst,x
3332 : 28              >            plp
                        
3333 : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
3336 : 08              >            php         ;save flags
3337 : bd0302          >            lda abst,x
333a : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
333d : f003            >        beq skip2769
                       >        trap            ;failed not equal (non zero)
333f : 20d144          >        jsr report_error
                       >
3342 :                 >skip2769
                       >
3342 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
3343 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
3345 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
3348 : f003            >        beq skip2772
                       >        trap            ;failed not equal (non zero)
334a : 20d144          >        jsr report_error
                       >
334d :                 >skip2772
                       >
                        
334d : ca                       dex
334e : 10da                     bpl tror9
                        
3350 : a205                     ldx #5
3352 :                  trorc8
                                set_absx zps,fc
                       >            load_flag fc
3352 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
3354 : 48              >            pha         ;use stack to load status
3355 : b50a            >            lda zps,x    ;load to indexed memory
3357 : 9d0302          >            sta abst,x
335a : 28              >            plp
                        
335b : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,0
335e : 08              >            php         ;save flags
335f : bd0302          >            lda abst,x
3362 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
3365 : f003            >        beq skip2777
                       >        trap            ;failed not equal (non zero)
3367 : 20d144          >        jsr report_error
                       >
336a :                 >skip2777
                       >
336a : 68              >            pla         ;load status
                       >            eor_flag 0
336b : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
336d : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
3370 : f003            >        beq skip2780
                       >        trap            ;failed not equal (non zero)
3372 : 20d144          >        jsr report_error
                       >
3375 :                 >skip2780
                       >
                        
3375 : ca                       dex
3376 : 10da                     bpl trorc8
3378 : a205                     ldx #5
337a :                  trorc9
                                set_absx zps,$ff
                       >            load_flag $ff
337a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
337c : 48              >            pha         ;use stack to load status
337d : b50a            >            lda zps,x    ;load to indexed memory
337f : 9d0302          >            sta abst,x
3382 : 28              >            plp
                        
3383 : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
3386 : 08              >            php         ;save flags
3387 : bd0302          >            lda abst,x
338a : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
338d : f003            >        beq skip2785
                       >        trap            ;failed not equal (non zero)
338f : 20d144          >        jsr report_error
                       >
3392 :                 >skip2785
                       >
3392 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
3393 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
3395 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
3398 : f003            >        beq skip2788
                       >        trap            ;failed not equal (non zero)
339a : 20d144          >        jsr report_error
                       >
339d :                 >skip2788
                       >
                        
339d : ca                       dex
339e : 10da                     bpl trorc9
                                next_test
33a0 : ad0002          >            lda test_case   ;previous test
33a3 : c921            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
33a5 : f003            >        beq skip2791
                       >        trap            ;failed not equal (non zero)
33a7 : 20d144          >        jsr report_error
                       >
33aa :                 >skip2791
                       >
0022 =                 >test_num = test_num + 1
33aa : a922            >            lda #test_num   ;*** next tests' number
33ac : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing memory increment/decrement - INC DEC all addressing modes
                        ; zeropage
33af : a200                     ldx #0
33b1 : a97e                     lda #$7e
33b3 : 8503                     sta zpt
33b5 :                  tinc    
                                set_stat 0
                       >            load_flag 0
33b5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
33b7 : 48              >            pha         ;use stack to load status
33b8 : 28              >            plp
                        
33b9 : e603                     inc zpt
                                tst_z rINC,fINC,0
33bb : 08              >            php         ;save flags
33bc : a503            >            lda zpt
33be : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
33c1 : f003            >        beq skip2796
                       >        trap            ;failed not equal (non zero)
33c3 : 20d144          >        jsr report_error
                       >
33c6 :                 >skip2796
                       >
33c6 : 68              >            pla         ;load status
                       >            eor_flag 0
33c7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
33c9 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
33cc : f003            >        beq skip2799
                       >        trap            ;failed not equal (non zero)
33ce : 20d144          >        jsr report_error
                       >
33d1 :                 >skip2799
                       >
                        
33d1 : e8                       inx
33d2 : e002                     cpx #2
33d4 : d004                     bne tinc1
33d6 : a9fe                     lda #$fe
33d8 : 8503                     sta zpt
33da : e005             tinc1   cpx #5
33dc : d0d7                     bne tinc
33de : ca                       dex
33df : e603                     inc zpt
33e1 :                  tdec    
                                set_stat 0
                       >            load_flag 0
33e1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
33e3 : 48              >            pha         ;use stack to load status
33e4 : 28              >            plp
                        
33e5 : c603                     dec zpt
                                tst_z rINC,fINC,0
33e7 : 08              >            php         ;save flags
33e8 : a503            >            lda zpt
33ea : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
33ed : f003            >        beq skip2804
                       >        trap            ;failed not equal (non zero)
33ef : 20d144          >        jsr report_error
                       >
33f2 :                 >skip2804
                       >
33f2 : 68              >            pla         ;load status
                       >            eor_flag 0
33f3 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
33f5 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
33f8 : f003            >        beq skip2807
                       >        trap            ;failed not equal (non zero)
33fa : 20d144          >        jsr report_error
                       >
33fd :                 >skip2807
                       >
                        
33fd : ca                       dex
33fe : 300a                     bmi tdec1
3400 : e001                     cpx #1
3402 : d0dd                     bne tdec
3404 : a981                     lda #$81
3406 : 8503                     sta zpt
3408 : d0d7                     bne tdec
340a :                  tdec1
340a : a200                     ldx #0
340c : a97e                     lda #$7e
340e : 8503                     sta zpt
3410 :                  tinc10    
                                set_stat $ff
                       >            load_flag $ff
3410 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3412 : 48              >            pha         ;use stack to load status
3413 : 28              >            plp
                        
3414 : e603                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
3416 : 08              >            php         ;save flags
3417 : a503            >            lda zpt
3419 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
341c : f003            >        beq skip2812
                       >        trap            ;failed not equal (non zero)
341e : 20d144          >        jsr report_error
                       >
3421 :                 >skip2812
                       >
3421 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3422 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3424 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
3427 : f003            >        beq skip2815
                       >        trap            ;failed not equal (non zero)
3429 : 20d144          >        jsr report_error
                       >
342c :                 >skip2815
                       >
                        
342c : e8                       inx
342d : e002                     cpx #2
342f : d004                     bne tinc11
3431 : a9fe                     lda #$fe
3433 : 8503                     sta zpt
3435 : e005             tinc11  cpx #5
3437 : d0d7                     bne tinc10
3439 : ca                       dex
343a : e603                     inc zpt
343c :                  tdec10    
                                set_stat $ff
                       >            load_flag $ff
343c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
343e : 48              >            pha         ;use stack to load status
343f : 28              >            plp
                        
3440 : c603                     dec zpt
                                tst_z rINC,fINC,$ff-fnz
3442 : 08              >            php         ;save flags
3443 : a503            >            lda zpt
3445 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
3448 : f003            >        beq skip2820
                       >        trap            ;failed not equal (non zero)
344a : 20d144          >        jsr report_error
                       >
344d :                 >skip2820
                       >
344d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
344e : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3450 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
3453 : f003            >        beq skip2823
                       >        trap            ;failed not equal (non zero)
3455 : 20d144          >        jsr report_error
                       >
3458 :                 >skip2823
                       >
                        
3458 : ca                       dex
3459 : 300a                     bmi tdec11
345b : e001                     cpx #1
345d : d0dd                     bne tdec10
345f : a981                     lda #$81
3461 : 8503                     sta zpt
3463 : d0d7                     bne tdec10
3465 :                  tdec11
                                next_test
3465 : ad0002          >            lda test_case   ;previous test
3468 : c922            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
346a : f003            >        beq skip2826
                       >        trap            ;failed not equal (non zero)
346c : 20d144          >        jsr report_error
                       >
346f :                 >skip2826
                       >
0023 =                 >test_num = test_num + 1
346f : a923            >            lda #test_num   ;*** next tests' number
3471 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; absolute memory
3474 : a200                     ldx #0
3476 : a97e                     lda #$7e
3478 : 8d0302                   sta abst
347b :                  tinc2    
                                set_stat 0
                       >            load_flag 0
347b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
347d : 48              >            pha         ;use stack to load status
347e : 28              >            plp
                        
347f : ee0302                   inc abst
                                tst_abs rINC,fINC,0
3482 : 08              >            php         ;save flags
3483 : ad0302          >            lda abst
3486 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
3489 : f003            >        beq skip2831
                       >        trap            ;failed not equal (non zero)
348b : 20d144          >        jsr report_error
                       >
348e :                 >skip2831
                       >
348e : 68              >            pla         ;load status
                       >            eor_flag 0
348f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3491 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
3494 : f003            >        beq skip2834
                       >        trap            ;failed not equal (non zero)
3496 : 20d144          >        jsr report_error
                       >
3499 :                 >skip2834
                       >
                        
3499 : e8                       inx
349a : e002                     cpx #2
349c : d005                     bne tinc3
349e : a9fe                     lda #$fe
34a0 : 8d0302                   sta abst
34a3 : e005             tinc3   cpx #5
34a5 : d0d4                     bne tinc2
34a7 : ca                       dex
34a8 : ee0302                   inc abst
34ab :                  tdec2    
                                set_stat 0
                       >            load_flag 0
34ab : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
34ad : 48              >            pha         ;use stack to load status
34ae : 28              >            plp
                        
34af : ce0302                   dec abst
                                tst_abs rINC,fINC,0
34b2 : 08              >            php         ;save flags
34b3 : ad0302          >            lda abst
34b6 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
34b9 : f003            >        beq skip2839
                       >        trap            ;failed not equal (non zero)
34bb : 20d144          >        jsr report_error
                       >
34be :                 >skip2839
                       >
34be : 68              >            pla         ;load status
                       >            eor_flag 0
34bf : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
34c1 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
34c4 : f003            >        beq skip2842
                       >        trap            ;failed not equal (non zero)
34c6 : 20d144          >        jsr report_error
                       >
34c9 :                 >skip2842
                       >
                        
34c9 : ca                       dex
34ca : 300b                     bmi tdec3
34cc : e001                     cpx #1
34ce : d0db                     bne tdec2
34d0 : a981                     lda #$81
34d2 : 8d0302                   sta abst
34d5 : d0d4                     bne tdec2
34d7 :                  tdec3
34d7 : a200                     ldx #0
34d9 : a97e                     lda #$7e
34db : 8d0302                   sta abst
34de :                  tinc12    
                                set_stat $ff
                       >            load_flag $ff
34de : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
34e0 : 48              >            pha         ;use stack to load status
34e1 : 28              >            plp
                        
34e2 : ee0302                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
34e5 : 08              >            php         ;save flags
34e6 : ad0302          >            lda abst
34e9 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
34ec : f003            >        beq skip2847
                       >        trap            ;failed not equal (non zero)
34ee : 20d144          >        jsr report_error
                       >
34f1 :                 >skip2847
                       >
34f1 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
34f2 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
34f4 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
34f7 : f003            >        beq skip2850
                       >        trap            ;failed not equal (non zero)
34f9 : 20d144          >        jsr report_error
                       >
34fc :                 >skip2850
                       >
                        
34fc : e8                       inx
34fd : e002                     cpx #2
34ff : d005                     bne tinc13
3501 : a9fe                     lda #$fe
3503 : 8d0302                   sta abst
3506 : e005             tinc13   cpx #5
3508 : d0d4                     bne tinc12
350a : ca                       dex
350b : ee0302                   inc abst
350e :                  tdec12    
                                set_stat $ff
                       >            load_flag $ff
350e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3510 : 48              >            pha         ;use stack to load status
3511 : 28              >            plp
                        
3512 : ce0302                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
3515 : 08              >            php         ;save flags
3516 : ad0302          >            lda abst
3519 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
351c : f003            >        beq skip2855
                       >        trap            ;failed not equal (non zero)
351e : 20d144          >        jsr report_error
                       >
3521 :                 >skip2855
                       >
3521 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3522 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3524 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
3527 : f003            >        beq skip2858
                       >        trap            ;failed not equal (non zero)
3529 : 20d144          >        jsr report_error
                       >
352c :                 >skip2858
                       >
                        
352c : ca                       dex
352d : 300b                     bmi tdec13
352f : e001                     cpx #1
3531 : d0db                     bne tdec12
3533 : a981                     lda #$81
3535 : 8d0302                   sta abst
3538 : d0d4                     bne tdec12
353a :                  tdec13
                                next_test
353a : ad0002          >            lda test_case   ;previous test
353d : c923            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
353f : f003            >        beq skip2861
                       >        trap            ;failed not equal (non zero)
3541 : 20d144          >        jsr report_error
                       >
3544 :                 >skip2861
                       >
0024 =                 >test_num = test_num + 1
3544 : a924            >            lda #test_num   ;*** next tests' number
3546 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; zeropage indexed
3549 : a200                     ldx #0
354b : a97e                     lda #$7e
354d : 9503             tinc4   sta zpt,x
                                set_stat 0
                       >            load_flag 0
354f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3551 : 48              >            pha         ;use stack to load status
3552 : 28              >            plp
                        
3553 : f603                     inc zpt,x
                                tst_zx rINC,fINC,0
3555 : 08              >            php         ;save flags
3556 : b503            >            lda zpt,x
3558 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
355b : f003            >        beq skip2866
                       >        trap            ;failed not equal (non zero)
355d : 20d144          >        jsr report_error
                       >
3560 :                 >skip2866
                       >
3560 : 68              >            pla         ;load status
                       >            eor_flag 0
3561 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3563 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
3566 : f003            >        beq skip2869
                       >        trap            ;failed not equal (non zero)
3568 : 20d144          >        jsr report_error
                       >
356b :                 >skip2869
                       >
                        
356b : b503                     lda zpt,x
356d : e8                       inx
356e : e002                     cpx #2
3570 : d002                     bne tinc5
3572 : a9fe                     lda #$fe
3574 : e005             tinc5   cpx #5
3576 : d0d5                     bne tinc4
3578 : ca                       dex
3579 : a902                     lda #2
357b : 9503             tdec4   sta zpt,x 
                                set_stat 0
                       >            load_flag 0
357d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
357f : 48              >            pha         ;use stack to load status
3580 : 28              >            plp
                        
3581 : d603                     dec zpt,x
                                tst_zx rINC,fINC,0
3583 : 08              >            php         ;save flags
3584 : b503            >            lda zpt,x
3586 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
3589 : f003            >        beq skip2874
                       >        trap            ;failed not equal (non zero)
358b : 20d144          >        jsr report_error
                       >
358e :                 >skip2874
                       >
358e : 68              >            pla         ;load status
                       >            eor_flag 0
358f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3591 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
3594 : f003            >        beq skip2877
                       >        trap            ;failed not equal (non zero)
3596 : 20d144          >        jsr report_error
                       >
3599 :                 >skip2877
                       >
                        
3599 : b503                     lda zpt,x
359b : ca                       dex
359c : 3008                     bmi tdec5
359e : e001                     cpx #1
35a0 : d0d9                     bne tdec4
35a2 : a981                     lda #$81
35a4 : d0d5                     bne tdec4
35a6 :                  tdec5
35a6 : a200                     ldx #0
35a8 : a97e                     lda #$7e
35aa : 9503             tinc14  sta zpt,x
                                set_stat $ff
                       >            load_flag $ff
35ac : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
35ae : 48              >            pha         ;use stack to load status
35af : 28              >            plp
                        
35b0 : f603                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
35b2 : 08              >            php         ;save flags
35b3 : b503            >            lda zpt,x
35b5 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
35b8 : f003            >        beq skip2882
                       >        trap            ;failed not equal (non zero)
35ba : 20d144          >        jsr report_error
                       >
35bd :                 >skip2882
                       >
35bd : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
35be : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
35c0 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
35c3 : f003            >        beq skip2885
                       >        trap            ;failed not equal (non zero)
35c5 : 20d144          >        jsr report_error
                       >
35c8 :                 >skip2885
                       >
                        
35c8 : b503                     lda zpt,x
35ca : e8                       inx
35cb : e002                     cpx #2
35cd : d002                     bne tinc15
35cf : a9fe                     lda #$fe
35d1 : e005             tinc15  cpx #5
35d3 : d0d5                     bne tinc14
35d5 : ca                       dex
35d6 : a902                     lda #2
35d8 : 9503             tdec14  sta zpt,x 
                                set_stat $ff
                       >            load_flag $ff
35da : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
35dc : 48              >            pha         ;use stack to load status
35dd : 28              >            plp
                        
35de : d603                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
35e0 : 08              >            php         ;save flags
35e1 : b503            >            lda zpt,x
35e3 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
35e6 : f003            >        beq skip2890
                       >        trap            ;failed not equal (non zero)
35e8 : 20d144          >        jsr report_error
                       >
35eb :                 >skip2890
                       >
35eb : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
35ec : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
35ee : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
35f1 : f003            >        beq skip2893
                       >        trap            ;failed not equal (non zero)
35f3 : 20d144          >        jsr report_error
                       >
35f6 :                 >skip2893
                       >
                        
35f6 : b503                     lda zpt,x
35f8 : ca                       dex
35f9 : 3008                     bmi tdec15
35fb : e001                     cpx #1
35fd : d0d9                     bne tdec14
35ff : a981                     lda #$81
3601 : d0d5                     bne tdec14
3603 :                  tdec15
                                next_test
3603 : ad0002          >            lda test_case   ;previous test
3606 : c924            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3608 : f003            >        beq skip2896
                       >        trap            ;failed not equal (non zero)
360a : 20d144          >        jsr report_error
                       >
360d :                 >skip2896
                       >
0025 =                 >test_num = test_num + 1
360d : a925            >            lda #test_num   ;*** next tests' number
360f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; memory indexed
3612 : a200                     ldx #0
3614 : a97e                     lda #$7e
3616 : 9d0302           tinc6   sta abst,x
                                set_stat 0
                       >            load_flag 0
3619 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
361b : 48              >            pha         ;use stack to load status
361c : 28              >            plp
                        
361d : fe0302                   inc abst,x
                                tst_absx rINC,fINC,0
3620 : 08              >            php         ;save flags
3621 : bd0302          >            lda abst,x
3624 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
3627 : f003            >        beq skip2901
                       >        trap            ;failed not equal (non zero)
3629 : 20d144          >        jsr report_error
                       >
362c :                 >skip2901
                       >
362c : 68              >            pla         ;load status
                       >            eor_flag 0
362d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
362f : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
3632 : f003            >        beq skip2904
                       >        trap            ;failed not equal (non zero)
3634 : 20d144          >        jsr report_error
                       >
3637 :                 >skip2904
                       >
                        
3637 : bd0302                   lda abst,x
363a : e8                       inx
363b : e002                     cpx #2
363d : d002                     bne tinc7
363f : a9fe                     lda #$fe
3641 : e005             tinc7   cpx #5
3643 : d0d1                     bne tinc6
3645 : ca                       dex
3646 : a902                     lda #2
3648 : 9d0302           tdec6   sta abst,x 
                                set_stat 0
                       >            load_flag 0
364b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
364d : 48              >            pha         ;use stack to load status
364e : 28              >            plp
                        
364f : de0302                   dec abst,x
                                tst_absx rINC,fINC,0
3652 : 08              >            php         ;save flags
3653 : bd0302          >            lda abst,x
3656 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
3659 : f003            >        beq skip2909
                       >        trap            ;failed not equal (non zero)
365b : 20d144          >        jsr report_error
                       >
365e :                 >skip2909
                       >
365e : 68              >            pla         ;load status
                       >            eor_flag 0
365f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3661 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
3664 : f003            >        beq skip2912
                       >        trap            ;failed not equal (non zero)
3666 : 20d144          >        jsr report_error
                       >
3669 :                 >skip2912
                       >
                        
3669 : bd0302                   lda abst,x
366c : ca                       dex
366d : 3008                     bmi tdec7
366f : e001                     cpx #1
3671 : d0d5                     bne tdec6
3673 : a981                     lda #$81
3675 : d0d1                     bne tdec6
3677 :                  tdec7
3677 : a200                     ldx #0
3679 : a97e                     lda #$7e
367b : 9d0302           tinc16  sta abst,x
                                set_stat $ff
                       >            load_flag $ff
367e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3680 : 48              >            pha         ;use stack to load status
3681 : 28              >            plp
                        
3682 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
3685 : 08              >            php         ;save flags
3686 : bd0302          >            lda abst,x
3689 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
368c : f003            >        beq skip2917
                       >        trap            ;failed not equal (non zero)
368e : 20d144          >        jsr report_error
                       >
3691 :                 >skip2917
                       >
3691 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3692 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3694 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
3697 : f003            >        beq skip2920
                       >        trap            ;failed not equal (non zero)
3699 : 20d144          >        jsr report_error
                       >
369c :                 >skip2920
                       >
                        
369c : bd0302                   lda abst,x
369f : e8                       inx
36a0 : e002                     cpx #2
36a2 : d002                     bne tinc17
36a4 : a9fe                     lda #$fe
36a6 : e005             tinc17  cpx #5
36a8 : d0d1                     bne tinc16
36aa : ca                       dex
36ab : a902                     lda #2
36ad : 9d0302           tdec16  sta abst,x 
                                set_stat $ff
                       >            load_flag $ff
36b0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
36b2 : 48              >            pha         ;use stack to load status
36b3 : 28              >            plp
                        
36b4 : de0302                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
36b7 : 08              >            php         ;save flags
36b8 : bd0302          >            lda abst,x
36bb : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
36be : f003            >        beq skip2925
                       >        trap            ;failed not equal (non zero)
36c0 : 20d144          >        jsr report_error
                       >
36c3 :                 >skip2925
                       >
36c3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
36c4 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
36c6 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
36c9 : f003            >        beq skip2928
                       >        trap            ;failed not equal (non zero)
36cb : 20d144          >        jsr report_error
                       >
36ce :                 >skip2928
                       >
                        
36ce : bd0302                   lda abst,x
36d1 : ca                       dex
36d2 : 3008                     bmi tdec17
36d4 : e001                     cpx #1
36d6 : d0d5                     bne tdec16
36d8 : a981                     lda #$81
36da : d0d1                     bne tdec16
36dc :                  tdec17
                                next_test
36dc : ad0002          >            lda test_case   ;previous test
36df : c925            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
36e1 : f003            >        beq skip2931
                       >        trap            ;failed not equal (non zero)
36e3 : 20d144          >        jsr report_error
                       >
36e6 :                 >skip2931
                       >
0026 =                 >test_num = test_num + 1
36e6 : a926            >            lda #test_num   ;*** next tests' number
36e8 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing logical instructions - AND EOR ORA all addressing modes
                        ; AND
36eb : a203                     ldx #3          ;immediate
36ed : b515             tand    lda zpAN,x
36ef : 8d0a02                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,0
                       >            load_flag 0
36f2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
36f4 : 48              >            pha         ;use stack to load status
36f5 : bd6b02          >            lda absANa,x    ;precharge accu
36f8 : 28              >            plp
                        
36f9 : 200902                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,0
36fc : 08              >            php         ;save flags
36fd : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3700 : f003            >        beq skip2936
                       >        trap            ;failed not equal (non zero)
3702 : 20d144          >        jsr report_error
                       >
3705 :                 >skip2936
                       >
3705 : 68              >            pla         ;load status
                       >            eor_flag 0
3706 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3708 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
370b : f003            >        beq skip2939
                       >        trap            ;failed not equal (non zero)
370d : 20d144          >        jsr report_error
                       >
3710 :                 >skip2939
                       >
                        
3710 : ca                       dex
3711 : 10da                     bpl tand
3713 : a203                     ldx #3
3715 : b515             tand1   lda zpAN,x
3717 : 8d0a02                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,$ff
                       >            load_flag $ff
371a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
371c : 48              >            pha         ;use stack to load status
371d : bd6b02          >            lda absANa,x    ;precharge accu
3720 : 28              >            plp
                        
3721 : 200902                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
3724 : 08              >            php         ;save flags
3725 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3728 : f003            >        beq skip2944
                       >        trap            ;failed not equal (non zero)
372a : 20d144          >        jsr report_error
                       >
372d :                 >skip2944
                       >
372d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
372e : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3730 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3733 : f003            >        beq skip2947
                       >        trap            ;failed not equal (non zero)
3735 : 20d144          >        jsr report_error
                       >
3738 :                 >skip2947
                       >
                        
3738 : ca                       dex
3739 : 10da                     bpl tand1
                            
373b : a203                     ldx #3      ;zp
373d : b515             tand2   lda zpAN,x
373f : 8503                     sta zpt
                                set_ax  absANa,0
                       >            load_flag 0
3741 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3743 : 48              >            pha         ;use stack to load status
3744 : bd6b02          >            lda absANa,x    ;precharge accu
3747 : 28              >            plp
                        
3748 : 2503                     and zpt
                                tst_ax  absrlo,absflo,0
374a : 08              >            php         ;save flags
374b : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
374e : f003            >        beq skip2952
                       >        trap            ;failed not equal (non zero)
3750 : 20d144          >        jsr report_error
                       >
3753 :                 >skip2952
                       >
3753 : 68              >            pla         ;load status
                       >            eor_flag 0
3754 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3756 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3759 : f003            >        beq skip2955
                       >        trap            ;failed not equal (non zero)
375b : 20d144          >        jsr report_error
                       >
375e :                 >skip2955
                       >
                        
375e : ca                       dex
375f : 10dc                     bpl tand2
3761 : a203                     ldx #3
3763 : b515             tand3   lda zpAN,x
3765 : 8503                     sta zpt
                                set_ax  absANa,$ff
                       >            load_flag $ff
3767 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3769 : 48              >            pha         ;use stack to load status
376a : bd6b02          >            lda absANa,x    ;precharge accu
376d : 28              >            plp
                        
376e : 2503                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
3770 : 08              >            php         ;save flags
3771 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3774 : f003            >        beq skip2960
                       >        trap            ;failed not equal (non zero)
3776 : 20d144          >        jsr report_error
                       >
3779 :                 >skip2960
                       >
3779 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
377a : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
377c : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
377f : f003            >        beq skip2963
                       >        trap            ;failed not equal (non zero)
3781 : 20d144          >        jsr report_error
                       >
3784 :                 >skip2963
                       >
                        
3784 : ca                       dex
3785 : 10dc                     bpl tand3
                        
3787 : a203                     ldx #3      ;abs
3789 : b515             tand4   lda zpAN,x
378b : 8d0302                   sta abst
                                set_ax  absANa,0
                       >            load_flag 0
378e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3790 : 48              >            pha         ;use stack to load status
3791 : bd6b02          >            lda absANa,x    ;precharge accu
3794 : 28              >            plp
                        
3795 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,0
3798 : 08              >            php         ;save flags
3799 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
379c : f003            >        beq skip2968
                       >        trap            ;failed not equal (non zero)
379e : 20d144          >        jsr report_error
                       >
37a1 :                 >skip2968
                       >
37a1 : 68              >            pla         ;load status
                       >            eor_flag 0
37a2 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
37a4 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
37a7 : f003            >        beq skip2971
                       >        trap            ;failed not equal (non zero)
37a9 : 20d144          >        jsr report_error
                       >
37ac :                 >skip2971
                       >
                        
37ac : ca                       dex
37ad : 10da                     bpl tand4
37af : a203                     ldx #3
37b1 : b515             tand5   lda zpAN,x
37b3 : 8d0302                   sta abst
                                set_ax  absANa,$ff
                       >            load_flag $ff
37b6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
37b8 : 48              >            pha         ;use stack to load status
37b9 : bd6b02          >            lda absANa,x    ;precharge accu
37bc : 28              >            plp
                        
37bd : 2d0302                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
37c0 : 08              >            php         ;save flags
37c1 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
37c4 : f003            >        beq skip2976
                       >        trap            ;failed not equal (non zero)
37c6 : 20d144          >        jsr report_error
                       >
37c9 :                 >skip2976
                       >
37c9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
37ca : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
37cc : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
37cf : f003            >        beq skip2979
                       >        trap            ;failed not equal (non zero)
37d1 : 20d144          >        jsr report_error
                       >
37d4 :                 >skip2979
                       >
                        
37d4 : ca                       dex
37d5 : 1002                     bpl tand6
                        
37d7 : a203                     ldx #3      ;zp,x
37d9 :                  tand6
                                set_ax  absANa,0
                       >            load_flag 0
37d9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
37db : 48              >            pha         ;use stack to load status
37dc : bd6b02          >            lda absANa,x    ;precharge accu
37df : 28              >            plp
                        
37e0 : 3515                     and zpAN,x
                                tst_ax  absrlo,absflo,0
37e2 : 08              >            php         ;save flags
37e3 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
37e6 : f003            >        beq skip2984
                       >        trap            ;failed not equal (non zero)
37e8 : 20d144          >        jsr report_error
                       >
37eb :                 >skip2984
                       >
37eb : 68              >            pla         ;load status
                       >            eor_flag 0
37ec : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
37ee : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
37f1 : f003            >        beq skip2987
                       >        trap            ;failed not equal (non zero)
37f3 : 20d144          >        jsr report_error
                       >
37f6 :                 >skip2987
                       >
                        
37f6 : ca                       dex
37f7 : 10e0                     bpl tand6
37f9 : a203                     ldx #3
37fb :                  tand7
                                set_ax  absANa,$ff
                       >            load_flag $ff
37fb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
37fd : 48              >            pha         ;use stack to load status
37fe : bd6b02          >            lda absANa,x    ;precharge accu
3801 : 28              >            plp
                        
3802 : 3515                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
3804 : 08              >            php         ;save flags
3805 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3808 : f003            >        beq skip2992
                       >        trap            ;failed not equal (non zero)
380a : 20d144          >        jsr report_error
                       >
380d :                 >skip2992
                       >
380d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
380e : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3810 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3813 : f003            >        beq skip2995
                       >        trap            ;failed not equal (non zero)
3815 : 20d144          >        jsr report_error
                       >
3818 :                 >skip2995
                       >
                        
3818 : ca                       dex
3819 : 10e0                     bpl tand7
                        
381b : a203                     ldx #3      ;abs,x
381d :                  tand8
                                set_ax  absANa,0
                       >            load_flag 0
381d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
381f : 48              >            pha         ;use stack to load status
3820 : bd6b02          >            lda absANa,x    ;precharge accu
3823 : 28              >            plp
                        
3824 : 3d5f02                   and absAN,x
                                tst_ax  absrlo,absflo,0
3827 : 08              >            php         ;save flags
3828 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
382b : f003            >        beq skip3000
                       >        trap            ;failed not equal (non zero)
382d : 20d144          >        jsr report_error
                       >
3830 :                 >skip3000
                       >
3830 : 68              >            pla         ;load status
                       >            eor_flag 0
3831 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3833 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3836 : f003            >        beq skip3003
                       >        trap            ;failed not equal (non zero)
3838 : 20d144          >        jsr report_error
                       >
383b :                 >skip3003
                       >
                        
383b : ca                       dex
383c : 10df                     bpl tand8
383e : a203                     ldx #3
3840 :                  tand9
                                set_ax  absANa,$ff
                       >            load_flag $ff
3840 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3842 : 48              >            pha         ;use stack to load status
3843 : bd6b02          >            lda absANa,x    ;precharge accu
3846 : 28              >            plp
                        
3847 : 3d5f02                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
384a : 08              >            php         ;save flags
384b : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
384e : f003            >        beq skip3008
                       >        trap            ;failed not equal (non zero)
3850 : 20d144          >        jsr report_error
                       >
3853 :                 >skip3008
                       >
3853 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3854 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3856 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3859 : f003            >        beq skip3011
                       >        trap            ;failed not equal (non zero)
385b : 20d144          >        jsr report_error
                       >
385e :                 >skip3011
                       >
                        
385e : ca                       dex
385f : 10df                     bpl tand9
                        
3861 : a003                     ldy #3      ;abs,y
3863 :                  tand10
                                set_ay  absANa,0
                       >            load_flag 0
3863 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3865 : 48              >            pha         ;use stack to load status
3866 : b96b02          >            lda absANa,y    ;precharge accu
3869 : 28              >            plp
                        
386a : 395f02                   and absAN,y
                                tst_ay  absrlo,absflo,0
386d : 08              >            php         ;save flags
386e : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3871 : f003            >        beq skip3016
                       >        trap            ;failed not equal (non zero)
3873 : 20d144          >        jsr report_error
                       >
3876 :                 >skip3016
                       >
3876 : 68              >            pla         ;load status
                       >            eor_flag 0
3877 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3879 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
387c : f003            >        beq skip3019
                       >        trap            ;failed not equal (non zero)
387e : 20d144          >        jsr report_error
                       >
3881 :                 >skip3019
                       >
                        
3881 : 88                       dey
3882 : 10df                     bpl tand10
3884 : a003                     ldy #3
3886 :                  tand11
                                set_ay  absANa,$ff
                       >            load_flag $ff
3886 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3888 : 48              >            pha         ;use stack to load status
3889 : b96b02          >            lda absANa,y    ;precharge accu
388c : 28              >            plp
                        
388d : 395f02                   and absAN,y
                                tst_ay  absrlo,absflo,$ff-fnz
3890 : 08              >            php         ;save flags
3891 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3894 : f003            >        beq skip3024
                       >        trap            ;failed not equal (non zero)
3896 : 20d144          >        jsr report_error
                       >
3899 :                 >skip3024
                       >
3899 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
389a : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
389c : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
389f : f003            >        beq skip3027
                       >        trap            ;failed not equal (non zero)
38a1 : 20d144          >        jsr report_error
                       >
38a4 :                 >skip3027
                       >
                        
38a4 : 88                       dey
38a5 : 10df                     bpl tand11
                        
38a7 : a206                     ldx #6      ;(zp,x)
38a9 : a003                     ldy #3
38ab :                  tand12
                                set_ay  absANa,0
                       >            load_flag 0
38ab : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
38ad : 48              >            pha         ;use stack to load status
38ae : b96b02          >            lda absANa,y    ;precharge accu
38b1 : 28              >            plp
                        
38b2 : 2133                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
38b4 : 08              >            php         ;save flags
38b5 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
38b8 : f003            >        beq skip3032
                       >        trap            ;failed not equal (non zero)
38ba : 20d144          >        jsr report_error
                       >
38bd :                 >skip3032
                       >
38bd : 68              >            pla         ;load status
                       >            eor_flag 0
38be : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
38c0 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
38c3 : f003            >        beq skip3035
                       >        trap            ;failed not equal (non zero)
38c5 : 20d144          >        jsr report_error
                       >
38c8 :                 >skip3035
                       >
                        
38c8 : ca                       dex
38c9 : ca                       dex
38ca : 88                       dey
38cb : 10de                     bpl tand12
38cd : a206                     ldx #6
38cf : a003                     ldy #3
38d1 :                  tand13
                                set_ay  absANa,$ff
                       >            load_flag $ff
38d1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
38d3 : 48              >            pha         ;use stack to load status
38d4 : b96b02          >            lda absANa,y    ;precharge accu
38d7 : 28              >            plp
                        
38d8 : 2133                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
38da : 08              >            php         ;save flags
38db : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
38de : f003            >        beq skip3040
                       >        trap            ;failed not equal (non zero)
38e0 : 20d144          >        jsr report_error
                       >
38e3 :                 >skip3040
                       >
38e3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
38e4 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
38e6 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
38e9 : f003            >        beq skip3043
                       >        trap            ;failed not equal (non zero)
38eb : 20d144          >        jsr report_error
                       >
38ee :                 >skip3043
                       >
                        
38ee : ca                       dex
38ef : ca                       dex
38f0 : 88                       dey
38f1 : 10de                     bpl tand13
                        
38f3 : a003                     ldy #3      ;(zp),y
38f5 :                  tand14
                                set_ay  absANa,0
                       >            load_flag 0
38f5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
38f7 : 48              >            pha         ;use stack to load status
38f8 : b96b02          >            lda absANa,y    ;precharge accu
38fb : 28              >            plp
                        
38fc : 3133                     and (indAN),y
                                tst_ay  absrlo,absflo,0
38fe : 08              >            php         ;save flags
38ff : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3902 : f003            >        beq skip3048
                       >        trap            ;failed not equal (non zero)
3904 : 20d144          >        jsr report_error
                       >
3907 :                 >skip3048
                       >
3907 : 68              >            pla         ;load status
                       >            eor_flag 0
3908 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
390a : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
390d : f003            >        beq skip3051
                       >        trap            ;failed not equal (non zero)
390f : 20d144          >        jsr report_error
                       >
3912 :                 >skip3051
                       >
                        
3912 : 88                       dey
3913 : 10e0                     bpl tand14
3915 : a003                     ldy #3
3917 :                  tand15
                                set_ay  absANa,$ff
                       >            load_flag $ff
3917 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3919 : 48              >            pha         ;use stack to load status
391a : b96b02          >            lda absANa,y    ;precharge accu
391d : 28              >            plp
                        
391e : 3133                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
3920 : 08              >            php         ;save flags
3921 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3924 : f003            >        beq skip3056
                       >        trap            ;failed not equal (non zero)
3926 : 20d144          >        jsr report_error
                       >
3929 :                 >skip3056
                       >
3929 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
392a : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
392c : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
392f : f003            >        beq skip3059
                       >        trap            ;failed not equal (non zero)
3931 : 20d144          >        jsr report_error
                       >
3934 :                 >skip3059
                       >
                        
3934 : 88                       dey
3935 : 10e0                     bpl tand15
                                next_test
3937 : ad0002          >            lda test_case   ;previous test
393a : c926            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
393c : f003            >        beq skip3062
                       >        trap            ;failed not equal (non zero)
393e : 20d144          >        jsr report_error
                       >
3941 :                 >skip3062
                       >
0027 =                 >test_num = test_num + 1
3941 : a927            >            lda #test_num   ;*** next tests' number
3943 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; EOR
3946 : a203                     ldx #3          ;immediate - self modifying code
3948 : b519             teor    lda zpEO,x
394a : 8d0d02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,0
                       >            load_flag 0
394d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
394f : 48              >            pha         ;use stack to load status
3950 : bd6f02          >            lda absEOa,x    ;precharge accu
3953 : 28              >            plp
                        
3954 : 200c02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,0
3957 : 08              >            php         ;save flags
3958 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
395b : f003            >        beq skip3067
                       >        trap            ;failed not equal (non zero)
395d : 20d144          >        jsr report_error
                       >
3960 :                 >skip3067
                       >
3960 : 68              >            pla         ;load status
                       >            eor_flag 0
3961 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3963 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3966 : f003            >        beq skip3070
                       >        trap            ;failed not equal (non zero)
3968 : 20d144          >        jsr report_error
                       >
396b :                 >skip3070
                       >
                        
396b : ca                       dex
396c : 10da                     bpl teor
396e : a203                     ldx #3
3970 : b519             teor1   lda zpEO,x
3972 : 8d0d02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,$ff
                       >            load_flag $ff
3975 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3977 : 48              >            pha         ;use stack to load status
3978 : bd6f02          >            lda absEOa,x    ;precharge accu
397b : 28              >            plp
                        
397c : 200c02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
397f : 08              >            php         ;save flags
3980 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3983 : f003            >        beq skip3075
                       >        trap            ;failed not equal (non zero)
3985 : 20d144          >        jsr report_error
                       >
3988 :                 >skip3075
                       >
3988 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3989 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
398b : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
398e : f003            >        beq skip3078
                       >        trap            ;failed not equal (non zero)
3990 : 20d144          >        jsr report_error
                       >
3993 :                 >skip3078
                       >
                        
3993 : ca                       dex
3994 : 10da                     bpl teor1
                            
3996 : a203                     ldx #3      ;zp
3998 : b519             teor2    lda zpEO,x
399a : 8503                     sta zpt
                                set_ax  absEOa,0
                       >            load_flag 0
399c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
399e : 48              >            pha         ;use stack to load status
399f : bd6f02          >            lda absEOa,x    ;precharge accu
39a2 : 28              >            plp
                        
39a3 : 4503                     eor zpt
                                tst_ax  absrlo,absflo,0
39a5 : 08              >            php         ;save flags
39a6 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
39a9 : f003            >        beq skip3083
                       >        trap            ;failed not equal (non zero)
39ab : 20d144          >        jsr report_error
                       >
39ae :                 >skip3083
                       >
39ae : 68              >            pla         ;load status
                       >            eor_flag 0
39af : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
39b1 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
39b4 : f003            >        beq skip3086
                       >        trap            ;failed not equal (non zero)
39b6 : 20d144          >        jsr report_error
                       >
39b9 :                 >skip3086
                       >
                        
39b9 : ca                       dex
39ba : 10dc                     bpl teor2
39bc : a203                     ldx #3
39be : b519             teor3   lda zpEO,x
39c0 : 8503                     sta zpt
                                set_ax  absEOa,$ff
                       >            load_flag $ff
39c2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
39c4 : 48              >            pha         ;use stack to load status
39c5 : bd6f02          >            lda absEOa,x    ;precharge accu
39c8 : 28              >            plp
                        
39c9 : 4503                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
39cb : 08              >            php         ;save flags
39cc : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
39cf : f003            >        beq skip3091
                       >        trap            ;failed not equal (non zero)
39d1 : 20d144          >        jsr report_error
                       >
39d4 :                 >skip3091
                       >
39d4 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
39d5 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
39d7 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
39da : f003            >        beq skip3094
                       >        trap            ;failed not equal (non zero)
39dc : 20d144          >        jsr report_error
                       >
39df :                 >skip3094
                       >
                        
39df : ca                       dex
39e0 : 10dc                     bpl teor3
                        
39e2 : a203                     ldx #3      ;abs
39e4 : b519             teor4   lda zpEO,x
39e6 : 8d0302                   sta abst
                                set_ax  absEOa,0
                       >            load_flag 0
39e9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
39eb : 48              >            pha         ;use stack to load status
39ec : bd6f02          >            lda absEOa,x    ;precharge accu
39ef : 28              >            plp
                        
39f0 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,0
39f3 : 08              >            php         ;save flags
39f4 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
39f7 : f003            >        beq skip3099
                       >        trap            ;failed not equal (non zero)
39f9 : 20d144          >        jsr report_error
                       >
39fc :                 >skip3099
                       >
39fc : 68              >            pla         ;load status
                       >            eor_flag 0
39fd : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
39ff : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3a02 : f003            >        beq skip3102
                       >        trap            ;failed not equal (non zero)
3a04 : 20d144          >        jsr report_error
                       >
3a07 :                 >skip3102
                       >
                        
3a07 : ca                       dex
3a08 : 10da                     bpl teor4
3a0a : a203                     ldx #3
3a0c : b519             teor5   lda zpEO,x
3a0e : 8d0302                   sta abst
                                set_ax  absEOa,$ff
                       >            load_flag $ff
3a11 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3a13 : 48              >            pha         ;use stack to load status
3a14 : bd6f02          >            lda absEOa,x    ;precharge accu
3a17 : 28              >            plp
                        
3a18 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
3a1b : 08              >            php         ;save flags
3a1c : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3a1f : f003            >        beq skip3107
                       >        trap            ;failed not equal (non zero)
3a21 : 20d144          >        jsr report_error
                       >
3a24 :                 >skip3107
                       >
3a24 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3a25 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3a27 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3a2a : f003            >        beq skip3110
                       >        trap            ;failed not equal (non zero)
3a2c : 20d144          >        jsr report_error
                       >
3a2f :                 >skip3110
                       >
                        
3a2f : ca                       dex
3a30 : 1002                     bpl teor6
                        
3a32 : a203                     ldx #3      ;zp,x
3a34 :                  teor6
                                set_ax  absEOa,0
                       >            load_flag 0
3a34 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3a36 : 48              >            pha         ;use stack to load status
3a37 : bd6f02          >            lda absEOa,x    ;precharge accu
3a3a : 28              >            plp
                        
3a3b : 5519                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
3a3d : 08              >            php         ;save flags
3a3e : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3a41 : f003            >        beq skip3115
                       >        trap            ;failed not equal (non zero)
3a43 : 20d144          >        jsr report_error
                       >
3a46 :                 >skip3115
                       >
3a46 : 68              >            pla         ;load status
                       >            eor_flag 0
3a47 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3a49 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3a4c : f003            >        beq skip3118
                       >        trap            ;failed not equal (non zero)
3a4e : 20d144          >        jsr report_error
                       >
3a51 :                 >skip3118
                       >
                        
3a51 : ca                       dex
3a52 : 10e0                     bpl teor6
3a54 : a203                     ldx #3
3a56 :                  teor7
                                set_ax  absEOa,$ff
                       >            load_flag $ff
3a56 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3a58 : 48              >            pha         ;use stack to load status
3a59 : bd6f02          >            lda absEOa,x    ;precharge accu
3a5c : 28              >            plp
                        
3a5d : 5519                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
3a5f : 08              >            php         ;save flags
3a60 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3a63 : f003            >        beq skip3123
                       >        trap            ;failed not equal (non zero)
3a65 : 20d144          >        jsr report_error
                       >
3a68 :                 >skip3123
                       >
3a68 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3a69 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3a6b : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3a6e : f003            >        beq skip3126
                       >        trap            ;failed not equal (non zero)
3a70 : 20d144          >        jsr report_error
                       >
3a73 :                 >skip3126
                       >
                        
3a73 : ca                       dex
3a74 : 10e0                     bpl teor7
                        
3a76 : a203                     ldx #3      ;abs,x
3a78 :                  teor8
                                set_ax  absEOa,0
                       >            load_flag 0
3a78 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3a7a : 48              >            pha         ;use stack to load status
3a7b : bd6f02          >            lda absEOa,x    ;precharge accu
3a7e : 28              >            plp
                        
3a7f : 5d6302                   eor absEO,x
                                tst_ax  absrlo,absflo,0
3a82 : 08              >            php         ;save flags
3a83 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3a86 : f003            >        beq skip3131
                       >        trap            ;failed not equal (non zero)
3a88 : 20d144          >        jsr report_error
                       >
3a8b :                 >skip3131
                       >
3a8b : 68              >            pla         ;load status
                       >            eor_flag 0
3a8c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3a8e : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3a91 : f003            >        beq skip3134
                       >        trap            ;failed not equal (non zero)
3a93 : 20d144          >        jsr report_error
                       >
3a96 :                 >skip3134
                       >
                        
3a96 : ca                       dex
3a97 : 10df                     bpl teor8
3a99 : a203                     ldx #3
3a9b :                  teor9
                                set_ax  absEOa,$ff
                       >            load_flag $ff
3a9b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3a9d : 48              >            pha         ;use stack to load status
3a9e : bd6f02          >            lda absEOa,x    ;precharge accu
3aa1 : 28              >            plp
                        
3aa2 : 5d6302                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
3aa5 : 08              >            php         ;save flags
3aa6 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3aa9 : f003            >        beq skip3139
                       >        trap            ;failed not equal (non zero)
3aab : 20d144          >        jsr report_error
                       >
3aae :                 >skip3139
                       >
3aae : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3aaf : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3ab1 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3ab4 : f003            >        beq skip3142
                       >        trap            ;failed not equal (non zero)
3ab6 : 20d144          >        jsr report_error
                       >
3ab9 :                 >skip3142
                       >
                        
3ab9 : ca                       dex
3aba : 10df                     bpl teor9
                        
3abc : a003                     ldy #3      ;abs,y
3abe :                  teor10
                                set_ay  absEOa,0
                       >            load_flag 0
3abe : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3ac0 : 48              >            pha         ;use stack to load status
3ac1 : b96f02          >            lda absEOa,y    ;precharge accu
3ac4 : 28              >            plp
                        
3ac5 : 596302                   eor absEO,y
                                tst_ay  absrlo,absflo,0
3ac8 : 08              >            php         ;save flags
3ac9 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3acc : f003            >        beq skip3147
                       >        trap            ;failed not equal (non zero)
3ace : 20d144          >        jsr report_error
                       >
3ad1 :                 >skip3147
                       >
3ad1 : 68              >            pla         ;load status
                       >            eor_flag 0
3ad2 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3ad4 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3ad7 : f003            >        beq skip3150
                       >        trap            ;failed not equal (non zero)
3ad9 : 20d144          >        jsr report_error
                       >
3adc :                 >skip3150
                       >
                        
3adc : 88                       dey
3add : 10df                     bpl teor10
3adf : a003                     ldy #3
3ae1 :                  teor11
                                set_ay  absEOa,$ff
                       >            load_flag $ff
3ae1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3ae3 : 48              >            pha         ;use stack to load status
3ae4 : b96f02          >            lda absEOa,y    ;precharge accu
3ae7 : 28              >            plp
                        
3ae8 : 596302                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
3aeb : 08              >            php         ;save flags
3aec : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3aef : f003            >        beq skip3155
                       >        trap            ;failed not equal (non zero)
3af1 : 20d144          >        jsr report_error
                       >
3af4 :                 >skip3155
                       >
3af4 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3af5 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3af7 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3afa : f003            >        beq skip3158
                       >        trap            ;failed not equal (non zero)
3afc : 20d144          >        jsr report_error
                       >
3aff :                 >skip3158
                       >
                        
3aff : 88                       dey
3b00 : 10df                     bpl teor11
                        
3b02 : a206                     ldx #6      ;(zp,x)
3b04 : a003                     ldy #3
3b06 :                  teor12
                                set_ay  absEOa,0
                       >            load_flag 0
3b06 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3b08 : 48              >            pha         ;use stack to load status
3b09 : b96f02          >            lda absEOa,y    ;precharge accu
3b0c : 28              >            plp
                        
3b0d : 413b                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
3b0f : 08              >            php         ;save flags
3b10 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3b13 : f003            >        beq skip3163
                       >        trap            ;failed not equal (non zero)
3b15 : 20d144          >        jsr report_error
                       >
3b18 :                 >skip3163
                       >
3b18 : 68              >            pla         ;load status
                       >            eor_flag 0
3b19 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3b1b : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3b1e : f003            >        beq skip3166
                       >        trap            ;failed not equal (non zero)
3b20 : 20d144          >        jsr report_error
                       >
3b23 :                 >skip3166
                       >
                        
3b23 : ca                       dex
3b24 : ca                       dex
3b25 : 88                       dey
3b26 : 10de                     bpl teor12
3b28 : a206                     ldx #6
3b2a : a003                     ldy #3
3b2c :                  teor13
                                set_ay  absEOa,$ff
                       >            load_flag $ff
3b2c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3b2e : 48              >            pha         ;use stack to load status
3b2f : b96f02          >            lda absEOa,y    ;precharge accu
3b32 : 28              >            plp
                        
3b33 : 413b                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
3b35 : 08              >            php         ;save flags
3b36 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3b39 : f003            >        beq skip3171
                       >        trap            ;failed not equal (non zero)
3b3b : 20d144          >        jsr report_error
                       >
3b3e :                 >skip3171
                       >
3b3e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3b3f : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3b41 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3b44 : f003            >        beq skip3174
                       >        trap            ;failed not equal (non zero)
3b46 : 20d144          >        jsr report_error
                       >
3b49 :                 >skip3174
                       >
                        
3b49 : ca                       dex
3b4a : ca                       dex
3b4b : 88                       dey
3b4c : 10de                     bpl teor13
                        
3b4e : a003                     ldy #3      ;(zp),y
3b50 :                  teor14
                                set_ay  absEOa,0
                       >            load_flag 0
3b50 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3b52 : 48              >            pha         ;use stack to load status
3b53 : b96f02          >            lda absEOa,y    ;precharge accu
3b56 : 28              >            plp
                        
3b57 : 513b                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
3b59 : 08              >            php         ;save flags
3b5a : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3b5d : f003            >        beq skip3179
                       >        trap            ;failed not equal (non zero)
3b5f : 20d144          >        jsr report_error
                       >
3b62 :                 >skip3179
                       >
3b62 : 68              >            pla         ;load status
                       >            eor_flag 0
3b63 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3b65 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3b68 : f003            >        beq skip3182
                       >        trap            ;failed not equal (non zero)
3b6a : 20d144          >        jsr report_error
                       >
3b6d :                 >skip3182
                       >
                        
3b6d : 88                       dey
3b6e : 10e0                     bpl teor14
3b70 : a003                     ldy #3
3b72 :                  teor15
                                set_ay  absEOa,$ff
                       >            load_flag $ff
3b72 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3b74 : 48              >            pha         ;use stack to load status
3b75 : b96f02          >            lda absEOa,y    ;precharge accu
3b78 : 28              >            plp
                        
3b79 : 513b                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
3b7b : 08              >            php         ;save flags
3b7c : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3b7f : f003            >        beq skip3187
                       >        trap            ;failed not equal (non zero)
3b81 : 20d144          >        jsr report_error
                       >
3b84 :                 >skip3187
                       >
3b84 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3b85 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3b87 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3b8a : f003            >        beq skip3190
                       >        trap            ;failed not equal (non zero)
3b8c : 20d144          >        jsr report_error
                       >
3b8f :                 >skip3190
                       >
                        
3b8f : 88                       dey
3b90 : 10e0                     bpl teor15
                                next_test
3b92 : ad0002          >            lda test_case   ;previous test
3b95 : c927            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3b97 : f003            >        beq skip3193
                       >        trap            ;failed not equal (non zero)
3b99 : 20d144          >        jsr report_error
                       >
3b9c :                 >skip3193
                       >
0028 =                 >test_num = test_num + 1
3b9c : a928            >            lda #test_num   ;*** next tests' number
3b9e : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; OR
3ba1 : a203                     ldx #3          ;immediate - self modifying code
3ba3 : b511             tora    lda zpOR,x
3ba5 : 8d1002                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,0
                       >            load_flag 0
3ba8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3baa : 48              >            pha         ;use stack to load status
3bab : bd6702          >            lda absORa,x    ;precharge accu
3bae : 28              >            plp
                        
3baf : 200f02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,0
3bb2 : 08              >            php         ;save flags
3bb3 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3bb6 : f003            >        beq skip3198
                       >        trap            ;failed not equal (non zero)
3bb8 : 20d144          >        jsr report_error
                       >
3bbb :                 >skip3198
                       >
3bbb : 68              >            pla         ;load status
                       >            eor_flag 0
3bbc : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3bbe : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3bc1 : f003            >        beq skip3201
                       >        trap            ;failed not equal (non zero)
3bc3 : 20d144          >        jsr report_error
                       >
3bc6 :                 >skip3201
                       >
                        
3bc6 : ca                       dex
3bc7 : 10da                     bpl tora
3bc9 : a203                     ldx #3
3bcb : b511             tora1   lda zpOR,x
3bcd : 8d1002                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,$ff
                       >            load_flag $ff
3bd0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3bd2 : 48              >            pha         ;use stack to load status
3bd3 : bd6702          >            lda absORa,x    ;precharge accu
3bd6 : 28              >            plp
                        
3bd7 : 200f02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
3bda : 08              >            php         ;save flags
3bdb : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3bde : f003            >        beq skip3206
                       >        trap            ;failed not equal (non zero)
3be0 : 20d144          >        jsr report_error
                       >
3be3 :                 >skip3206
                       >
3be3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3be4 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3be6 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3be9 : f003            >        beq skip3209
                       >        trap            ;failed not equal (non zero)
3beb : 20d144          >        jsr report_error
                       >
3bee :                 >skip3209
                       >
                        
3bee : ca                       dex
3bef : 10da                     bpl tora1
                            
3bf1 : a203                     ldx #3      ;zp
3bf3 : b511             tora2   lda zpOR,x
3bf5 : 8503                     sta zpt
                                set_ax  absORa,0
                       >            load_flag 0
3bf7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3bf9 : 48              >            pha         ;use stack to load status
3bfa : bd6702          >            lda absORa,x    ;precharge accu
3bfd : 28              >            plp
                        
3bfe : 0503                     ora zpt
                                tst_ax  absrlo,absflo,0
3c00 : 08              >            php         ;save flags
3c01 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3c04 : f003            >        beq skip3214
                       >        trap            ;failed not equal (non zero)
3c06 : 20d144          >        jsr report_error
                       >
3c09 :                 >skip3214
                       >
3c09 : 68              >            pla         ;load status
                       >            eor_flag 0
3c0a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3c0c : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3c0f : f003            >        beq skip3217
                       >        trap            ;failed not equal (non zero)
3c11 : 20d144          >        jsr report_error
                       >
3c14 :                 >skip3217
                       >
                        
3c14 : ca                       dex
3c15 : 10dc                     bpl tora2
3c17 : a203                     ldx #3
3c19 : b511             tora3   lda zpOR,x
3c1b : 8503                     sta zpt
                                set_ax  absORa,$ff
                       >            load_flag $ff
3c1d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3c1f : 48              >            pha         ;use stack to load status
3c20 : bd6702          >            lda absORa,x    ;precharge accu
3c23 : 28              >            plp
                        
3c24 : 0503                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
3c26 : 08              >            php         ;save flags
3c27 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3c2a : f003            >        beq skip3222
                       >        trap            ;failed not equal (non zero)
3c2c : 20d144          >        jsr report_error
                       >
3c2f :                 >skip3222
                       >
3c2f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3c30 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3c32 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3c35 : f003            >        beq skip3225
                       >        trap            ;failed not equal (non zero)
3c37 : 20d144          >        jsr report_error
                       >
3c3a :                 >skip3225
                       >
                        
3c3a : ca                       dex
3c3b : 10dc                     bpl tora3
                        
3c3d : a203                     ldx #3      ;abs
3c3f : b511             tora4   lda zpOR,x
3c41 : 8d0302                   sta abst
                                set_ax  absORa,0
                       >            load_flag 0
3c44 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3c46 : 48              >            pha         ;use stack to load status
3c47 : bd6702          >            lda absORa,x    ;precharge accu
3c4a : 28              >            plp
                        
3c4b : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,0
3c4e : 08              >            php         ;save flags
3c4f : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3c52 : f003            >        beq skip3230
                       >        trap            ;failed not equal (non zero)
3c54 : 20d144          >        jsr report_error
                       >
3c57 :                 >skip3230
                       >
3c57 : 68              >            pla         ;load status
                       >            eor_flag 0
3c58 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3c5a : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3c5d : f003            >        beq skip3233
                       >        trap            ;failed not equal (non zero)
3c5f : 20d144          >        jsr report_error
                       >
3c62 :                 >skip3233
                       >
                        
3c62 : ca                       dex
3c63 : 10da                     bpl tora4
3c65 : a203                     ldx #3
3c67 : b511             tora5   lda zpOR,x
3c69 : 8d0302                   sta abst
                                set_ax  absORa,$ff
                       >            load_flag $ff
3c6c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3c6e : 48              >            pha         ;use stack to load status
3c6f : bd6702          >            lda absORa,x    ;precharge accu
3c72 : 28              >            plp
                        
3c73 : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
3c76 : 08              >            php         ;save flags
3c77 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3c7a : f003            >        beq skip3238
                       >        trap            ;failed not equal (non zero)
3c7c : 20d144          >        jsr report_error
                       >
3c7f :                 >skip3238
                       >
3c7f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3c80 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3c82 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3c85 : f003            >        beq skip3241
                       >        trap            ;failed not equal (non zero)
3c87 : 20d144          >        jsr report_error
                       >
3c8a :                 >skip3241
                       >
                        
3c8a : ca                       dex
3c8b : 1002                     bpl tora6
                        
3c8d : a203                     ldx #3      ;zp,x
3c8f :                  tora6
                                set_ax  absORa,0
                       >            load_flag 0
3c8f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3c91 : 48              >            pha         ;use stack to load status
3c92 : bd6702          >            lda absORa,x    ;precharge accu
3c95 : 28              >            plp
                        
3c96 : 1511                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
3c98 : 08              >            php         ;save flags
3c99 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3c9c : f003            >        beq skip3246
                       >        trap            ;failed not equal (non zero)
3c9e : 20d144          >        jsr report_error
                       >
3ca1 :                 >skip3246
                       >
3ca1 : 68              >            pla         ;load status
                       >            eor_flag 0
3ca2 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3ca4 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3ca7 : f003            >        beq skip3249
                       >        trap            ;failed not equal (non zero)
3ca9 : 20d144          >        jsr report_error
                       >
3cac :                 >skip3249
                       >
                        
3cac : ca                       dex
3cad : 10e0                     bpl tora6
3caf : a203                     ldx #3
3cb1 :                  tora7
                                set_ax  absORa,$ff
                       >            load_flag $ff
3cb1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3cb3 : 48              >            pha         ;use stack to load status
3cb4 : bd6702          >            lda absORa,x    ;precharge accu
3cb7 : 28              >            plp
                        
3cb8 : 1511                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
3cba : 08              >            php         ;save flags
3cbb : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3cbe : f003            >        beq skip3254
                       >        trap            ;failed not equal (non zero)
3cc0 : 20d144          >        jsr report_error
                       >
3cc3 :                 >skip3254
                       >
3cc3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3cc4 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3cc6 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3cc9 : f003            >        beq skip3257
                       >        trap            ;failed not equal (non zero)
3ccb : 20d144          >        jsr report_error
                       >
3cce :                 >skip3257
                       >
                        
3cce : ca                       dex
3ccf : 10e0                     bpl tora7
                        
3cd1 : a203                     ldx #3      ;abs,x
3cd3 :                  tora8
                                set_ax  absORa,0
                       >            load_flag 0
3cd3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3cd5 : 48              >            pha         ;use stack to load status
3cd6 : bd6702          >            lda absORa,x    ;precharge accu
3cd9 : 28              >            plp
                        
3cda : 1d5b02                   ora absOR,x
                                tst_ax  absrlo,absflo,0
3cdd : 08              >            php         ;save flags
3cde : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3ce1 : f003            >        beq skip3262
                       >        trap            ;failed not equal (non zero)
3ce3 : 20d144          >        jsr report_error
                       >
3ce6 :                 >skip3262
                       >
3ce6 : 68              >            pla         ;load status
                       >            eor_flag 0
3ce7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3ce9 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3cec : f003            >        beq skip3265
                       >        trap            ;failed not equal (non zero)
3cee : 20d144          >        jsr report_error
                       >
3cf1 :                 >skip3265
                       >
                        
3cf1 : ca                       dex
3cf2 : 10df                     bpl tora8
3cf4 : a203                     ldx #3
3cf6 :                  tora9
                                set_ax  absORa,$ff
                       >            load_flag $ff
3cf6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3cf8 : 48              >            pha         ;use stack to load status
3cf9 : bd6702          >            lda absORa,x    ;precharge accu
3cfc : 28              >            plp
                        
3cfd : 1d5b02                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
3d00 : 08              >            php         ;save flags
3d01 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3d04 : f003            >        beq skip3270
                       >        trap            ;failed not equal (non zero)
3d06 : 20d144          >        jsr report_error
                       >
3d09 :                 >skip3270
                       >
3d09 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3d0a : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3d0c : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3d0f : f003            >        beq skip3273
                       >        trap            ;failed not equal (non zero)
3d11 : 20d144          >        jsr report_error
                       >
3d14 :                 >skip3273
                       >
                        
3d14 : ca                       dex
3d15 : 10df                     bpl tora9
                        
3d17 : a003                     ldy #3      ;abs,y
3d19 :                  tora10
                                set_ay  absORa,0
                       >            load_flag 0
3d19 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3d1b : 48              >            pha         ;use stack to load status
3d1c : b96702          >            lda absORa,y    ;precharge accu
3d1f : 28              >            plp
                        
3d20 : 195b02                   ora absOR,y
                                tst_ay  absrlo,absflo,0
3d23 : 08              >            php         ;save flags
3d24 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3d27 : f003            >        beq skip3278
                       >        trap            ;failed not equal (non zero)
3d29 : 20d144          >        jsr report_error
                       >
3d2c :                 >skip3278
                       >
3d2c : 68              >            pla         ;load status
                       >            eor_flag 0
3d2d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3d2f : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3d32 : f003            >        beq skip3281
                       >        trap            ;failed not equal (non zero)
3d34 : 20d144          >        jsr report_error
                       >
3d37 :                 >skip3281
                       >
                        
3d37 : 88                       dey
3d38 : 10df                     bpl tora10
3d3a : a003                     ldy #3
3d3c :                  tora11
                                set_ay  absORa,$ff
                       >            load_flag $ff
3d3c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3d3e : 48              >            pha         ;use stack to load status
3d3f : b96702          >            lda absORa,y    ;precharge accu
3d42 : 28              >            plp
                        
3d43 : 195b02                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
3d46 : 08              >            php         ;save flags
3d47 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3d4a : f003            >        beq skip3286
                       >        trap            ;failed not equal (non zero)
3d4c : 20d144          >        jsr report_error
                       >
3d4f :                 >skip3286
                       >
3d4f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3d50 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3d52 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3d55 : f003            >        beq skip3289
                       >        trap            ;failed not equal (non zero)
3d57 : 20d144          >        jsr report_error
                       >
3d5a :                 >skip3289
                       >
                        
3d5a : 88                       dey
3d5b : 10df                     bpl tora11
                        
3d5d : a206                     ldx #6      ;(zp,x)
3d5f : a003                     ldy #3
3d61 :                  tora12
                                set_ay  absORa,0
                       >            load_flag 0
3d61 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3d63 : 48              >            pha         ;use stack to load status
3d64 : b96702          >            lda absORa,y    ;precharge accu
3d67 : 28              >            plp
                        
3d68 : 0143                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
3d6a : 08              >            php         ;save flags
3d6b : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3d6e : f003            >        beq skip3294
                       >        trap            ;failed not equal (non zero)
3d70 : 20d144          >        jsr report_error
                       >
3d73 :                 >skip3294
                       >
3d73 : 68              >            pla         ;load status
                       >            eor_flag 0
3d74 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3d76 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3d79 : f003            >        beq skip3297
                       >        trap            ;failed not equal (non zero)
3d7b : 20d144          >        jsr report_error
                       >
3d7e :                 >skip3297
                       >
                        
3d7e : ca                       dex
3d7f : ca                       dex
3d80 : 88                       dey
3d81 : 10de                     bpl tora12
3d83 : a206                     ldx #6
3d85 : a003                     ldy #3
3d87 :                  tora13
                                set_ay  absORa,$ff
                       >            load_flag $ff
3d87 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3d89 : 48              >            pha         ;use stack to load status
3d8a : b96702          >            lda absORa,y    ;precharge accu
3d8d : 28              >            plp
                        
3d8e : 0143                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
3d90 : 08              >            php         ;save flags
3d91 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3d94 : f003            >        beq skip3302
                       >        trap            ;failed not equal (non zero)
3d96 : 20d144          >        jsr report_error
                       >
3d99 :                 >skip3302
                       >
3d99 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3d9a : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3d9c : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3d9f : f003            >        beq skip3305
                       >        trap            ;failed not equal (non zero)
3da1 : 20d144          >        jsr report_error
                       >
3da4 :                 >skip3305
                       >
                        
3da4 : ca                       dex
3da5 : ca                       dex
3da6 : 88                       dey
3da7 : 10de                     bpl tora13
                        
3da9 : a003                     ldy #3      ;(zp),y
3dab :                  tora14
                                set_ay  absORa,0
                       >            load_flag 0
3dab : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3dad : 48              >            pha         ;use stack to load status
3dae : b96702          >            lda absORa,y    ;precharge accu
3db1 : 28              >            plp
                        
3db2 : 1143                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
3db4 : 08              >            php         ;save flags
3db5 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3db8 : f003            >        beq skip3310
                       >        trap            ;failed not equal (non zero)
3dba : 20d144          >        jsr report_error
                       >
3dbd :                 >skip3310
                       >
3dbd : 68              >            pla         ;load status
                       >            eor_flag 0
3dbe : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
3dc0 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3dc3 : f003            >        beq skip3313
                       >        trap            ;failed not equal (non zero)
3dc5 : 20d144          >        jsr report_error
                       >
3dc8 :                 >skip3313
                       >
                        
3dc8 : 88                       dey
3dc9 : 10e0                     bpl tora14
3dcb : a003                     ldy #3
3dcd :                  tora15
                                set_ay  absORa,$ff
                       >            load_flag $ff
3dcd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3dcf : 48              >            pha         ;use stack to load status
3dd0 : b96702          >            lda absORa,y    ;precharge accu
3dd3 : 28              >            plp
                        
3dd4 : 1143                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
3dd6 : 08              >            php         ;save flags
3dd7 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3dda : f003            >        beq skip3318
                       >        trap            ;failed not equal (non zero)
3ddc : 20d144          >        jsr report_error
                       >
3ddf :                 >skip3318
                       >
3ddf : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3de0 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
3de2 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3de5 : f003            >        beq skip3321
                       >        trap            ;failed not equal (non zero)
3de7 : 20d144          >        jsr report_error
                       >
3dea :                 >skip3321
                       >
                        
3dea : 88                       dey
3deb : 10e0                     bpl tora15
                            if I_flag = 3
3ded : 58                       cli
                            endif                
                                next_test
3dee : ad0002          >            lda test_case   ;previous test
3df1 : c928            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3df3 : f003            >        beq skip3324
                       >        trap            ;failed not equal (non zero)
3df5 : 20d144          >        jsr report_error
                       >
3df8 :                 >skip3324
                       >
0029 =                 >test_num = test_num + 1
3df8 : a929            >            lda #test_num   ;*** next tests' number
3dfa : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
3dfd : d8                       cld
3dfe : a205                     ldx #ad2        ;for indexed test
3e00 : a0ff                     ldy #$ff        ;max range
3e02 : a900                     lda #0          ;start with adding zeroes & no carry
3e04 : 8503                     sta adfc        ;carry in - for diag
3e06 : 8504                     sta ad1         ;operand 1 - accumulator
3e08 : 8505                     sta ad2         ;operand 2 - memory or immediate
3e0a : 8d0302                   sta ada2        ;non zp
3e0d : 8506                     sta adrl        ;expected result bits 0-7
3e0f : 8507                     sta adrh        ;expected result bit 8 (carry out)
3e11 : a9ff                     lda #$ff        ;complemented operand 2 for subtract
3e13 : 8509                     sta sb2
3e15 : 8d0402                   sta sba2        ;non zp
3e18 : a902                     lda #2          ;expected Z-flag
3e1a : 8508                     sta adrf
3e1c : 18               tadd    clc             ;test with carry clear
3e1d : 205441                   jsr chkadd
3e20 : e603                     inc adfc        ;now with carry
3e22 : e606                     inc adrl        ;result +1
3e24 : 08                       php             ;save N & Z from low result
3e25 : 08                       php
3e26 : 68                       pla             ;accu holds expected flags
3e27 : 2982                     and #$82        ;mask N & Z
3e29 : 28                       plp
3e2a : d002                     bne tadd1
3e2c : e607                     inc adrh        ;result bit 8 - carry
3e2e : 0507             tadd1   ora adrh        ;merge C to expected flags
3e30 : 8508                     sta adrf        ;save expected flags except overflow
3e32 : 38                       sec             ;test with carry set
3e33 : 205441                   jsr chkadd
3e36 : c603                     dec adfc        ;same for operand +1 but no carry
3e38 : e604                     inc ad1
3e3a : d0e0                     bne tadd        ;iterate op1
3e3c : a900                     lda #0          ;preset result to op2 when op1 = 0
3e3e : 8507                     sta adrh
3e40 : ee0302                   inc ada2
3e43 : e605                     inc ad2
3e45 : 08                       php             ;save NZ as operand 2 becomes the new result
3e46 : 68                       pla
3e47 : 2982                     and #$82        ;mask N00000Z0
3e49 : 8508                     sta adrf        ;no need to check carry as we are adding to 0
3e4b : c609                     dec sb2         ;complement subtract operand 2
3e4d : ce0402                   dec sba2
3e50 : a505                     lda ad2         
3e52 : 8506                     sta adrl
3e54 : d0c6                     bne tadd        ;iterate op2
                            if disable_decimal < 1
                                next_test
3e56 : ad0002          >            lda test_case   ;previous test
3e59 : c929            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3e5b : f003            >        beq skip3327
                       >        trap            ;failed not equal (non zero)
3e5d : 20d144          >        jsr report_error
                       >
3e60 :                 >skip3327
                       >
002a =                 >test_num = test_num + 1
3e60 : a92a            >            lda #test_num   ;*** next tests' number
3e62 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
3e65 : f8                       sed 
3e66 : a205                     ldx #ad2        ;for indexed test
3e68 : a0ff                     ldy #$ff        ;max range
3e6a : a999                     lda #$99        ;start with adding 99 to 99 with carry
3e6c : 8504                     sta ad1         ;operand 1 - accumulator
3e6e : 8505                     sta ad2         ;operand 2 - memory or immediate
3e70 : 8d0302                   sta ada2        ;non zp
3e73 : 8506                     sta adrl        ;expected result bits 0-7
3e75 : a901                     lda #1          ;set carry in & out
3e77 : 8503                     sta adfc        ;carry in - for diag
3e79 : 8507                     sta adrh        ;expected result bit 8 (carry out)
3e7b : a900                     lda #0          ;complemented operand 2 for subtract
3e7d : 8509                     sta sb2
3e7f : 8d0402                   sta sba2        ;non zp
3e82 : 38               tdad    sec             ;test with carry set
3e83 : 20c13f                   jsr chkdad
3e86 : c603                     dec adfc        ;now with carry clear
3e88 : a506                     lda adrl        ;decimal adjust result
3e8a : d008                     bne tdad1       ;skip clear carry & preset result 99 (9A-1)
3e8c : c607                     dec adrh
3e8e : a999                     lda #$99
3e90 : 8506                     sta adrl
3e92 : d012                     bne tdad3
3e94 : 290f             tdad1   and #$f         ;lower nibble mask
3e96 : d00c                     bne tdad2       ;no decimal adjust needed
3e98 : c606                     dec adrl        ;decimal adjust (?0-6)
3e9a : c606                     dec adrl
3e9c : c606                     dec adrl
3e9e : c606                     dec adrl
3ea0 : c606                     dec adrl
3ea2 : c606                     dec adrl
3ea4 : c606             tdad2   dec adrl        ;result -1
3ea6 : 18               tdad3   clc             ;test with carry clear
3ea7 : 20c13f                   jsr chkdad
3eaa : e603                     inc adfc        ;same for operand -1 but with carry
3eac : a504                     lda ad1         ;decimal adjust operand 1
3eae : f015                     beq tdad5       ;iterate operand 2
3eb0 : 290f                     and #$f         ;lower nibble mask
3eb2 : d00c                     bne tdad4       ;skip decimal adjust
3eb4 : c604                     dec ad1         ;decimal adjust (?0-6)
3eb6 : c604                     dec ad1
3eb8 : c604                     dec ad1
3eba : c604                     dec ad1
3ebc : c604                     dec ad1
3ebe : c604                     dec ad1
3ec0 : c604             tdad4   dec ad1         ;operand 1 -1
3ec2 : 4c823e                   jmp tdad        ;iterate op1
                        
3ec5 : a999             tdad5   lda #$99        ;precharge op1 max
3ec7 : 8504                     sta ad1
3ec9 : a505                     lda ad2         ;decimal adjust operand 2
3ecb : f030                     beq tdad7       ;end of iteration
3ecd : 290f                     and #$f         ;lower nibble mask
3ecf : d018                     bne tdad6       ;skip decimal adjust
3ed1 : c605                     dec ad2         ;decimal adjust (?0-6)
3ed3 : c605                     dec ad2
3ed5 : c605                     dec ad2
3ed7 : c605                     dec ad2
3ed9 : c605                     dec ad2
3edb : c605                     dec ad2
3edd : e609                     inc sb2         ;complemented decimal adjust for subtract (?9+6)
3edf : e609                     inc sb2
3ee1 : e609                     inc sb2
3ee3 : e609                     inc sb2
3ee5 : e609                     inc sb2
3ee7 : e609                     inc sb2
3ee9 : c605             tdad6   dec ad2         ;operand 2 -1
3eeb : e609                     inc sb2         ;complemented operand for subtract
3eed : a509                     lda sb2
3eef : 8d0402                   sta sba2        ;copy as non zp operand
3ef2 : a505                     lda ad2
3ef4 : 8d0302                   sta ada2        ;copy as non zp operand
3ef7 : 8506                     sta adrl        ;new result since op1+carry=00+carry +op2=op2
3ef9 : e607                     inc adrh        ;result carry
3efb : d085                     bne tdad        ;iterate op2
3efd :                  tdad7
                                next_test
3efd : ad0002          >            lda test_case   ;previous test
3f00 : c92a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3f02 : f003            >        beq skip3330
                       >        trap            ;failed not equal (non zero)
3f04 : 20d144          >        jsr report_error
                       >
3f07 :                 >skip3330
                       >
002b =                 >test_num = test_num + 1
3f07 : a92b            >            lda #test_num   ;*** next tests' number
3f09 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; decimal/binary switch test
                        ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
                        ;   tables
3f0c : 18                       clc
3f0d : d8                       cld
3f0e : 08                       php
3f0f : a955                     lda #$55
3f11 : 6955                     adc #$55
3f13 : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after cld
3f15 : f003            >        beq skip3332
                       >        trap            ;failed not equal (non zero)
3f17 : 20d144          >        jsr report_error
                       >
3f1a :                 >skip3332
                        
3f1a : 18                       clc
3f1b : f8                       sed
3f1c : 08                       php
3f1d : a955                     lda #$55
3f1f : 6955                     adc #$55
3f21 : c910                     cmp #$10
                                trap_ne         ;expected decimal result after sed
3f23 : f003            >        beq skip3334
                       >        trap            ;failed not equal (non zero)
3f25 : 20d144          >        jsr report_error
                       >
3f28 :                 >skip3334
                        
3f28 : d8                       cld
3f29 : 28                       plp
3f2a : a955                     lda #$55
3f2c : 6955                     adc #$55
3f2e : c910                     cmp #$10
                                trap_ne         ;expected decimal result after plp D=1
3f30 : f003            >        beq skip3336
                       >        trap            ;failed not equal (non zero)
3f32 : 20d144          >        jsr report_error
                       >
3f35 :                 >skip3336
                        
3f35 : 28                       plp
3f36 : a955                     lda #$55
3f38 : 6955                     adc #$55
3f3a : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after plp D=0
3f3c : f003            >        beq skip3338
                       >        trap            ;failed not equal (non zero)
3f3e : 20d144          >        jsr report_error
                       >
3f41 :                 >skip3338
                        
3f41 : 18                       clc
3f42 : a93f                     lda #hi bin_rti_ret ;emulated interrupt for rti
3f44 : 48                       pha
3f45 : a95f                     lda #lo bin_rti_ret
3f47 : 48                       pha
3f48 : 08                       php
3f49 : f8                       sed
3f4a : a93f                     lda #hi dec_rti_ret ;emulated interrupt for rti
3f4c : 48                       pha
3f4d : a953                     lda #lo dec_rti_ret
3f4f : 48                       pha
3f50 : 08                       php
3f51 : d8                       cld
3f52 : 40                       rti
3f53 :                  dec_rti_ret
3f53 : a955                     lda #$55
3f55 : 6955                     adc #$55
3f57 : c910                     cmp #$10
                                trap_ne         ;expected decimal result after rti D=1
3f59 : f003            >        beq skip3340
                       >        trap            ;failed not equal (non zero)
3f5b : 20d144          >        jsr report_error
                       >
3f5e :                 >skip3340
                        
3f5e : 40                       rti
3f5f :                  bin_rti_ret        
3f5f : a955                     lda #$55
3f61 : 6955                     adc #$55
3f63 : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after rti D=0
3f65 : f003            >        beq skip3342
                       >        trap            ;failed not equal (non zero)
3f67 : 20d144          >        jsr report_error
                       >
3f6a :                 >skip3342
                        
                            endif
                            
3f6a : ad0002                   lda test_case
3f6d : c92b                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
3f6f : f003            >        beq skip3344
                       >        trap            ;failed not equal (non zero)
3f71 : 20d144          >        jsr report_error
                       >
3f74 :                 >skip3344
                        
3f74 : a9f0                     lda #$f0        ;mark opcode testing complete
3f76 : 8d0002                   sta test_case
                                
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
3f79 : d8              >            cld
3f7a : a900            >            lda #0
3f7c : 8503            >            sta zpt         ;set low byte of indirect pointer
3f7e : 8506            >            sta zpt+3       ;checksum high byte
                       >          if disable_selfmod = 0
3f80 : 8d1f05          >            sta range_adr   ;reset self modifying code
                       >          endif
3f83 : 18              >            clc
3f84 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
3f86 : 7501            >ccs33346      adc zero_page,x
3f88 : 9003            >            bcc ccs23346
3f8a : e606            >            inc zpt+3       ;carry to high byte
3f8c : 18              >            clc
3f8d : e8              >ccs23346      inx
3f8e : d0f6            >            bne ccs33346
3f90 : a202            >            ldx #hi(abs1)   ;set high byte of indirect pointer
3f92 : 8604            >            stx zpt+1
3f94 : a018            >            ldy #lo(abs1)   ;data after write & execute test area
3f96 : 7103            >ccs53346      adc (zpt),y
3f98 : 9003            >            bcc ccs43346
3f9a : e606            >            inc zpt+3       ;carry to high byte
3f9c : 18              >            clc
3f9d : c8              >ccs43346      iny
3f9e : d0f6            >            bne ccs53346
3fa0 : e8              >            inx             ;advance RAM high address
3fa1 : 8604            >            stx zpt+1
3fa3 : e000            >            cpx #ram_top
3fa5 : d0ef            >            bne ccs53346
3fa7 : 8505            >            sta zpt+2       ;checksum low is
3fa9 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
3fac : f003            >        beq skip3347
                       >        trap            ;failed not equal (non zero)
3fae : 20d144          >        jsr report_error
                       >
3fb1 :                 >skip3347
                       >
3fb1 : a506            >            lda zpt+3       ;checksum high is
3fb3 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
3fb6 : f003            >        beq skip3349
                       >        trap            ;failed not equal (non zero)
3fb8 : 20d144          >        jsr report_error
                       >
3fbb :                 >skip3349
                       >
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************
                        ; -------------       
                                success         ;if you get here everything went well
3fbb : 209a45          >        jsr report_success
                        
                        ; -------------       
                        ; S U C C E S S ************************************************
3fbe : 4c0004                   jmp start       ;run again      
                        
                            if disable_decimal < 1
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
3fc1 :                  chkdad
                        ; decimal ADC / SBC zp
3fc1 : 08                       php             ;save carry for subtract
3fc2 : a504                     lda ad1
3fc4 : 6505                     adc ad2         ;perform add
3fc6 : 08                       php          
3fc7 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
3fc9 : f003            >        beq skip3352
                       >        trap            ;failed not equal (non zero)
3fcb : 20d144          >        jsr report_error
                       >
3fce :                 >skip3352
                        
3fce : 68                       pla             ;check flags
3fcf : 2901                     and #1          ;mask carry
3fd1 : c507                     cmp adrh
                                trap_ne         ;bad carry
3fd3 : f003            >        beq skip3354
                       >        trap            ;failed not equal (non zero)
3fd5 : 20d144          >        jsr report_error
                       >
3fd8 :                 >skip3354
                        
3fd8 : 28                       plp
3fd9 : 08                       php             ;save carry for next add
3fda : a504                     lda ad1
3fdc : e509                     sbc sb2         ;perform subtract
3fde : 08                       php          
3fdf : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
3fe1 : f003            >        beq skip3356
                       >        trap            ;failed not equal (non zero)
3fe3 : 20d144          >        jsr report_error
                       >
3fe6 :                 >skip3356
                        
3fe6 : 68                       pla             ;check flags
3fe7 : 2901                     and #1          ;mask carry
3fe9 : c507                     cmp adrh
                                trap_ne         ;bad flags
3feb : f003            >        beq skip3358
                       >        trap            ;failed not equal (non zero)
3fed : 20d144          >        jsr report_error
                       >
3ff0 :                 >skip3358
                        
3ff0 : 28                       plp
                        ; decimal ADC / SBC abs
3ff1 : 08                       php             ;save carry for subtract
3ff2 : a504                     lda ad1
3ff4 : 6d0302                   adc ada2        ;perform add
3ff7 : 08                       php          
3ff8 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
3ffa : f003            >        beq skip3360
                       >        trap            ;failed not equal (non zero)
3ffc : 20d144          >        jsr report_error
                       >
3fff :                 >skip3360
                        
3fff : 68                       pla             ;check flags
4000 : 2901                     and #1          ;mask carry
4002 : c507                     cmp adrh
                                trap_ne         ;bad carry
4004 : f003            >        beq skip3362
                       >        trap            ;failed not equal (non zero)
4006 : 20d144          >        jsr report_error
                       >
4009 :                 >skip3362
                        
4009 : 28                       plp
400a : 08                       php             ;save carry for next add
400b : a504                     lda ad1
400d : ed0402                   sbc sba2        ;perform subtract
4010 : 08                       php          
4011 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
4013 : f003            >        beq skip3364
                       >        trap            ;failed not equal (non zero)
4015 : 20d144          >        jsr report_error
                       >
4018 :                 >skip3364
                        
4018 : 68                       pla             ;check flags
4019 : 2901                     and #1          ;mask carry
401b : c507                     cmp adrh
                                trap_ne         ;bad carry
401d : f003            >        beq skip3366
                       >        trap            ;failed not equal (non zero)
401f : 20d144          >        jsr report_error
                       >
4022 :                 >skip3366
                        
4022 : 28                       plp
                        ; decimal ADC / SBC #
4023 : 08                       php             ;save carry for subtract
4024 : a505                     lda ad2
4026 : 8d1302                   sta ex_adci+1   ;set ADC # operand
4029 : a504                     lda ad1
402b : 201202                   jsr ex_adci     ;execute ADC # in RAM
402e : 08                       php          
402f : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
4031 : f003            >        beq skip3368
                       >        trap            ;failed not equal (non zero)
4033 : 20d144          >        jsr report_error
                       >
4036 :                 >skip3368
                        
4036 : 68                       pla             ;check flags
4037 : 2901                     and #1          ;mask carry
4039 : c507                     cmp adrh
                                trap_ne         ;bad carry
403b : f003            >        beq skip3370
                       >        trap            ;failed not equal (non zero)
403d : 20d144          >        jsr report_error
                       >
4040 :                 >skip3370
                        
4040 : 28                       plp
4041 : 08                       php             ;save carry for next add
4042 : a509                     lda sb2
4044 : 8d1602                   sta ex_sbci+1   ;set SBC # operand
4047 : a504                     lda ad1
4049 : 201502                   jsr ex_sbci     ;execute SBC # in RAM
404c : 08                       php          
404d : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
404f : f003            >        beq skip3372
                       >        trap            ;failed not equal (non zero)
4051 : 20d144          >        jsr report_error
                       >
4054 :                 >skip3372
                        
4054 : 68                       pla             ;check flags
4055 : 2901                     and #1          ;mask carry
4057 : c507                     cmp adrh
                                trap_ne         ;bad carry
4059 : f003            >        beq skip3374
                       >        trap            ;failed not equal (non zero)
405b : 20d144          >        jsr report_error
                       >
405e :                 >skip3374
                        
405e : 28                       plp
                        ; decimal ADC / SBC zp,x
405f : 08                       php             ;save carry for subtract
4060 : a504                     lda ad1
4062 : 7500                     adc 0,x         ;perform add
4064 : 08                       php          
4065 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
4067 : f003            >        beq skip3376
                       >        trap            ;failed not equal (non zero)
4069 : 20d144          >        jsr report_error
                       >
406c :                 >skip3376
                        
406c : 68                       pla             ;check flags
406d : 2901                     and #1          ;mask carry
406f : c507                     cmp adrh
                                trap_ne         ;bad carry
4071 : f003            >        beq skip3378
                       >        trap            ;failed not equal (non zero)
4073 : 20d144          >        jsr report_error
                       >
4076 :                 >skip3378
                        
4076 : 28                       plp
4077 : 08                       php             ;save carry for next add
4078 : a504                     lda ad1
407a : f504                     sbc sb2-ad2,x   ;perform subtract
407c : 08                       php          
407d : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
407f : f003            >        beq skip3380
                       >        trap            ;failed not equal (non zero)
4081 : 20d144          >        jsr report_error
                       >
4084 :                 >skip3380
                        
4084 : 68                       pla             ;check flags
4085 : 2901                     and #1          ;mask carry
4087 : c507                     cmp adrh
                                trap_ne         ;bad carry
4089 : f003            >        beq skip3382
                       >        trap            ;failed not equal (non zero)
408b : 20d144          >        jsr report_error
                       >
408e :                 >skip3382
                        
408e : 28                       plp
                        ; decimal ADC / SBC abs,x
408f : 08                       php             ;save carry for subtract
4090 : a504                     lda ad1
4092 : 7dfe01                   adc ada2-ad2,x  ;perform add
4095 : 08                       php          
4096 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
4098 : f003            >        beq skip3384
                       >        trap            ;failed not equal (non zero)
409a : 20d144          >        jsr report_error
                       >
409d :                 >skip3384
                        
409d : 68                       pla             ;check flags
409e : 2901                     and #1          ;mask carry
40a0 : c507                     cmp adrh
                                trap_ne         ;bad carry
40a2 : f003            >        beq skip3386
                       >        trap            ;failed not equal (non zero)
40a4 : 20d144          >        jsr report_error
                       >
40a7 :                 >skip3386
                        
40a7 : 28                       plp
40a8 : 08                       php             ;save carry for next add
40a9 : a504                     lda ad1
40ab : fdff01                   sbc sba2-ad2,x  ;perform subtract
40ae : 08                       php          
40af : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
40b1 : f003            >        beq skip3388
                       >        trap            ;failed not equal (non zero)
40b3 : 20d144          >        jsr report_error
                       >
40b6 :                 >skip3388
                        
40b6 : 68                       pla             ;check flags
40b7 : 2901                     and #1          ;mask carry
40b9 : c507                     cmp adrh
                                trap_ne         ;bad carry
40bb : f003            >        beq skip3390
                       >        trap            ;failed not equal (non zero)
40bd : 20d144          >        jsr report_error
                       >
40c0 :                 >skip3390
                        
40c0 : 28                       plp
                        ; decimal ADC / SBC abs,y
40c1 : 08                       php             ;save carry for subtract
40c2 : a504                     lda ad1
40c4 : 790401                   adc ada2-$ff,y  ;perform add
40c7 : 08                       php          
40c8 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
40ca : f003            >        beq skip3392
                       >        trap            ;failed not equal (non zero)
40cc : 20d144          >        jsr report_error
                       >
40cf :                 >skip3392
                        
40cf : 68                       pla             ;check flags
40d0 : 2901                     and #1          ;mask carry
40d2 : c507                     cmp adrh
                                trap_ne         ;bad carry
40d4 : f003            >        beq skip3394
                       >        trap            ;failed not equal (non zero)
40d6 : 20d144          >        jsr report_error
                       >
40d9 :                 >skip3394
                        
40d9 : 28                       plp
40da : 08                       php             ;save carry for next add
40db : a504                     lda ad1
40dd : f90501                   sbc sba2-$ff,y  ;perform subtract
40e0 : 08                       php          
40e1 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
40e3 : f003            >        beq skip3396
                       >        trap            ;failed not equal (non zero)
40e5 : 20d144          >        jsr report_error
                       >
40e8 :                 >skip3396
                        
40e8 : 68                       pla             ;check flags
40e9 : 2901                     and #1          ;mask carry
40eb : c507                     cmp adrh
                                trap_ne         ;bad carry
40ed : f003            >        beq skip3398
                       >        trap            ;failed not equal (non zero)
40ef : 20d144          >        jsr report_error
                       >
40f2 :                 >skip3398
                        
40f2 : 28                       plp
                        ; decimal ADC / SBC (zp,x)
40f3 : 08                       php             ;save carry for subtract
40f4 : a504                     lda ad1
40f6 : 6146                     adc (lo adi2-ad2,x) ;perform add
40f8 : 08                       php          
40f9 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
40fb : f003            >        beq skip3400
                       >        trap            ;failed not equal (non zero)
40fd : 20d144          >        jsr report_error
                       >
4100 :                 >skip3400
                        
4100 : 68                       pla             ;check flags
4101 : 2901                     and #1          ;mask carry
4103 : c507                     cmp adrh
                                trap_ne         ;bad carry
4105 : f003            >        beq skip3402
                       >        trap            ;failed not equal (non zero)
4107 : 20d144          >        jsr report_error
                       >
410a :                 >skip3402
                        
410a : 28                       plp
410b : 08                       php             ;save carry for next add
410c : a504                     lda ad1
410e : e148                     sbc (lo sbi2-ad2,x) ;perform subtract
4110 : 08                       php          
4111 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
4113 : f003            >        beq skip3404
                       >        trap            ;failed not equal (non zero)
4115 : 20d144          >        jsr report_error
                       >
4118 :                 >skip3404
                        
4118 : 68                       pla             ;check flags
4119 : 2901                     and #1          ;mask carry
411b : c507                     cmp adrh
                                trap_ne         ;bad carry
411d : f003            >        beq skip3406
                       >        trap            ;failed not equal (non zero)
411f : 20d144          >        jsr report_error
                       >
4122 :                 >skip3406
                        
4122 : 28                       plp
                        ; decimal ADC / SBC (abs),y
4123 : 08                       php             ;save carry for subtract
4124 : a504                     lda ad1
4126 : 714f                     adc (adiy2),y   ;perform add
4128 : 08                       php          
4129 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
412b : f003            >        beq skip3408
                       >        trap            ;failed not equal (non zero)
412d : 20d144          >        jsr report_error
                       >
4130 :                 >skip3408
                        
4130 : 68                       pla             ;check flags
4131 : 2901                     and #1          ;mask carry
4133 : c507                     cmp adrh
                                trap_ne         ;bad carry
4135 : f003            >        beq skip3410
                       >        trap            ;failed not equal (non zero)
4137 : 20d144          >        jsr report_error
                       >
413a :                 >skip3410
                        
413a : 28                       plp
413b : 08                       php             ;save carry for next add
413c : a504                     lda ad1
413e : f151                     sbc (sbiy2),y   ;perform subtract
4140 : 08                       php          
4141 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
4143 : f003            >        beq skip3412
                       >        trap            ;failed not equal (non zero)
4145 : 20d144          >        jsr report_error
                       >
4148 :                 >skip3412
                        
4148 : 68                       pla             ;check flags
4149 : 2901                     and #1          ;mask carry
414b : c507                     cmp adrh
                                trap_ne         ;bad carry
414d : f003            >        beq skip3414
                       >        trap            ;failed not equal (non zero)
414f : 20d144          >        jsr report_error
                       >
4152 :                 >skip3414
                        
4152 : 28                       plp
4153 : 60                       rts
                            endif
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
4154 : a508             chkadd  lda adrf        ;add V-flag if overflow
4156 : 2983                     and #$83        ;keep N-----ZC / clear V
4158 : 48                       pha
4159 : a504                     lda ad1         ;test sign unequal between operands
415b : 4505                     eor ad2
415d : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
415f : a504                     lda ad1         ;test sign equal between operands and result
4161 : 4506                     eor adrl
4163 : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
4165 : 68                       pla
4166 : 0940                     ora #$40        ;set V
4168 : 48                       pha
4169 : 68               ckad1   pla
416a : 8508                     sta adrf        ;save expected flags
                        ; binary ADC / SBC zp
416c : 08                       php             ;save carry for subtract
416d : a504                     lda ad1
416f : 6505                     adc ad2         ;perform add
4171 : 08                       php          
4172 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
4174 : f003            >        beq skip3416
                       >        trap            ;failed not equal (non zero)
4176 : 20d144          >        jsr report_error
                       >
4179 :                 >skip3416
                        
4179 : 68                       pla             ;check flags
417a : 29c3                     and #$c3        ;mask NV----ZC
417c : c508                     cmp adrf
                                trap_ne         ;bad flags
417e : f003            >        beq skip3418
                       >        trap            ;failed not equal (non zero)
4180 : 20d144          >        jsr report_error
                       >
4183 :                 >skip3418
                        
4183 : 28                       plp
4184 : 08                       php             ;save carry for next add
4185 : a504                     lda ad1
4187 : e509                     sbc sb2         ;perform subtract
4189 : 08                       php          
418a : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
418c : f003            >        beq skip3420
                       >        trap            ;failed not equal (non zero)
418e : 20d144          >        jsr report_error
                       >
4191 :                 >skip3420
                        
4191 : 68                       pla             ;check flags
4192 : 29c3                     and #$c3        ;mask NV----ZC
4194 : c508                     cmp adrf
                                trap_ne         ;bad flags
4196 : f003            >        beq skip3422
                       >        trap            ;failed not equal (non zero)
4198 : 20d144          >        jsr report_error
                       >
419b :                 >skip3422
                        
419b : 28                       plp
                        ; binary ADC / SBC abs
419c : 08                       php             ;save carry for subtract
419d : a504                     lda ad1
419f : 6d0302                   adc ada2        ;perform add
41a2 : 08                       php          
41a3 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
41a5 : f003            >        beq skip3424
                       >        trap            ;failed not equal (non zero)
41a7 : 20d144          >        jsr report_error
                       >
41aa :                 >skip3424
                        
41aa : 68                       pla             ;check flags
41ab : 29c3                     and #$c3        ;mask NV----ZC
41ad : c508                     cmp adrf
                                trap_ne         ;bad flags
41af : f003            >        beq skip3426
                       >        trap            ;failed not equal (non zero)
41b1 : 20d144          >        jsr report_error
                       >
41b4 :                 >skip3426
                        
41b4 : 28                       plp
41b5 : 08                       php             ;save carry for next add
41b6 : a504                     lda ad1
41b8 : ed0402                   sbc sba2        ;perform subtract
41bb : 08                       php          
41bc : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
41be : f003            >        beq skip3428
                       >        trap            ;failed not equal (non zero)
41c0 : 20d144          >        jsr report_error
                       >
41c3 :                 >skip3428
                        
41c3 : 68                       pla             ;check flags
41c4 : 29c3                     and #$c3        ;mask NV----ZC
41c6 : c508                     cmp adrf
                                trap_ne         ;bad flags
41c8 : f003            >        beq skip3430
                       >        trap            ;failed not equal (non zero)
41ca : 20d144          >        jsr report_error
                       >
41cd :                 >skip3430
                        
41cd : 28                       plp
                        ; binary ADC / SBC #
41ce : 08                       php             ;save carry for subtract
41cf : a505                     lda ad2
41d1 : 8d1302                   sta ex_adci+1   ;set ADC # operand
41d4 : a504                     lda ad1
41d6 : 201202                   jsr ex_adci     ;execute ADC # in RAM
41d9 : 08                       php          
41da : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
41dc : f003            >        beq skip3432
                       >        trap            ;failed not equal (non zero)
41de : 20d144          >        jsr report_error
                       >
41e1 :                 >skip3432
                        
41e1 : 68                       pla             ;check flags
41e2 : 29c3                     and #$c3        ;mask NV----ZC
41e4 : c508                     cmp adrf
                                trap_ne         ;bad flags
41e6 : f003            >        beq skip3434
                       >        trap            ;failed not equal (non zero)
41e8 : 20d144          >        jsr report_error
                       >
41eb :                 >skip3434
                        
41eb : 28                       plp
41ec : 08                       php             ;save carry for next add
41ed : a509                     lda sb2
41ef : 8d1602                   sta ex_sbci+1   ;set SBC # operand
41f2 : a504                     lda ad1
41f4 : 201502                   jsr ex_sbci     ;execute SBC # in RAM
41f7 : 08                       php          
41f8 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
41fa : f003            >        beq skip3436
                       >        trap            ;failed not equal (non zero)
41fc : 20d144          >        jsr report_error
                       >
41ff :                 >skip3436
                        
41ff : 68                       pla             ;check flags
4200 : 29c3                     and #$c3        ;mask NV----ZC
4202 : c508                     cmp adrf
                                trap_ne         ;bad flags
4204 : f003            >        beq skip3438
                       >        trap            ;failed not equal (non zero)
4206 : 20d144          >        jsr report_error
                       >
4209 :                 >skip3438
                        
4209 : 28                       plp
                        ; binary ADC / SBC zp,x
420a : 08                       php             ;save carry for subtract
420b : a504                     lda ad1
420d : 7500                     adc 0,x         ;perform add
420f : 08                       php          
4210 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
4212 : f003            >        beq skip3440
                       >        trap            ;failed not equal (non zero)
4214 : 20d144          >        jsr report_error
                       >
4217 :                 >skip3440
                        
4217 : 68                       pla             ;check flags
4218 : 29c3                     and #$c3        ;mask NV----ZC
421a : c508                     cmp adrf
                                trap_ne         ;bad flags
421c : f003            >        beq skip3442
                       >        trap            ;failed not equal (non zero)
421e : 20d144          >        jsr report_error
                       >
4221 :                 >skip3442
                        
4221 : 28                       plp
4222 : 08                       php             ;save carry for next add
4223 : a504                     lda ad1
4225 : f504                     sbc sb2-ad2,x   ;perform subtract
4227 : 08                       php          
4228 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
422a : f003            >        beq skip3444
                       >        trap            ;failed not equal (non zero)
422c : 20d144          >        jsr report_error
                       >
422f :                 >skip3444
                        
422f : 68                       pla             ;check flags
4230 : 29c3                     and #$c3        ;mask NV----ZC
4232 : c508                     cmp adrf
                                trap_ne         ;bad flags
4234 : f003            >        beq skip3446
                       >        trap            ;failed not equal (non zero)
4236 : 20d144          >        jsr report_error
                       >
4239 :                 >skip3446
                        
4239 : 28                       plp
                        ; binary ADC / SBC abs,x
423a : 08                       php             ;save carry for subtract
423b : a504                     lda ad1
423d : 7dfe01                   adc ada2-ad2,x  ;perform add
4240 : 08                       php          
4241 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
4243 : f003            >        beq skip3448
                       >        trap            ;failed not equal (non zero)
4245 : 20d144          >        jsr report_error
                       >
4248 :                 >skip3448
                        
4248 : 68                       pla             ;check flags
4249 : 29c3                     and #$c3        ;mask NV----ZC
424b : c508                     cmp adrf
                                trap_ne         ;bad flags
424d : f003            >        beq skip3450
                       >        trap            ;failed not equal (non zero)
424f : 20d144          >        jsr report_error
                       >
4252 :                 >skip3450
                        
4252 : 28                       plp
4253 : 08                       php             ;save carry for next add
4254 : a504                     lda ad1
4256 : fdff01                   sbc sba2-ad2,x  ;perform subtract
4259 : 08                       php          
425a : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
425c : f003            >        beq skip3452
                       >        trap            ;failed not equal (non zero)
425e : 20d144          >        jsr report_error
                       >
4261 :                 >skip3452
                        
4261 : 68                       pla             ;check flags
4262 : 29c3                     and #$c3        ;mask NV----ZC
4264 : c508                     cmp adrf
                                trap_ne         ;bad flags
4266 : f003            >        beq skip3454
                       >        trap            ;failed not equal (non zero)
4268 : 20d144          >        jsr report_error
                       >
426b :                 >skip3454
                        
426b : 28                       plp
                        ; binary ADC / SBC abs,y
426c : 08                       php             ;save carry for subtract
426d : a504                     lda ad1
426f : 790401                   adc ada2-$ff,y  ;perform add
4272 : 08                       php          
4273 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
4275 : f003            >        beq skip3456
                       >        trap            ;failed not equal (non zero)
4277 : 20d144          >        jsr report_error
                       >
427a :                 >skip3456
                        
427a : 68                       pla             ;check flags
427b : 29c3                     and #$c3        ;mask NV----ZC
427d : c508                     cmp adrf
                                trap_ne         ;bad flags
427f : f003            >        beq skip3458
                       >        trap            ;failed not equal (non zero)
4281 : 20d144          >        jsr report_error
                       >
4284 :                 >skip3458
                        
4284 : 28                       plp
4285 : 08                       php             ;save carry for next add
4286 : a504                     lda ad1
4288 : f90501                   sbc sba2-$ff,y  ;perform subtract
428b : 08                       php          
428c : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
428e : f003            >        beq skip3460
                       >        trap            ;failed not equal (non zero)
4290 : 20d144          >        jsr report_error
                       >
4293 :                 >skip3460
                        
4293 : 68                       pla             ;check flags
4294 : 29c3                     and #$c3        ;mask NV----ZC
4296 : c508                     cmp adrf
                                trap_ne         ;bad flags
4298 : f003            >        beq skip3462
                       >        trap            ;failed not equal (non zero)
429a : 20d144          >        jsr report_error
                       >
429d :                 >skip3462
                        
429d : 28                       plp
                        ; binary ADC / SBC (zp,x)
429e : 08                       php             ;save carry for subtract
429f : a504                     lda ad1
42a1 : 6146                     adc (lo adi2-ad2,x) ;perform add
42a3 : 08                       php          
42a4 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
42a6 : f003            >        beq skip3464
                       >        trap            ;failed not equal (non zero)
42a8 : 20d144          >        jsr report_error
                       >
42ab :                 >skip3464
                        
42ab : 68                       pla             ;check flags
42ac : 29c3                     and #$c3        ;mask NV----ZC
42ae : c508                     cmp adrf
                                trap_ne         ;bad flags
42b0 : f003            >        beq skip3466
                       >        trap            ;failed not equal (non zero)
42b2 : 20d144          >        jsr report_error
                       >
42b5 :                 >skip3466
                        
42b5 : 28                       plp
42b6 : 08                       php             ;save carry for next add
42b7 : a504                     lda ad1
42b9 : e148                     sbc (lo sbi2-ad2,x) ;perform subtract
42bb : 08                       php          
42bc : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
42be : f003            >        beq skip3468
                       >        trap            ;failed not equal (non zero)
42c0 : 20d144          >        jsr report_error
                       >
42c3 :                 >skip3468
                        
42c3 : 68                       pla             ;check flags
42c4 : 29c3                     and #$c3        ;mask NV----ZC
42c6 : c508                     cmp adrf
                                trap_ne         ;bad flags
42c8 : f003            >        beq skip3470
                       >        trap            ;failed not equal (non zero)
42ca : 20d144          >        jsr report_error
                       >
42cd :                 >skip3470
                        
42cd : 28                       plp
                        ; binary ADC / SBC (abs),y
42ce : 08                       php             ;save carry for subtract
42cf : a504                     lda ad1
42d1 : 714f                     adc (adiy2),y   ;perform add
42d3 : 08                       php          
42d4 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
42d6 : f003            >        beq skip3472
                       >        trap            ;failed not equal (non zero)
42d8 : 20d144          >        jsr report_error
                       >
42db :                 >skip3472
                        
42db : 68                       pla             ;check flags
42dc : 29c3                     and #$c3        ;mask NV----ZC
42de : c508                     cmp adrf
                                trap_ne         ;bad flags
42e0 : f003            >        beq skip3474
                       >        trap            ;failed not equal (non zero)
42e2 : 20d144          >        jsr report_error
                       >
42e5 :                 >skip3474
                        
42e5 : 28                       plp
42e6 : 08                       php             ;save carry for next add
42e7 : a504                     lda ad1
42e9 : f151                     sbc (sbiy2),y   ;perform subtract
42eb : 08                       php          
42ec : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
42ee : f003            >        beq skip3476
                       >        trap            ;failed not equal (non zero)
42f0 : 20d144          >        jsr report_error
                       >
42f3 :                 >skip3476
                        
42f3 : 68                       pla             ;check flags
42f4 : 29c3                     and #$c3        ;mask NV----ZC
42f6 : c508                     cmp adrf
                                trap_ne         ;bad flags
42f8 : f003            >        beq skip3478
                       >        trap            ;failed not equal (non zero)
42fa : 20d144          >        jsr report_error
                       >
42fd :                 >skip3478
                        
42fd : 28                       plp
42fe : 60                       rts
                        
                        ; target for the jump absolute test
42ff : 88                       dey
4300 : 88                       dey
4301 :                  test_far
4301 : 08                       php             ;either SP or Y count will fail, if we do not hit
4302 : 88                       dey
4303 : 88                       dey
4304 : 88                       dey
4305 : 28                       plp
                                trap_cs         ;flags loaded?
4306 : 9003            >        bcc skip3480
                       >        trap            ;failed carry set
4308 : 20d144          >        jsr report_error
                       >
430b :                 >skip3480
                        
                                trap_vs
430b : 5003            >        bvc skip3482
                       >        trap            ;failed overflow set
430d : 20d144          >        jsr report_error
                       >
4310 :                 >skip3482
                        
                                trap_mi
4310 : 1003            >        bpl skip3484
                       >        trap            ;failed minus (bit 7 set)
4312 : 20d144          >        jsr report_error
                       >
4315 :                 >skip3484
                        
                                trap_eq 
4315 : d003            >        bne skip3486
                       >        trap           ;failed equal (zero)
4317 : 20d144          >        jsr report_error
                       >
431a :                 >skip3486
                        
431a : c946                     cmp #'F'        ;registers loaded?
                                trap_ne
431c : f003            >        beq skip3488
                       >        trap            ;failed not equal (non zero)
431e : 20d144          >        jsr report_error
                       >
4321 :                 >skip3488
                        
4321 : e041                     cpx #'A'
                                trap_ne        
4323 : f003            >        beq skip3490
                       >        trap            ;failed not equal (non zero)
4325 : 20d144          >        jsr report_error
                       >
4328 :                 >skip3490
                        
4328 : c04f                     cpy #('R'-3)
                                trap_ne
432a : f003            >        beq skip3492
                       >        trap            ;failed not equal (non zero)
432c : 20d144          >        jsr report_error
                       >
432f :                 >skip3492
                        
432f : 48                       pha             ;save a,x
4330 : 8a                       txa
4331 : 48                       pha
4332 : ba                       tsx
4333 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
4335 : f003            >        beq skip3494
                       >        trap            ;failed not equal (non zero)
4337 : 20d144          >        jsr report_error
                       >
433a :                 >skip3494
                        
433a : 68                       pla             ;restore x
433b : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
433c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
433e : 48              >            pha         ;use stack to load status
433f : 28              >            plp
                        
4340 : 68                       pla             ;restore a
4341 : e8                       inx             ;return registers with modifications
4342 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
4344 : 4c260a                   jmp far_ret
                                
                        ; target for the jump indirect test
4347 : 00                       align
4348 : 5143             ptr_tst_ind dw test_ind
434a : ae0a             ptr_ind_ret dw ind_ret
                                trap            ;runover protection
434c : 20d144          >        jsr report_error
                        
434f : 88                       dey
4350 : 88                       dey
4351 :                  test_ind
4351 : 08                       php             ;either SP or Y count will fail, if we do not hit
4352 : 88                       dey
4353 : 88                       dey
4354 : 88                       dey
4355 : 28                       plp
                                trap_cs         ;flags loaded?
4356 : 9003            >        bcc skip3499
                       >        trap            ;failed carry set
4358 : 20d144          >        jsr report_error
                       >
435b :                 >skip3499
                        
                                trap_vs
435b : 5003            >        bvc skip3501
                       >        trap            ;failed overflow set
435d : 20d144          >        jsr report_error
                       >
4360 :                 >skip3501
                        
                                trap_mi
4360 : 1003            >        bpl skip3503
                       >        trap            ;failed minus (bit 7 set)
4362 : 20d144          >        jsr report_error
                       >
4365 :                 >skip3503
                        
                                trap_eq 
4365 : d003            >        bne skip3505
                       >        trap           ;failed equal (zero)
4367 : 20d144          >        jsr report_error
                       >
436a :                 >skip3505
                        
436a : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
436c : f003            >        beq skip3507
                       >        trap            ;failed not equal (non zero)
436e : 20d144          >        jsr report_error
                       >
4371 :                 >skip3507
                        
4371 : e04e                     cpx #'N'
                                trap_ne        
4373 : f003            >        beq skip3509
                       >        trap            ;failed not equal (non zero)
4375 : 20d144          >        jsr report_error
                       >
4378 :                 >skip3509
                        
4378 : c041                     cpy #('D'-3)
                                trap_ne
437a : f003            >        beq skip3511
                       >        trap            ;failed not equal (non zero)
437c : 20d144          >        jsr report_error
                       >
437f :                 >skip3511
                        
437f : 48                       pha             ;save a,x
4380 : 8a                       txa
4381 : 48                       pha
4382 : ba                       tsx
4383 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
4385 : f003            >        beq skip3513
                       >        trap            ;failed not equal (non zero)
4387 : 20d144          >        jsr report_error
                       >
438a :                 >skip3513
                        
438a : 68                       pla             ;restore x
438b : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
438c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
438e : 48              >            pha         ;use stack to load status
438f : 28              >            plp
                        
4390 : 68                       pla             ;restore a
4391 : e8                       inx             ;return registers with modifications
4392 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
4394 : 6c4a43                   jmp (ptr_ind_ret)
                                trap            ;runover protection
4397 : 20d144          >        jsr report_error
                        
439a : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
                        ; target for the jump subroutine test
439d : 88                       dey
439e : 88                       dey
439f :                  test_jsr
439f : 08                       php             ;either SP or Y count will fail, if we do not hit
43a0 : 88                       dey
43a1 : 88                       dey
43a2 : 88                       dey
43a3 : 28                       plp
                                trap_cs         ;flags loaded?
43a4 : 9003            >        bcc skip3518
                       >        trap            ;failed carry set
43a6 : 20d144          >        jsr report_error
                       >
43a9 :                 >skip3518
                        
                                trap_vs
43a9 : 5003            >        bvc skip3520
                       >        trap            ;failed overflow set
43ab : 20d144          >        jsr report_error
                       >
43ae :                 >skip3520
                        
                                trap_mi
43ae : 1003            >        bpl skip3522
                       >        trap            ;failed minus (bit 7 set)
43b0 : 20d144          >        jsr report_error
                       >
43b3 :                 >skip3522
                        
                                trap_eq 
43b3 : d003            >        bne skip3524
                       >        trap           ;failed equal (zero)
43b5 : 20d144          >        jsr report_error
                       >
43b8 :                 >skip3524
                        
43b8 : c94a                     cmp #'J'        ;registers loaded?
                                trap_ne
43ba : f003            >        beq skip3526
                       >        trap            ;failed not equal (non zero)
43bc : 20d144          >        jsr report_error
                       >
43bf :                 >skip3526
                        
43bf : e053                     cpx #'S'
                                trap_ne        
43c1 : f003            >        beq skip3528
                       >        trap            ;failed not equal (non zero)
43c3 : 20d144          >        jsr report_error
                       >
43c6 :                 >skip3528
                        
43c6 : c04f                     cpy #('R'-3)
                                trap_ne
43c8 : f003            >        beq skip3530
                       >        trap            ;failed not equal (non zero)
43ca : 20d144          >        jsr report_error
                       >
43cd :                 >skip3530
                        
43cd : 48                       pha             ;save a,x
43ce : 8a                       txa
43cf : 48                       pha       
43d0 : ba                       tsx             ;sp -4? (return addr,a,x)
43d1 : e0fb                     cpx #$fb
                                trap_ne
43d3 : f003            >        beq skip3532
                       >        trap            ;failed not equal (non zero)
43d5 : 20d144          >        jsr report_error
                       >
43d8 :                 >skip3532
                        
43d8 : adff01                   lda $1ff        ;propper return on stack
43db : c90a                     cmp #hi(jsr_ret)
                                trap_ne
43dd : f003            >        beq skip3534
                       >        trap            ;failed not equal (non zero)
43df : 20d144          >        jsr report_error
                       >
43e2 :                 >skip3534
                        
43e2 : adfe01                   lda $1fe
43e5 : c9ff                     cmp #lo(jsr_ret)
                                trap_ne
43e7 : f003            >        beq skip3536
                       >        trap            ;failed not equal (non zero)
43e9 : 20d144          >        jsr report_error
                       >
43ec :                 >skip3536
                        
                                set_stat $ff
                       >            load_flag $ff
43ec : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
43ee : 48              >            pha         ;use stack to load status
43ef : 28              >            plp
                        
43f0 : 68                       pla             ;pull x,a
43f1 : aa                       tax
43f2 : 68                       pla
43f3 : e8                       inx             ;return registers with modifications
43f4 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
43f6 : 60                       rts
                                trap            ;runover protection
43f7 : 20d144          >        jsr report_error
                        
43fa : 4c0004                   jmp start       ;catastrophic error - cannot continue
                                
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
43fd :                  nmi_trap
                                trap            ;check stack for conditions at NMI
43fd : 20d144          >        jsr report_error
                        
4400 : 4c0004                   jmp start       ;catastrophic error - cannot continue
4403 :                  res_trap
                                trap            ;unexpected RESET
4403 : 20d144          >        jsr report_error
                        
4406 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                                
4409 : 88                       dey
440a : 88                       dey
440b :                  irq_trap                ;BRK test or unextpected BRK or IRQ
440b : 08                       php             ;either SP or Y count will fail, if we do not hit
440c : 88                       dey
440d : 88                       dey
440e : 88                       dey
                                ;next traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
440f : c9bd                     cmp #$ff-'B'    ;BRK pass 2 registers loaded?
4411 : f05a                     beq break2
4413 : c942                     cmp #'B'        ;BRK pass 1 registers loaded?
                                trap_ne
4415 : f003            >        beq skip3543
                       >        trap            ;failed not equal (non zero)
4417 : 20d144          >        jsr report_error
                       >
441a :                 >skip3543
                        
441a : e052                     cpx #'R'
                                trap_ne        
441c : f003            >        beq skip3545
                       >        trap            ;failed not equal (non zero)
441e : 20d144          >        jsr report_error
                       >
4421 :                 >skip3545
                        
4421 : c048                     cpy #'K'-3
                                trap_ne
4423 : f003            >        beq skip3547
                       >        trap            ;failed not equal (non zero)
4425 : 20d144          >        jsr report_error
                       >
4428 :                 >skip3547
                        
4428 : 8501                     sta irq_a       ;save registers during break test
442a : 8602                     stx irq_x
442c : ba                       tsx             ;test break on stack
442d : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1 & unused=1 on stack
4430 : c930            >            cmp #(0      |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne         ; - no break flag on stack
4432 : f003            >        beq skip3550
                       >        trap            ;failed not equal (non zero)
4434 : 20d144          >        jsr report_error
                       >
4437 :                 >skip3550
                        
4437 : 68                       pla
                                cmp_flag intdis ;should have added interrupt disable
4438 : c934            >            cmp #(intdis |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
443a : f003            >        beq skip3553
                       >        trap            ;failed not equal (non zero)
443c : 20d144          >        jsr report_error
                       >
443f :                 >skip3553
                        
443f : ba                       tsx
4440 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
4442 : f003            >        beq skip3555
                       >        trap            ;failed not equal (non zero)
4444 : 20d144          >        jsr report_error
                       >
4447 :                 >skip3555
                        
4447 : adff01                   lda $1ff        ;propper return on stack
444a : c90b                     cmp #hi(brk_ret0)
                                trap_ne
444c : f003            >        beq skip3557
                       >        trap            ;failed not equal (non zero)
444e : 20d144          >        jsr report_error
                       >
4451 :                 >skip3557
                        
4451 : adfe01                   lda $1fe
4454 : c951                     cmp #lo(brk_ret0)
                                trap_ne
4456 : f003            >        beq skip3559
                       >        trap            ;failed not equal (non zero)
4458 : 20d144          >        jsr report_error
                       >
445b :                 >skip3559
                        
                                load_flag $ff
445b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
445d : 48                       pha
445e : a602                     ldx irq_x
4460 : e8                       inx             ;return registers with modifications
4461 : a501                     lda irq_a
4463 : 49aa                     eor #$aa
4465 : 28                       plp             ;N=1, V=1, Z=1, C=1 but original flags should be restored
4466 : 40                       rti
                                trap            ;runover protection
4467 : 20d144          >        jsr report_error
                        
446a : 4c0004                   jmp start       ;catastrophic error - cannot continue
                                
446d :                  break2                  ;BRK pass 2        
446d : e0ad                     cpx #$ff-'R'
                                trap_ne        
446f : f003            >        beq skip3563
                       >        trap            ;failed not equal (non zero)
4471 : 20d144          >        jsr report_error
                       >
4474 :                 >skip3563
                        
4474 : c0b1                     cpy #$ff-'K'-3
                                trap_ne
4476 : f003            >        beq skip3565
                       >        trap            ;failed not equal (non zero)
4478 : 20d144          >        jsr report_error
                       >
447b :                 >skip3565
                        
447b : 8501                     sta irq_a       ;save registers during break test
447d : 8602                     stx irq_x
447f : ba                       tsx             ;test break on stack
4480 : bd0201                   lda $102,x
                                cmp_flag $ff    ;break test should have B=1
4483 : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne         ; - no break flag on stack
4485 : f003            >        beq skip3568
                       >        trap            ;failed not equal (non zero)
4487 : 20d144          >        jsr report_error
                       >
448a :                 >skip3568
                        
448a : 68                       pla
448b : 0908                     ora #decmode    ;ignore decmode cleared if 65c02
                                cmp_flag $ff    ;actual passed flags
448d : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
448f : f003            >        beq skip3571
                       >        trap            ;failed not equal (non zero)
4491 : 20d144          >        jsr report_error
                       >
4494 :                 >skip3571
                        
4494 : ba                       tsx
4495 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
4497 : f003            >        beq skip3573
                       >        trap            ;failed not equal (non zero)
4499 : 20d144          >        jsr report_error
                       >
449c :                 >skip3573
                        
449c : adff01                   lda $1ff        ;propper return on stack
449f : c90b                     cmp #hi(brk_ret1)
                                trap_ne
44a1 : f003            >        beq skip3575
                       >        trap            ;failed not equal (non zero)
44a3 : 20d144          >        jsr report_error
                       >
44a6 :                 >skip3575
                        
44a6 : adfe01                   lda $1fe
44a9 : c986                     cmp #lo(brk_ret1)
                                trap_ne
44ab : f003            >        beq skip3577
                       >        trap            ;failed not equal (non zero)
44ad : 20d144          >        jsr report_error
                       >
44b0 :                 >skip3577
                        
                                load_flag intdis
44b0 : a904            >            lda #intdis             ;allow test to change I-flag (no mask)
                        
44b2 : 48                       pha      
44b3 : a602                     ldx irq_x
44b5 : e8                       inx             ;return registers with modifications
44b6 : a501                     lda irq_a
44b8 : 49aa                     eor #$aa
44ba : 28                       plp             ;N=0, V=0, Z=0, C=0 but original flags should be restored
44bb : 40                       rti
                                trap            ;runover protection
44bc : 20d144          >        jsr report_error
                        
44bf : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
                            if report = 1
                                include "report.i65"
                        ;**** report 6502 funtional test errors to standard I/O ****
                        ;
                        ;this include file is part of the 6502 functional tests
                        ;it is used when you configure report = 1 in the tests
                        ;
                        ;to adopt the standard output vectors of your test environment
                        ;you must modify the rchar and rget subroutines in this include
                        ;
                        ;I/O hardware may have to be initialized in report_init
                        
                        ;print message macro - \1 = message location
                        rprt    macro
                                ldx #0
                                lda \1
                        loop\?
                                jsr rchar
                                inx
                                lda \1,x
                                bne loop\?
                                endm
                        
                        ;initialize I/O as required (example: configure & enable ACIA)
44c2 :                  report_init
                                ;nothing to initialize
                                rprt rmsg_start
44c2 : a200            >        ldx #0
44c4 : add245          >        lda rmsg_start
44c7 :                 >loop3581
44c7 : 20cf45          >        jsr rchar
44ca : e8              >        inx
44cb : bdd245          >        lda rmsg_start,x
44ce : d0f7            >        bne loop3581
                        
44d0 : 60                       rts
                                
                        ;show stack (with saved registers), zeropage and absolute memory workspace
                        ;after an error was trapped in the test program
44d1 :                  report_error
                        ;save registers
44d1 : 08                       php
44d2 : 48                       pha
44d3 : 8a                       txa
44d4 : 48                       pha
44d5 : 98                       tya
44d6 : 48                       pha
44d7 : d8                       cld
                        ;show stack with index to registers at error
                                rprt rmsg_stack
44d8 : a200            >        ldx #0
44da : ade445          >        lda rmsg_stack
44dd :                 >loop3582
44dd : 20cf45          >        jsr rchar
44e0 : e8              >        inx
44e1 : bde445          >        lda rmsg_stack,x
44e4 : d0f7            >        bne loop3582
                        
44e6 : ba                       tsx
44e7 : e8                       inx
44e8 : a901                     lda #1      ;address high
44ea : 20bb45                   jsr rhex
44ed : 8a                       txa         ;address low
44ee : 20bb45                   jsr rhex
44f1 : 20b745           rstack  jsr rspace
44f4 : bd0001                   lda $100,x  ;stack data
44f7 : 20bb45                   jsr rhex
44fa : e8                       inx
44fb : d0f4                     bne rstack
44fd : 20b345                   jsr rcrlf   ;new line
                        ;show zero page workspace
4500 : a900                     lda #0
4502 : 20bb45                   jsr rhex
4505 : a903                     lda #zpt
4507 : aa                       tax
4508 : 20bb45                   jsr rhex
450b : 20b745           rzp     jsr rspace
450e : b500                     lda 0,x
4510 : 20bb45                   jsr rhex
4513 : e8                       inx
4514 : e00a                     cpx #zp_bss
4516 : d0f3                     bne rzp
4518 : 20b345                   jsr rcrlf
                        ;show absolute workspace
451b : a902                     lda #hi(data_segment)
451d : 20bb45                   jsr rhex
4520 : a900                     lda #lo(data_segment)
4522 : 20bb45                   jsr rhex
4525 : a200                     ldx #0
4527 : 20b745           rabs    jsr rspace
452a : bd0002                   lda data_segment,x
452d : 20bb45                   jsr rhex
4530 : e8                       inx
4531 : e009                     cpx #(data_bss-data_segment)
4533 : d0f2                     bne rabs
                        ;ask to continue
                                rprt rmsg_cont
4535 : a200            >        ldx #0
4537 : adfe45          >        lda rmsg_cont
453a :                 >loop3583
453a : 20cf45          >        jsr rchar
453d : e8              >        inx
453e : bdfe45          >        lda rmsg_cont,x
4541 : d0f7            >        bne loop3583
                        
4543 : 20b045           rerr1   jsr rget
4546 : c953                     cmp #'S'
4548 : f00b                     beq rskip
454a : c943                     cmp #'C'
454c : d0f5                     bne rerr1        
                        ;restore registers
454e : 68                       pla
454f : a8                       tay
4550 : 68                       pla
4551 : aa                       tax
4552 : 68                       pla 
4553 : 28                       plp
4554 : 60                       rts
                        ;skip the current test
4555 : a9f0             rskip   lda #$f0            ;already end of tests?
4557 : cd0002                   cmp test_case
455a : f0e7                     beq rerr1           ;skip is not available
455c : a2ff                     ldx #$ff            ;clear stack
455e : 9a                       txs
455f : ee0002                   inc test_case       ;next test
4562 : a900                     lda #lo(start)      ;find begin of test
4564 : 8503                     sta zpt
4566 : a904                     lda #hi(start)
4568 : 8504                     sta zpt+1
456a : a004             rskipl1 ldy #4              ;search pattern
456c : b103             rskipl2 lda (zpt),y         ;next byte
456e : d99545                   cmp rmark,y
4571 : d00a                     bne rskipnx         ;no match
4573 : 88                       dey
4574 : 300f                     bmi rskipf          ;found pattern        
4576 : c001                     cpy #1              ;skip immediate value
4578 : d0f2                     bne rskipl2
457a : 88                       dey
457b : f0ef                     beq rskipl2
                                
457d : e603             rskipnx inc zpt             ;next RAM location
457f : d0e9                     bne rskipl1
4581 : e604                     inc zpt+1
4583 : d0e5                     bne rskipl1
                        
4585 : a001             rskipf  ldy #1              ;pattern found - check test number
4587 : b103                     lda (zpt),y         ;test number
4589 : c9f0                     cmp #$f0            ;end of last test?
458b : f005                     beq rskipe          ;ask to rerun all
458d : cd0002                   cmp test_case       ;is next test?
4590 : d0eb                     bne rskipnx         ;continue searching
4592 : 6c0300           rskipe  jmp (zpt)           ;start next test or rerun at end of tests
                                
4595 : a900             rmark   lda #0              ;begin of test search pattern
4597 : 8d0002                   sta test_case
                        
                        ;show test has ended, ask to repeat
459a :                  report_success
                            if rep_int = 1
                                rprt rmsg_priority
                                lda data_segment    ;show interrupt sequence
                                jsr rhex
                                jsr rspace
                                lda data_segment+1
                                jsr rhex
                                jsr rspace
                                lda data_segment+2
                                jsr rhex
                            endif
                                rprt rmsg_success
459a : a200            >        ldx #0
459c : ad2e46          >        lda rmsg_success
459f :                 >loop3584
459f : 20cf45          >        jsr rchar
45a2 : e8              >        inx
45a3 : bd2e46          >        lda rmsg_success,x
45a6 : d0f7            >        bne loop3584
                        
45a8 : 20b045           rsuc1   jsr rget
45ab : c952                     cmp #'R'
45ad : d0f9                     bne rsuc1        
45af : 60                       rts
                        
                        ;get a character from standard input 
45b0 : a500             rget    lda 0
45b2 : 60                       rts
                        
                        ;input subroutine
                        ;get a character from standard input 
                        ;adjust according to the needs in your test environment
                        ;rget                ;get character in A
                        ;rget1
                        ;        lda $bff1   ;wait RDRF
                        ;        and #8
                        ;        beq rget1
                        ;not a real ACIA - so RDRF is not checked
                        ;        lda $bff0   ;read acia rx reg
                        ;        lda $f004   ;Kowalski simulator default
                        ;the load can be replaced by a call to a kernal routine
                        ;        jsr $ffcf   ;example: CHRIN for a C64
                        ;        cmp #'a'    ;lower case
                        ;        bcc rget1
                        ;        and #$5f    ;convert to upper case
                        ;rget1   rts
                        
                        ;output subroutines
45b3 : a90a             rcrlf   lda #10
45b5 : d018                     bne rchar
                        
45b7 : a920             rspace  lda #' '
45b9 : d014                     bne rchar
                                
45bb : 48               rhex    pha         ;report hex byte in A
45bc : 4a                       lsr a       ;high nibble first
45bd : 4a                       lsr a
45be : 4a                       lsr a
45bf : 4a                       lsr a
45c0 : 20c645                   jsr rnib
45c3 : 68                       pla         ;now low nibble
45c4 : 290f                     and #$f
                        
45c6 : 18               rnib    clc         ;report nibble in A
45c7 : 6930                     adc #'0'    ;make printable 0-9
45c9 : c93a                     cmp #'9'+1
45cb : 9002                     bcc rchar
45cd : 6906                     adc #6      ;make printable A-F
                        
                        ;send a character to standard output 
45cf : 8500             rchar   sta 0
45d1 : 60                       rts
                        
                        ;send a character to standard output 
                        ;adjust according to the needs in your test environment
                        ;register X needs to be preserved!
                        ;rchar               ;report character in A
                        ;        pha         ;wait TDRF
                        ;rchar1  lda $bff1
                        ;        and #$10
                        ;        beq rchar1
                        ;        pla
                        ;not a real ACIA - so TDRF is not checked
                        ;        sta $bff0   ;write acia tx reg
                        ;        sta $f001   ;Kowalski simulator default
                        ;the store can be replaced by a call to a kernal routine
                        ;        jsr $ffd2   ;example: CHROUT for a C64
                        ;        rts
                        
45d2 :                  rmsg_start
45d2 : 0a537461727465..         db  10,"Started testing",10,0
45e4 :                  rmsg_stack
45e4 : 0a726567732059..         db  10,"regs Y  X  A  PS PCLPCH",10,0
45fe :                  rmsg_cont
45fe : 0a707265737320..         db  10,"press C to continue or S to skip current test",10,0
462e :                  rmsg_success
462e : 0a416c6c207465..         db  10,"All tests completed, press R to repeat",10,0
                            if rep_int = 1
                        rmsg_priority
                                db  10,"interrupt sequence (NMI IRQ BRK) ",0
                            endif
                           
                            endif
                                
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
                        zp_init
                        zps_    db  $80,1           ;additional shift pattern to test zero result & flag
                        zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        zp7f_   db  $7f             ;test pattern for compare
                        ;logical zeropage operands
                        zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
                        zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
                        zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
                        ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
                                dw  abs1+1
                                dw  abs1+2
                                dw  abs1+3
                                dw  abs7f
                        inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
                        indt_   dw  abst            ;indirect pointer to store area in absolute memory
                                dw  abst+1
                                dw  abst+2
                                dw  abst+3
                        inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
                        indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
                                dw  absAN+1
                                dw  absAN+2
                                dw  absAN+3
                        indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
                                dw  absEO+1
                                dw  absEO+2
                                dw  absEO+3
                        indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
                                dw  absOR+1
                                dw  absOR+2
                                dw  absOR+3
                        ;add/subtract indirect pointers
                        adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
                        sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
                        adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
                        sbiy2_  dw  sba2-$ff
                        zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)   
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif 
                        data_init
                        ex_and_ and #0              ;execute immediate opcodes
                                rts
                        ex_eor_ eor #0              ;execute immediate opcodes
                                rts
                        ex_ora_ ora #0              ;execute immediate opcodes
                                rts
                        ex_adc_ adc #0              ;execute immediate opcodes
                                rts
                        ex_sbc_ sbc #0              ;execute immediate opcodes
                                rts
                        ;zps    db  $80,1           ;additional shift patterns test zero result & flag
                        abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        abs7f_  db  $7f             ;test pattern for compare
                        ;loads
                        fLDx_   db  fn,fn,0,fz              ;expected flags for load
                        ;shifts
                        rASL_                               ;expected result ASL & ROL -carry
                        rROL_   db  0,2,$86,$04,$82,0
                        rROLc_  db  1,3,$87,$05,$83,1       ;expected result ROL +carry
                        rLSR_                               ;expected result LSR & ROR -carry
                        rROR_   db  $40,0,$61,$41,$20,0
                        rRORc_  db  $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
                        fASL_                               ;expected flags for shifts
                        fROL_   db  fzc,0,fnc,fc,fn,fz      ;no carry in
                        fROLc_  db  fc,0,fnc,fc,fn,0        ;carry in 
                        fLSR_
                        fROR_   db  0,fzc,fc,0,fc,fz        ;no carry in
                        fRORc_  db  fn,fnc,fnc,fn,fnc,fn    ;carry in
                        ;increments (decrements)
                        rINC_   db  $7f,$80,$ff,0,1         ;expected result for INC/DEC
                        fINC_   db  0,fn,fn,fz,0            ;expected flags for INC/DEC
                        ;logical memory operand
                        absOR_  db  0,$1f,$71,$80           ;test pattern for OR
                        absAN_  db  $0f,$ff,$7f,$80         ;test pattern for AND
                        absEO_  db  $ff,$0f,$8f,$8f         ;test pattern for EOR
                        ;logical accu operand
                        absORa_ db  0,$f1,$1f,0             ;test pattern for OR
                        absANa_ db  $f0,$ff,$ff,$ff         ;test pattern for AND
                        absEOa_ db  $ff,$f0,$f0,$0f         ;test pattern for EOR
                        ;logical results
                        absrlo_ db  0,$ff,$7f,$80
                        absflo_ db  fz,fn,0,fn
                        data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif 
                        
                        vec_init
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                        vec_bss equ $fffa
                            endif                   ;end of RAM init data
                            
                            if (load_data_direct = 1) & (ROM_vectors = 1)  
fffa =                          org $fffa       ;vectors
fffa : fd43                     dw  nmi_trap
                        ;        dw  res_trap
fffc : 0004                     dw start
fffe : 0b44                     dw  irq_trap
                            endif
                        
fffa =                          end start
                        
No errors in pass 2.
