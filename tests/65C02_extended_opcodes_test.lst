AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
------------------------------------------------ 65C02_extended_opcodes_test.a65 -------------------------------------------------

3107 lines read, no errors in pass 1.
                        ;
                        ; 6 5 C 0 2   E X T E N D E D   O P C O D E S   T E S T
                        ;
                        ; Copyright (C) 2013-2017  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all additional 65C02 opcodes, addressing
                        ; modes and functionality not available in the NMOS version of the 6502.
                        ; The 6502_functional_test is a prerequisite to this test.
                        ; NMI, IRQ, STP & WAI are covered in the 6502_interrupt_test.
                        ; 
                        ; version 04-dec-2017
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 from http://www.kingswood-consulting.co.uk/assemblers/
                        ; command line switches: -l -m -s2 -w -x -h0
                        ;                         |  |  |   |  |  no page headers in listing
                        ;                         |  |  |   |  65C02 extensions
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original 65C02 only!
                        ; Decimal ops will only be tested with valid BCD operands and the V flag will
                        ; be ignored as it is absolutely useless in decimal mode.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   19-jul-2013  1st version distributed for testing
                        ;   23-jul-2013  fixed BRA out of range due to larger trap macros
                        ;                added RAM integrity check
                        ;   16-aug-2013  added error report to standard output option
                        ;   23-aug-2015  change revoked
                        ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
                        ;   28-aug-2015  fixed decimal adc/sbc immediate only testing carry
                        ;   09-feb-2017  fixed RMB/SMB tested when they shouldn't be tested
                        ;   04-dec-2017  fixed BRK not tested for actually going through the IRQ vector
                        ;                added option to skip the remainder of a failing test
                        ;                in report.i65
                        ;                added skip override to undefined opcode as NOP test
                        
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0001 =                  load_data_direct = 1
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended.
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $4e (78) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
0001 =                  zero_page = $1  
                        
                        ;data_segment memory start address, $63 (99) consecutive Bytes required
                        ; + 12 Bytes at data_segment + $f9 (JMP indirect page cross test)
0200 =                  data_segment = $200
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif  
                        
                        ;code_segment memory start address, 10kB of consecutive space required
                        ;                                   add 1 kB if I_flag = 2
0400 =                  code_segment = $400  
                        
                        ;added WDC only opcodes WAI & STP (0=test as NOPs, >0=no test)
0001 =                  wdc_op = 1
                        
                        ;added Rockwell & WDC opcodes BBR, BBS, RMB & SMB
                        ;(0=test as NOPs, 1=full test, >1=no test) 
0001 =                  rkwl_wdc_op = 1
                        
                        ;skip testing all undefined opcodes override
                        ;0=test as NOP, >0=skip
0001 =                  skip_nop = 1
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3 kB)
0001 =                  report = 1
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
0000 =                  ram_top = 0
                        
                                noopt       ;do not take shortcuts
                                
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                                    
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_as      macro       ;testing result in accu & flags, save accu
                                    pha
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    pla
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                                
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                                    
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro 
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                    ldx #11         ;reset modifiable RAM
                        ccs1\?      sta jxi_tab,x   ;JMP indirect page cross area
                                    dex
                                    bpl ccs1\?
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execute test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm            
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                                    
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
0001 =                          org zero_page
                        ;break test interrupt save
0001 : 00               irq_a   ds  1               ;a register
0002 : 00               irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags   
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
0003 :                  zpt                         ;5 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
0003 : 00               adfc    ds  1               ;carry flag before op
0004 : 00               ad1     ds  1               ;operand 1 - accumulator
0005 : 00               ad2     ds  1               ;operand 2 - memory / immediate
0006 : 00               adrl    ds  1               ;expected result bits 0-7
0007 : 00               adrh    ds  1               ;expected result bit 8 (carry)
0008 : 00               adrf    ds  1               ;expected flags NV0000ZC (-V in decimal mode)
0009 : 00               sb2     ds  1               ;operand 2 complemented for subtract
000a :                  zp_bss
000a : c3824100         zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
000e : 7f               zp7f    db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
000f : 001f7180         zpOR    db  0,$1f,$71,$80   ;test pattern for OR
0013 : 0fff7f80         zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0017 : ff0f8f8f         zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
001b : 1002             ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
001d : 1102                     dw  abs1+1
001f : 1202                     dw  abs1+2
0021 : 1302                     dw  abs1+3
0023 : 1402                     dw  abs7f
0025 : 1801             inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
0027 : 0502             indt    dw  abst            ;indirect pointer to store area in absolute memory
0029 : 0602                     dw  abst+1
002b : 0702                     dw  abst+2
002d : 0802                     dw  abst+3
002f : 0d01             inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
0031 : 4702             indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
0033 : 4802                     dw  absAN+1
0035 : 4902                     dw  absAN+2
0037 : 4a02                     dw  absAN+3
0039 : 4b02             indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
003b : 4c02                     dw  absEO+1
003d : 4d02                     dw  absEO+2
003f : 4e02                     dw  absEO+3
0041 : 4302             indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
0043 : 4402                     dw  absOR+1
0045 : 4502                     dw  absOR+2
0047 : 4602                     dw  absOR+3
                        ;add/subtract indirect pointers
0049 : 0502             adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
004b : 0602             sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
004d : 0601             adiy2   dw  ada2-$ff        ;with offset for indirect indexed
004f : 0701             sbiy2   dw  sba2-$ff
0051 :                  zp_bss_end
                            
0200 =                          org data_segment
0200 : 0000             pg_x    ds  2               ;high JMP indirect address for page cross bug
0202 : 00               test_case   ds  1           ;current test number
0203 : 0000             ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
0205 :                  abst                        ;5 bytes store/modify test area
0205 : 00               ada2    ds  1               ;operand 2
0206 : 00               sba2    ds  1               ;operand 2 complemented for subtract
0207 : 000000                   ds  3               ;fill remaining bytes
020a :                  data_bss
                            if load_data_direct = 1
020a : 6900             ex_adci adc #0              ;execute immediate opcodes
020c : 60                       rts
020d : e900             ex_sbci sbc #0              ;execute immediate opcodes
020f : 60                       rts
                            else
                        ex_adci ds  3
                        ex_sbci ds  3
                            endif
0210 : c3824100         abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
0214 : 7f               abs7f   db  $7f             ;test pattern for compare
                        ;loads
0215 : 80800002         fLDx    db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
0219 :                  rASL                        ;expected result ASL & ROL -carry  
0219 : 86048200         rROL    db  $86,$04,$82,0   ; "
021d : 87058301         rROLc   db  $87,$05,$83,1   ;expected result ROL +carry
0221 :                  rLSR                        ;expected result LSR & ROR -carry
0221 : 61412000         rROR    db  $61,$41,$20,0   ; "
0225 : e1c1a080         rRORc   db  $e1,$c1,$a0,$80 ;expected result ROR +carry
0229 :                  fASL                        ;expected flags for shifts
0229 : 81018002         fROL    db  fnc,fc,fn,fz    ;no carry in
022d : 81018000         fROLc   db  fnc,fc,fn,0     ;carry in
0231 :                  fLSR
0231 : 01000102         fROR    db  fc,0,fc,fz      ;no carry in
0235 : 81808180         fRORc   db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
0239 : 7f80ff0001       rINC    db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
023e : 0080800200       fINC    db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
0243 : 001f7180         absOR   db  0,$1f,$71,$80   ;test pattern for OR
0247 : 0fff7f80         absAN   db  $0f,$ff,$7f,$80 ;test pattern for AND
024b : ff0f8f8f         absEO   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
024f : 00f11f00         absORa  db  0,$f1,$1f,0     ;test pattern for OR
0253 : f0ffffff         absANa  db  $f0,$ff,$ff,$ff ;test pattern for AND
0257 : fff0f00f         absEOa  db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
025b : 00ff7f80         absrlo  db  0,$ff,$7f,$80
025f : 02800080         absflo  db  fz,fn,0,fn
0263 :                  data_bss_end
                        ;define area for page crossing JMP (abs) & JMP (abs,x) test
02f9 =                  jxi_tab equ data_segment + $100 - 7     ;JMP (jxi_tab,x) x=6
02fd =                  ji_tab  equ data_segment + $100 - 3     ;JMP (ji_tab+2)
0300 =                  jxp_tab equ data_segment + $100         ;JMP (jxp_tab-255) x=255
                        
                        
                                code
0400 =                          org code_segment
0400 : d8               start   cld
0401 : a2ff                     ldx #$ff
0403 : 9a                       txs
0404 : a900                     lda #0          ;*** test 0 = initialize
0406 : 8d0202                   sta test_case
0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                            
                        ;initialize I/O for report channel
                            if report = 1
0409 : 208624                   jsr report_init
                            endif
                            
                        ;initialize BSS segment
                            if load_data_direct != 1
                                ldx #zp_end-zp_init-1
                        ld_zp   lda zp_init,x
                                sta zp_bss,x
                                dex
                                bpl ld_zp
                                ldx #data_end-data_init-1
                        ld_data lda data_init,x
                                sta data_bss,x
                                dex
                                bpl ld_data
                              if ROM_vectors = 1
                                ldx #5
                        ld_vect lda vec_init,x
                                sta vec_bss,x
                                dex
                                bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                                
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
040c : a900                     lda #0 
040e : 8503                     sta zpt         ;set low byte of indirect pointer
0410 : 8d0402                   sta ram_chksm+1 ;checksum high byte
0413 : a20b                     ldx #11         ;reset modifiable RAM
0415 : 9df902           gcs1    sta jxi_tab,x   ;JMP indirect page cross area
0418 : ca                       dex
0419 : 10fa                     bpl gcs1
041b : 18                       clc
041c : a209                     ldx #zp_bss-zero_page ;zeropage - write test area
041e : 7501             gcs3    adc zero_page,x
0420 : 9004                     bcc gcs2
0422 : ee0402                   inc ram_chksm+1 ;carry to high byte
0425 : 18                       clc
0426 : e8               gcs2    inx
0427 : d0f5                     bne gcs3
0429 : a202                     ldx #hi(abs1)   ;set high byte of indirect pointer
042b : 8604                     stx zpt+1
042d : a010                     ldy #lo(abs1)   ;data after write & execute test area
042f : 7103             gcs5    adc (zpt),y
0431 : 9004                     bcc gcs4
0433 : ee0402                   inc ram_chksm+1 ;carry to high byte
0436 : 18                       clc
0437 : c8               gcs4    iny
0438 : d0f5                     bne gcs5
043a : e8                       inx             ;advance RAM high address
043b : 8604                     stx zpt+1
043d : e000                     cpx #ram_top
043f : d0ee                     bne gcs5
0441 : 8d0302                   sta ram_chksm   ;checksum complete
                            endif
                                next_test            
0444 : ad0202          >            lda test_case   ;previous test
0447 : c900            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0449 : f003            >        beq skip0002
                       >        trap            ;failed not equal (non zero)
044b : 209524          >        jsr report_error
                       >
044e :                 >skip0002
                       >
0001 =                 >test_num = test_num + 1
044e : a901            >            lda #test_num   ;*** next tests' number
0450 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;testing stack operations PHX PHY PLX PLY
0453 : a999                     lda #$99        ;protect a
0455 : a2ff                     ldx #$ff        ;initialize stack
0457 : 9a                       txs
0458 : a255                     ldx #$55
045a : da                       phx
045b : a2aa                     ldx #$aa
045d : da                       phx
045e : ecfe01                   cpx $1fe        ;on stack ?
                                trap_ne
0461 : f003            >        beq skip0004
                       >        trap            ;failed not equal (non zero)
0463 : 209524          >        jsr report_error
                       >
0466 :                 >skip0004
                        
0466 : ba                       tsx
0467 : e0fd                     cpx #$fd        ;sp decremented?
                                trap_ne
0469 : f003            >        beq skip0006
                       >        trap            ;failed not equal (non zero)
046b : 209524          >        jsr report_error
                       >
046e :                 >skip0006
                        
046e : 7a                       ply
046f : c0aa                     cpy #$aa        ;successful retreived from stack?
                                trap_ne
0471 : f003            >        beq skip0008
                       >        trap            ;failed not equal (non zero)
0473 : 209524          >        jsr report_error
                       >
0476 :                 >skip0008
                        
0476 : 7a                       ply
0477 : c055                     cpy #$55
                                trap_ne
0479 : f003            >        beq skip0010
                       >        trap            ;failed not equal (non zero)
047b : 209524          >        jsr report_error
                       >
047e :                 >skip0010
                        
047e : ccff01                   cpy $1ff        ;remains on stack?
                                trap_ne
0481 : f003            >        beq skip0012
                       >        trap            ;failed not equal (non zero)
0483 : 209524          >        jsr report_error
                       >
0486 :                 >skip0012
                        
0486 : ba                       tsx
0487 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
0489 : f003            >        beq skip0014
                       >        trap            ;failed not equal (non zero)
048b : 209524          >        jsr report_error
                       >
048e :                 >skip0014
                        
                                
048e : a0a5                     ldy #$a5
0490 : 5a                       phy
0491 : a05a                     ldy #$5a
0493 : 5a                       phy
0494 : ccfe01                   cpy $1fe        ;on stack ?
                                trap_ne
0497 : f003            >        beq skip0016
                       >        trap            ;failed not equal (non zero)
0499 : 209524          >        jsr report_error
                       >
049c :                 >skip0016
                        
049c : ba                       tsx
049d : e0fd                     cpx #$fd        ;sp decremented?
                                trap_ne
049f : f003            >        beq skip0018
                       >        trap            ;failed not equal (non zero)
04a1 : 209524          >        jsr report_error
                       >
04a4 :                 >skip0018
                        
04a4 : fa                       plx
04a5 : e05a                     cpx #$5a        ;successful retreived from stack?
                                trap_ne
04a7 : f003            >        beq skip0020
                       >        trap            ;failed not equal (non zero)
04a9 : 209524          >        jsr report_error
                       >
04ac :                 >skip0020
                        
04ac : fa                       plx
04ad : e0a5                     cpx #$a5
                                trap_ne
04af : f003            >        beq skip0022
                       >        trap            ;failed not equal (non zero)
04b1 : 209524          >        jsr report_error
                       >
04b4 :                 >skip0022
                        
04b4 : ecff01                   cpx $1ff        ;remains on stack?
                                trap_ne
04b7 : f003            >        beq skip0024
                       >        trap            ;failed not equal (non zero)
04b9 : 209524          >        jsr report_error
                       >
04bc :                 >skip0024
                        
04bc : ba                       tsx
04bd : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
04bf : f003            >        beq skip0026
                       >        trap            ;failed not equal (non zero)
04c1 : 209524          >        jsr report_error
                       >
04c4 :                 >skip0026
                        
04c4 : c999                     cmp #$99        ;unchanged?
                                trap_ne
04c6 : f003            >        beq skip0028
                       >        trap            ;failed not equal (non zero)
04c8 : 209524          >        jsr report_error
                       >
04cb :                 >skip0028
                        
                                next_test            
04cb : ad0202          >            lda test_case   ;previous test
04ce : c901            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
04d0 : f003            >        beq skip0031
                       >        trap            ;failed not equal (non zero)
04d2 : 209524          >        jsr report_error
                       >
04d5 :                 >skip0031
                       >
0002 =                 >test_num = test_num + 1
04d5 : a902            >            lda #test_num   ;*** next tests' number
04d7 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; test PHX does not alter flags or X but PLX does
04da : a0aa                     ldy #$aa        ;protect y
                                set_x 1,$ff     ;push
                       >            load_flag $ff     
04dc : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
04de : 48              >            pha         ;use stack to load status
04df : a201            >            ldx #1     ;precharge index x
04e1 : 28              >            plp
                        
04e2 : da                       phx
                                tst_x 1,$ff
04e3 : 08              >            php         ;save flags
04e4 : e001            >            cpx #1     ;test result
                       >            trap_ne
04e6 : f003            >        beq skip0036
                       >        trap            ;failed not equal (non zero)
04e8 : 209524          >        jsr report_error
                       >
04eb :                 >skip0036
                       >
04eb : 68              >            pla         ;load status
04ec : 48              >            pha
                       >            cmp_flag $ff
04ed : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
04ef : f003            >        beq skip0039
                       >        trap            ;failed not equal (non zero)
04f1 : 209524          >        jsr report_error
                       >
04f4 :                 >skip0039
                       >
04f4 : 28              >            plp         ;restore status
                        
                                set_x 0,0
                       >            load_flag 0
04f5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
04f7 : 48              >            pha         ;use stack to load status
04f8 : a200            >            ldx #0     ;precharge index x
04fa : 28              >            plp
                        
04fb : da                       phx
                                tst_x 0,0
04fc : 08              >            php         ;save flags
04fd : e000            >            cpx #0     ;test result
                       >            trap_ne
04ff : f003            >        beq skip0044
                       >        trap            ;failed not equal (non zero)
0501 : 209524          >        jsr report_error
                       >
0504 :                 >skip0044
                       >
0504 : 68              >            pla         ;load status
0505 : 48              >            pha
                       >            cmp_flag 0
0506 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0508 : f003            >        beq skip0047
                       >        trap            ;failed not equal (non zero)
050a : 209524          >        jsr report_error
                       >
050d :                 >skip0047
                       >
050d : 28              >            plp         ;restore status
                        
                                set_x $ff,$ff
                       >            load_flag $ff
050e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0510 : 48              >            pha         ;use stack to load status
0511 : a2ff            >            ldx #$ff     ;precharge index x
0513 : 28              >            plp
                        
0514 : da                       phx
                                tst_x $ff,$ff
0515 : 08              >            php         ;save flags
0516 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0518 : f003            >        beq skip0052
                       >        trap            ;failed not equal (non zero)
051a : 209524          >        jsr report_error
                       >
051d :                 >skip0052
                       >
051d : 68              >            pla         ;load status
051e : 48              >            pha
                       >            cmp_flag $ff
051f : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0521 : f003            >        beq skip0055
                       >        trap            ;failed not equal (non zero)
0523 : 209524          >        jsr report_error
                       >
0526 :                 >skip0055
                       >
0526 : 28              >            plp         ;restore status
                        
                                set_x 1,0
                       >            load_flag 0
0527 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0529 : 48              >            pha         ;use stack to load status
052a : a201            >            ldx #1     ;precharge index x
052c : 28              >            plp
                        
052d : da                       phx
                                tst_x 1,0
052e : 08              >            php         ;save flags
052f : e001            >            cpx #1     ;test result
                       >            trap_ne
0531 : f003            >        beq skip0060
                       >        trap            ;failed not equal (non zero)
0533 : 209524          >        jsr report_error
                       >
0536 :                 >skip0060
                       >
0536 : 68              >            pla         ;load status
0537 : 48              >            pha
                       >            cmp_flag 0
0538 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
053a : f003            >        beq skip0063
                       >        trap            ;failed not equal (non zero)
053c : 209524          >        jsr report_error
                       >
053f :                 >skip0063
                       >
053f : 28              >            plp         ;restore status
                        
                                set_x 0,$ff
                       >            load_flag $ff
0540 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0542 : 48              >            pha         ;use stack to load status
0543 : a200            >            ldx #0     ;precharge index x
0545 : 28              >            plp
                        
0546 : da                       phx
                                tst_x 0,$ff
0547 : 08              >            php         ;save flags
0548 : e000            >            cpx #0     ;test result
                       >            trap_ne
054a : f003            >        beq skip0068
                       >        trap            ;failed not equal (non zero)
054c : 209524          >        jsr report_error
                       >
054f :                 >skip0068
                       >
054f : 68              >            pla         ;load status
0550 : 48              >            pha
                       >            cmp_flag $ff
0551 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0553 : f003            >        beq skip0071
                       >        trap            ;failed not equal (non zero)
0555 : 209524          >        jsr report_error
                       >
0558 :                 >skip0071
                       >
0558 : 28              >            plp         ;restore status
                        
                                set_x $ff,0
                       >            load_flag 0
0559 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
055b : 48              >            pha         ;use stack to load status
055c : a2ff            >            ldx #$ff     ;precharge index x
055e : 28              >            plp
                        
055f : da                       phx
                                tst_x $ff,0
0560 : 08              >            php         ;save flags
0561 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0563 : f003            >        beq skip0076
                       >        trap            ;failed not equal (non zero)
0565 : 209524          >        jsr report_error
                       >
0568 :                 >skip0076
                       >
0568 : 68              >            pla         ;load status
0569 : 48              >            pha
                       >            cmp_flag 0
056a : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
056c : f003            >        beq skip0079
                       >        trap            ;failed not equal (non zero)
056e : 209524          >        jsr report_error
                       >
0571 :                 >skip0079
                       >
0571 : 28              >            plp         ;restore status
                        
                                set_x 0,$ff     ;pull
                       >            load_flag $ff     
0572 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
0574 : 48              >            pha         ;use stack to load status
0575 : a200            >            ldx #0     ;precharge index x
0577 : 28              >            plp
                        
0578 : fa                       plx
                                tst_x $ff,$ff-zero
0579 : 08              >            php         ;save flags
057a : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
057c : f003            >        beq skip0084
                       >        trap            ;failed not equal (non zero)
057e : 209524          >        jsr report_error
                       >
0581 :                 >skip0084
                       >
0581 : 68              >            pla         ;load status
0582 : 48              >            pha
                       >            cmp_flag $ff-zero
0583 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0585 : f003            >        beq skip0087
                       >        trap            ;failed not equal (non zero)
0587 : 209524          >        jsr report_error
                       >
058a :                 >skip0087
                       >
058a : 28              >            plp         ;restore status
                        
                                set_x $ff,0
                       >            load_flag 0
058b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
058d : 48              >            pha         ;use stack to load status
058e : a2ff            >            ldx #$ff     ;precharge index x
0590 : 28              >            plp
                        
0591 : fa                       plx
                                tst_x 0,zero
0592 : 08              >            php         ;save flags
0593 : e000            >            cpx #0     ;test result
                       >            trap_ne
0595 : f003            >        beq skip0092
                       >        trap            ;failed not equal (non zero)
0597 : 209524          >        jsr report_error
                       >
059a :                 >skip0092
                       >
059a : 68              >            pla         ;load status
059b : 48              >            pha
                       >            cmp_flag zero
059c : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
059e : f003            >        beq skip0095
                       >        trap            ;failed not equal (non zero)
05a0 : 209524          >        jsr report_error
                       >
05a3 :                 >skip0095
                       >
05a3 : 28              >            plp         ;restore status
                        
                                set_x $fe,$ff
                       >            load_flag $ff
05a4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
05a6 : 48              >            pha         ;use stack to load status
05a7 : a2fe            >            ldx #$fe     ;precharge index x
05a9 : 28              >            plp
                        
05aa : fa                       plx
                                tst_x 1,$ff-zero-minus
05ab : 08              >            php         ;save flags
05ac : e001            >            cpx #1     ;test result
                       >            trap_ne
05ae : f003            >        beq skip0100
                       >        trap            ;failed not equal (non zero)
05b0 : 209524          >        jsr report_error
                       >
05b3 :                 >skip0100
                       >
05b3 : 68              >            pla         ;load status
05b4 : 48              >            pha
                       >            cmp_flag $ff-zero-minus
05b5 : c97d            >            cmp #($ff-zero-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
05b7 : f003            >        beq skip0103
                       >        trap            ;failed not equal (non zero)
05b9 : 209524          >        jsr report_error
                       >
05bc :                 >skip0103
                       >
05bc : 28              >            plp         ;restore status
                        
                                set_x 0,0
                       >            load_flag 0
05bd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
05bf : 48              >            pha         ;use stack to load status
05c0 : a200            >            ldx #0     ;precharge index x
05c2 : 28              >            plp
                        
05c3 : fa                       plx
                                tst_x $ff,minus
05c4 : 08              >            php         ;save flags
05c5 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
05c7 : f003            >        beq skip0108
                       >        trap            ;failed not equal (non zero)
05c9 : 209524          >        jsr report_error
                       >
05cc :                 >skip0108
                       >
05cc : 68              >            pla         ;load status
05cd : 48              >            pha
                       >            cmp_flag minus
05ce : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
05d0 : f003            >        beq skip0111
                       >        trap            ;failed not equal (non zero)
05d2 : 209524          >        jsr report_error
                       >
05d5 :                 >skip0111
                       >
05d5 : 28              >            plp         ;restore status
                        
                                set_x $ff,$ff
                       >            load_flag $ff
05d6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
05d8 : 48              >            pha         ;use stack to load status
05d9 : a2ff            >            ldx #$ff     ;precharge index x
05db : 28              >            plp
                        
05dc : fa                       plx
                                tst_x 0,$ff-minus
05dd : 08              >            php         ;save flags
05de : e000            >            cpx #0     ;test result
                       >            trap_ne
05e0 : f003            >        beq skip0116
                       >        trap            ;failed not equal (non zero)
05e2 : 209524          >        jsr report_error
                       >
05e5 :                 >skip0116
                       >
05e5 : 68              >            pla         ;load status
05e6 : 48              >            pha
                       >            cmp_flag $ff-minus
05e7 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
05e9 : f003            >        beq skip0119
                       >        trap            ;failed not equal (non zero)
05eb : 209524          >        jsr report_error
                       >
05ee :                 >skip0119
                       >
05ee : 28              >            plp         ;restore status
                        
                                set_x $fe,0
                       >            load_flag 0
05ef : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
05f1 : 48              >            pha         ;use stack to load status
05f2 : a2fe            >            ldx #$fe     ;precharge index x
05f4 : 28              >            plp
                        
05f5 : fa                       plx
                                tst_x 1,0
05f6 : 08              >            php         ;save flags
05f7 : e001            >            cpx #1     ;test result
                       >            trap_ne
05f9 : f003            >        beq skip0124
                       >        trap            ;failed not equal (non zero)
05fb : 209524          >        jsr report_error
                       >
05fe :                 >skip0124
                       >
05fe : 68              >            pla         ;load status
05ff : 48              >            pha
                       >            cmp_flag 0
0600 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0602 : f003            >        beq skip0127
                       >        trap            ;failed not equal (non zero)
0604 : 209524          >        jsr report_error
                       >
0607 :                 >skip0127
                       >
0607 : 28              >            plp         ;restore status
                        
0608 : c0aa                     cpy #$aa        ;Y unchanged
                                trap_ne
060a : f003            >        beq skip0129
                       >        trap            ;failed not equal (non zero)
060c : 209524          >        jsr report_error
                       >
060f :                 >skip0129
                        
                                next_test            
060f : ad0202          >            lda test_case   ;previous test
0612 : c902            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0614 : f003            >        beq skip0132
                       >        trap            ;failed not equal (non zero)
0616 : 209524          >        jsr report_error
                       >
0619 :                 >skip0132
                       >
0003 =                 >test_num = test_num + 1
0619 : a903            >            lda #test_num   ;*** next tests' number
061b : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; test PHY does not alter flags or Y but PLY does
061e : a255                     ldx #$55        ;x & a protected
                                set_y 1,$ff     ;push
                       >            load_flag $ff     
0620 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
0622 : 48              >            pha         ;use stack to load status
0623 : a001            >            ldy #1     ;precharge index y
0625 : 28              >            plp
                        
0626 : 5a                       phy
                                tst_y 1,$ff
0627 : 08              >            php         ;save flags
0628 : c001            >            cpy #1     ;test result
                       >            trap_ne
062a : f003            >        beq skip0137
                       >        trap            ;failed not equal (non zero)
062c : 209524          >        jsr report_error
                       >
062f :                 >skip0137
                       >
062f : 68              >            pla         ;load status
0630 : 48              >            pha
                       >            cmp_flag $ff
0631 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0633 : f003            >        beq skip0140
                       >        trap            ;failed not equal (non zero)
0635 : 209524          >        jsr report_error
                       >
0638 :                 >skip0140
                       >
0638 : 28              >            plp         ;restore status
                        
                                set_y 0,0
                       >            load_flag 0
0639 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
063b : 48              >            pha         ;use stack to load status
063c : a000            >            ldy #0     ;precharge index y
063e : 28              >            plp
                        
063f : 5a                       phy
                                tst_y 0,0
0640 : 08              >            php         ;save flags
0641 : c000            >            cpy #0     ;test result
                       >            trap_ne
0643 : f003            >        beq skip0145
                       >        trap            ;failed not equal (non zero)
0645 : 209524          >        jsr report_error
                       >
0648 :                 >skip0145
                       >
0648 : 68              >            pla         ;load status
0649 : 48              >            pha
                       >            cmp_flag 0
064a : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
064c : f003            >        beq skip0148
                       >        trap            ;failed not equal (non zero)
064e : 209524          >        jsr report_error
                       >
0651 :                 >skip0148
                       >
0651 : 28              >            plp         ;restore status
                        
                                set_y $ff,$ff
                       >            load_flag $ff
0652 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0654 : 48              >            pha         ;use stack to load status
0655 : a0ff            >            ldy #$ff     ;precharge index y
0657 : 28              >            plp
                        
0658 : 5a                       phy
                                tst_y $ff,$ff
0659 : 08              >            php         ;save flags
065a : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
065c : f003            >        beq skip0153
                       >        trap            ;failed not equal (non zero)
065e : 209524          >        jsr report_error
                       >
0661 :                 >skip0153
                       >
0661 : 68              >            pla         ;load status
0662 : 48              >            pha
                       >            cmp_flag $ff
0663 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0665 : f003            >        beq skip0156
                       >        trap            ;failed not equal (non zero)
0667 : 209524          >        jsr report_error
                       >
066a :                 >skip0156
                       >
066a : 28              >            plp         ;restore status
                        
                                set_y 1,0
                       >            load_flag 0
066b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
066d : 48              >            pha         ;use stack to load status
066e : a001            >            ldy #1     ;precharge index y
0670 : 28              >            plp
                        
0671 : 5a                       phy
                                tst_y 1,0
0672 : 08              >            php         ;save flags
0673 : c001            >            cpy #1     ;test result
                       >            trap_ne
0675 : f003            >        beq skip0161
                       >        trap            ;failed not equal (non zero)
0677 : 209524          >        jsr report_error
                       >
067a :                 >skip0161
                       >
067a : 68              >            pla         ;load status
067b : 48              >            pha
                       >            cmp_flag 0
067c : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
067e : f003            >        beq skip0164
                       >        trap            ;failed not equal (non zero)
0680 : 209524          >        jsr report_error
                       >
0683 :                 >skip0164
                       >
0683 : 28              >            plp         ;restore status
                        
                                set_y 0,$ff
                       >            load_flag $ff
0684 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0686 : 48              >            pha         ;use stack to load status
0687 : a000            >            ldy #0     ;precharge index y
0689 : 28              >            plp
                        
068a : 5a                       phy
                                tst_y 0,$ff
068b : 08              >            php         ;save flags
068c : c000            >            cpy #0     ;test result
                       >            trap_ne
068e : f003            >        beq skip0169
                       >        trap            ;failed not equal (non zero)
0690 : 209524          >        jsr report_error
                       >
0693 :                 >skip0169
                       >
0693 : 68              >            pla         ;load status
0694 : 48              >            pha
                       >            cmp_flag $ff
0695 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0697 : f003            >        beq skip0172
                       >        trap            ;failed not equal (non zero)
0699 : 209524          >        jsr report_error
                       >
069c :                 >skip0172
                       >
069c : 28              >            plp         ;restore status
                        
                                set_y $ff,0
                       >            load_flag 0
069d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
069f : 48              >            pha         ;use stack to load status
06a0 : a0ff            >            ldy #$ff     ;precharge index y
06a2 : 28              >            plp
                        
06a3 : 5a                       phy
                                tst_y $ff,0
06a4 : 08              >            php         ;save flags
06a5 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
06a7 : f003            >        beq skip0177
                       >        trap            ;failed not equal (non zero)
06a9 : 209524          >        jsr report_error
                       >
06ac :                 >skip0177
                       >
06ac : 68              >            pla         ;load status
06ad : 48              >            pha
                       >            cmp_flag 0
06ae : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
06b0 : f003            >        beq skip0180
                       >        trap            ;failed not equal (non zero)
06b2 : 209524          >        jsr report_error
                       >
06b5 :                 >skip0180
                       >
06b5 : 28              >            plp         ;restore status
                        
                                set_y 0,$ff     ;pull
                       >            load_flag $ff     
06b6 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
06b8 : 48              >            pha         ;use stack to load status
06b9 : a000            >            ldy #0     ;precharge index y
06bb : 28              >            plp
                        
06bc : 7a                       ply
                                tst_y $ff,$ff-zero
06bd : 08              >            php         ;save flags
06be : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
06c0 : f003            >        beq skip0185
                       >        trap            ;failed not equal (non zero)
06c2 : 209524          >        jsr report_error
                       >
06c5 :                 >skip0185
                       >
06c5 : 68              >            pla         ;load status
06c6 : 48              >            pha
                       >            cmp_flag $ff-zero
06c7 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
06c9 : f003            >        beq skip0188
                       >        trap            ;failed not equal (non zero)
06cb : 209524          >        jsr report_error
                       >
06ce :                 >skip0188
                       >
06ce : 28              >            plp         ;restore status
                        
                                set_y $ff,0
                       >            load_flag 0
06cf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
06d1 : 48              >            pha         ;use stack to load status
06d2 : a0ff            >            ldy #$ff     ;precharge index y
06d4 : 28              >            plp
                        
06d5 : 7a                       ply
                                tst_y 0,zero
06d6 : 08              >            php         ;save flags
06d7 : c000            >            cpy #0     ;test result
                       >            trap_ne
06d9 : f003            >        beq skip0193
                       >        trap            ;failed not equal (non zero)
06db : 209524          >        jsr report_error
                       >
06de :                 >skip0193
                       >
06de : 68              >            pla         ;load status
06df : 48              >            pha
                       >            cmp_flag zero
06e0 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
06e2 : f003            >        beq skip0196
                       >        trap            ;failed not equal (non zero)
06e4 : 209524          >        jsr report_error
                       >
06e7 :                 >skip0196
                       >
06e7 : 28              >            plp         ;restore status
                        
                                set_y $fe,$ff
                       >            load_flag $ff
06e8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
06ea : 48              >            pha         ;use stack to load status
06eb : a0fe            >            ldy #$fe     ;precharge index y
06ed : 28              >            plp
                        
06ee : 7a                       ply
                                tst_y 1,$ff-zero-minus
06ef : 08              >            php         ;save flags
06f0 : c001            >            cpy #1     ;test result
                       >            trap_ne
06f2 : f003            >        beq skip0201
                       >        trap            ;failed not equal (non zero)
06f4 : 209524          >        jsr report_error
                       >
06f7 :                 >skip0201
                       >
06f7 : 68              >            pla         ;load status
06f8 : 48              >            pha
                       >            cmp_flag $ff-zero-minus
06f9 : c97d            >            cmp #($ff-zero-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
06fb : f003            >        beq skip0204
                       >        trap            ;failed not equal (non zero)
06fd : 209524          >        jsr report_error
                       >
0700 :                 >skip0204
                       >
0700 : 28              >            plp         ;restore status
                        
                                set_y 0,0
                       >            load_flag 0
0701 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0703 : 48              >            pha         ;use stack to load status
0704 : a000            >            ldy #0     ;precharge index y
0706 : 28              >            plp
                        
0707 : 7a                       ply
                                tst_y $ff,minus
0708 : 08              >            php         ;save flags
0709 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
070b : f003            >        beq skip0209
                       >        trap            ;failed not equal (non zero)
070d : 209524          >        jsr report_error
                       >
0710 :                 >skip0209
                       >
0710 : 68              >            pla         ;load status
0711 : 48              >            pha
                       >            cmp_flag minus
0712 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0714 : f003            >        beq skip0212
                       >        trap            ;failed not equal (non zero)
0716 : 209524          >        jsr report_error
                       >
0719 :                 >skip0212
                       >
0719 : 28              >            plp         ;restore status
                        
                                set_y $ff,$ff
                       >            load_flag $ff
071a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
071c : 48              >            pha         ;use stack to load status
071d : a0ff            >            ldy #$ff     ;precharge index y
071f : 28              >            plp
                        
0720 : 7a                       ply
                                tst_y 0,$ff-minus
0721 : 08              >            php         ;save flags
0722 : c000            >            cpy #0     ;test result
                       >            trap_ne
0724 : f003            >        beq skip0217
                       >        trap            ;failed not equal (non zero)
0726 : 209524          >        jsr report_error
                       >
0729 :                 >skip0217
                       >
0729 : 68              >            pla         ;load status
072a : 48              >            pha
                       >            cmp_flag $ff-minus
072b : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
072d : f003            >        beq skip0220
                       >        trap            ;failed not equal (non zero)
072f : 209524          >        jsr report_error
                       >
0732 :                 >skip0220
                       >
0732 : 28              >            plp         ;restore status
                        
                                set_y $fe,0
                       >            load_flag 0
0733 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0735 : 48              >            pha         ;use stack to load status
0736 : a0fe            >            ldy #$fe     ;precharge index y
0738 : 28              >            plp
                        
0739 : 7a                       ply
                                tst_y 1,0
073a : 08              >            php         ;save flags
073b : c001            >            cpy #1     ;test result
                       >            trap_ne
073d : f003            >        beq skip0225
                       >        trap            ;failed not equal (non zero)
073f : 209524          >        jsr report_error
                       >
0742 :                 >skip0225
                       >
0742 : 68              >            pla         ;load status
0743 : 48              >            pha
                       >            cmp_flag 0
0744 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0746 : f003            >        beq skip0228
                       >        trap            ;failed not equal (non zero)
0748 : 209524          >        jsr report_error
                       >
074b :                 >skip0228
                       >
074b : 28              >            plp         ;restore status
                        
074c : e055                     cpx #$55        ;x unchanged?
                                trap_ne
074e : f003            >        beq skip0230
                       >        trap            ;failed not equal (non zero)
0750 : 209524          >        jsr report_error
                       >
0753 :                 >skip0230
                        
                                next_test            
0753 : ad0202          >            lda test_case   ;previous test
0756 : c903            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0758 : f003            >        beq skip0233
                       >        trap            ;failed not equal (non zero)
075a : 209524          >        jsr report_error
                       >
075d :                 >skip0233
                       >
0004 =                 >test_num = test_num + 1
075d : a904            >            lda #test_num   ;*** next tests' number
075f : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; PC modifying instructions (BRA, BBR, BBS, 1, 2, 3 byte NOPs, JMP(abs,x))
                        ; testing unconditional branch BRA
                        
0762 : a281                     ldx #$81        ;protect unused registers
0764 : a07e                     ldy #$7e
                                set_a 0,$ff
                       >            load_flag $ff
0766 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0768 : 48              >            pha         ;use stack to load status
0769 : a900            >            lda #0     ;precharge accu
076b : 28              >            plp
                        
076c : 8003                     bra br1         ;branch should always be taken
                                trap 
076e : 209524          >        jsr report_error
                        
0771 :                  br1
                                tst_a 0,$ff
0771 : 08              >            php         ;save flags
0772 : c900            >            cmp #0     ;test result
                       >            trap_ne
0774 : f003            >        beq skip0239
                       >        trap            ;failed not equal (non zero)
0776 : 209524          >        jsr report_error
                       >
0779 :                 >skip0239
                       >
0779 : 68              >            pla         ;load status
077a : 48              >            pha
                       >            cmp_flag $ff
077b : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
077d : f003            >        beq skip0242
                       >        trap            ;failed not equal (non zero)
077f : 209524          >        jsr report_error
                       >
0782 :                 >skip0242
                       >
0782 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
0783 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0785 : 48              >            pha         ;use stack to load status
0786 : a9ff            >            lda #$ff     ;precharge accu
0788 : 28              >            plp
                        
0789 : 8003                     bra br2         ;branch should always be taken
                                trap 
078b : 209524          >        jsr report_error
                        
078e :                  br2
                                tst_a $ff,0
078e : 08              >            php         ;save flags
078f : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0791 : f003            >        beq skip0248
                       >        trap            ;failed not equal (non zero)
0793 : 209524          >        jsr report_error
                       >
0796 :                 >skip0248
                       >
0796 : 68              >            pla         ;load status
0797 : 48              >            pha
                       >            cmp_flag 0
0798 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
079a : f003            >        beq skip0251
                       >        trap            ;failed not equal (non zero)
079c : 209524          >        jsr report_error
                       >
079f :                 >skip0251
                       >
079f : 28              >            plp         ;restore status
                        
07a0 : e081                     cpx #$81
                                trap_ne
07a2 : f003            >        beq skip0253
                       >        trap            ;failed not equal (non zero)
07a4 : 209524          >        jsr report_error
                       >
07a7 :                 >skip0253
                        
07a7 : c07e                     cpy #$7e
                                trap_ne
07a9 : f003            >        beq skip0255
                       >        trap            ;failed not equal (non zero)
07ab : 209524          >        jsr report_error
                       >
07ae :                 >skip0255
                        
                                next_test            
07ae : ad0202          >            lda test_case   ;previous test
07b1 : c904            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
07b3 : f003            >        beq skip0258
                       >        trap            ;failed not equal (non zero)
07b5 : 209524          >        jsr report_error
                       >
07b8 :                 >skip0258
                       >
0005 =                 >test_num = test_num + 1
07b8 : a905            >            lda #test_num   ;*** next tests' number
07ba : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
07bd : a000                     ldy #0          ;branch range test  
07bf : 8076                     bra bra0
                                
07c1 : c001             bra1    cpy #1
                                trap_ne         ;long range backward
07c3 : f003            >        beq skip0260
                       >        trap            ;failed not equal (non zero)
07c5 : 209524          >        jsr report_error
                       >
07c8 :                 >skip0260
                        
07c8 : c8                       iny        
07c9 : 8062                     bra bra2
                                        
07cb : c003             bra3    cpy #3
                                trap_ne         ;long range backward
07cd : f003            >        beq skip0262
                       >        trap            ;failed not equal (non zero)
07cf : 209524          >        jsr report_error
                       >
07d2 :                 >skip0262
                        
07d2 : c8                       iny        
07d3 : 804e                     bra bra4
                                        
07d5 : c005             bra5    cpy #5
                                trap_ne         ;long range backward
07d7 : f003            >        beq skip0264
                       >        trap            ;failed not equal (non zero)
07d9 : 209524          >        jsr report_error
                       >
07dc :                 >skip0264
                        
07dc : c8                       iny        
07dd : a000                     ldy #0
07df : 8004                     bra brf0
                                
07e1 : c8                       iny
07e2 : c8                       iny
07e3 : c8                       iny
07e4 : c8                       iny        
07e5 : 8003             brf0    bra brf1
                        
07e7 : c8                       iny
07e8 : c8                       iny
07e9 : c8                       iny
07ea : c8               brf1    iny        
07eb : 8002                     bra brf2
                                
07ed : c8                       iny
07ee : c8                       iny
07ef : c8               brf2    iny
07f0 : c8                       iny        
07f1 : 8001                     bra brf3
                                
07f3 : c8                       iny
07f4 : c8               brf3    iny
07f5 : c8                       iny
07f6 : c8                       iny        
07f7 : 8000                     bra brf4
                                
07f9 : c8               brf4    iny
07fa : c8                       iny
07fb : c8                       iny
07fc : c8                       iny
07fd : c00a                     cpy #10
                                trap_ne     ;short range forward
07ff : f003            >        beq skip0266
                       >        trap            ;failed not equal (non zero)
0801 : 209524          >        jsr report_error
                       >
0804 :                 >skip0266
                        
0804 : 8012                     bra brb0
                        
0806 : 88               brb4    dey
0807 : 88                       dey
0808 : 88                       dey
0809 : 88                       dey
080a : 800e                     bra brb5        
                        
080c : 88               brb3    dey
080d : 88                       dey
080e : 88                       dey
080f : 80f5                     bra brb4        
                        
0811 : 88               brb2    dey
0812 : 88                       dey
0813 : 80f7                     bra brb3        
                        
0815 : 88               brb1    dey
0816 : 80f9                     bra brb2        
                        
0818 : 80fb             brb0    bra brb1        
                        
081a : c000             brb5    cpy #0
                                trap_ne     ;short range backward
081c : f003            >        beq skip0268
                       >        trap            ;failed not equal (non zero)
081e : 209524          >        jsr report_error
                       >
0821 :                 >skip0268
                        
0821 : 801e                     bra bra6
                        
0823 : c004             bra4    cpy #4
                                trap_ne     ;long range forward
0825 : f003            >        beq skip0270
                       >        trap            ;failed not equal (non zero)
0827 : 209524          >        jsr report_error
                       >
082a :                 >skip0270
                        
082a : c8                       iny        
082b : 80a8                     bra bra5
                                        
082d : c002             bra2    cpy #2
                                trap_ne     ;long range forward
082f : f003            >        beq skip0272
                       >        trap            ;failed not equal (non zero)
0831 : 209524          >        jsr report_error
                       >
0834 :                 >skip0272
                        
0834 : c8                       iny        
0835 : 8094                     bra bra3
                                        
0837 : c000             bra0    cpy #0
                                trap_ne     ;long range forward
0839 : f003            >        beq skip0274
                       >        trap            ;failed not equal (non zero)
083b : 209524          >        jsr report_error
                       >
083e :                 >skip0274
                        
083e : c8                       iny        
083f : 8080                     bra bra1
                                        
0841 :                  bra6
                                next_test
0841 : ad0202          >            lda test_case   ;previous test
0844 : c905            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0846 : f003            >        beq skip0277
                       >        trap            ;failed not equal (non zero)
0848 : 209524          >        jsr report_error
                       >
084b :                 >skip0277
                       >
0006 =                 >test_num = test_num + 1
084b : a906            >            lda #test_num   ;*** next tests' number
084d : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                            if rkwl_wdc_op = 1
                        ; testing BBR & BBS
                        
                        bbt     macro           ;\1 = bitnum
                                lda #(1<<\1)    ;testing 1 bit on
                                sta zpt
                                set_a $33,0     ;with flags off
                                bbr \1,zpt,fail1\?
                                bbs \1,zpt,ok1\?
                                trap            ;bbs branch not taken
                        fail1\?
                                trap            ;bbr branch taken
                        ok1\?   
                                tst_a $33,0
                                set_a $cc,$ff   ;with flags on
                                bbr \1,zpt,fail2\?
                                bbs \1,zpt,ok2\?
                                trap            ;bbs branch not taken
                        fail2\? 
                                trap            ;bbr branch taken
                        ok2\?   
                                tst_a $cc,$ff
                                lda zpt
                                cmp #(1<<\1)
                                trap_ne         ;zp altered
                                lda #$ff-(1<<\1) ;testing 1 bit off
                                sta zpt
                                set_a $33,0     ;with flags off
                                bbs \1,zpt,fail3\?
                                bbr \1,zpt,ok3\?
                                trap            ;bbr branch not taken
                        fail3\? 
                                trap            ;bbs branch taken
                        ok3\?   
                                tst_a $33,0
                                set_a $cc,$ff   ;with flags on
                                bbs \1,zpt,fail4\?
                                bbr \1,zpt,ok4\?
                                trap            ;bbr branch not taken
                        fail4\? 
                                trap            ;bbs branch taken
                        ok4\?   
                                tst_a $cc,$ff
                                lda zpt
                                cmp #$ff-(1<<\1)
                                trap_ne         ;zp altered
                                endm
                        
0850 : a211                     ldx #$11        ;test bbr/bbs integrity
0852 : a022                     ldy #$22
                                bbt 0
0854 : a901            >        lda #(1<<0)    ;testing 1 bit on
0856 : 8503            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0858 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
085a : 48              >            pha         ;use stack to load status
085b : a933            >            lda #$33     ;precharge accu
085d : 28              >            plp
                       >
085e : 0f0306          >        bbr 0,zpt,fail10279
0861 : 8f0306          >        bbs 0,zpt,ok10279
                       >        trap            ;bbs branch not taken
0864 : 209524          >        jsr report_error
                       >
0867 :                 >fail10279
                       >        trap            ;bbr branch taken
0867 : 209524          >        jsr report_error
                       >
086a :                 >ok10279   
                       >        tst_a $33,0
086a : 08              >            php         ;save flags
086b : c933            >            cmp #$33     ;test result
                       >            trap_ne
086d : f003            >        beq skip0285
                       >        trap            ;failed not equal (non zero)
086f : 209524          >        jsr report_error
                       >
0872 :                 >skip0285
                       >
0872 : 68              >            pla         ;load status
0873 : 48              >            pha
                       >            cmp_flag 0
0874 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0876 : f003            >        beq skip0288
                       >        trap            ;failed not equal (non zero)
0878 : 209524          >        jsr report_error
                       >
087b :                 >skip0288
                       >
087b : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
087c : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
087e : 48              >            pha         ;use stack to load status
087f : a9cc            >            lda #$cc     ;precharge accu
0881 : 28              >            plp
                       >
0882 : 0f0306          >        bbr 0,zpt,fail20279
0885 : 8f0306          >        bbs 0,zpt,ok20279
                       >        trap            ;bbs branch not taken
0888 : 209524          >        jsr report_error
                       >
088b :                 >fail20279 
                       >        trap            ;bbr branch taken
088b : 209524          >        jsr report_error
                       >
088e :                 >ok20279   
                       >        tst_a $cc,$ff
088e : 08              >            php         ;save flags
088f : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0891 : f003            >        beq skip0295
                       >        trap            ;failed not equal (non zero)
0893 : 209524          >        jsr report_error
                       >
0896 :                 >skip0295
                       >
0896 : 68              >            pla         ;load status
0897 : 48              >            pha
                       >            cmp_flag $ff
0898 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
089a : f003            >        beq skip0298
                       >        trap            ;failed not equal (non zero)
089c : 209524          >        jsr report_error
                       >
089f :                 >skip0298
                       >
089f : 28              >            plp         ;restore status
                       >
08a0 : a503            >        lda zpt
08a2 : c901            >        cmp #(1<<0)
                       >        trap_ne         ;zp altered
08a4 : f003            >        beq skip0300
                       >        trap            ;failed not equal (non zero)
08a6 : 209524          >        jsr report_error
                       >
08a9 :                 >skip0300
                       >
08a9 : a9fe            >        lda #$ff-(1<<0) ;testing 1 bit off
08ab : 8503            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
08ad : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
08af : 48              >            pha         ;use stack to load status
08b0 : a933            >            lda #$33     ;precharge accu
08b2 : 28              >            plp
                       >
08b3 : 8f0306          >        bbs 0,zpt,fail30279
08b6 : 0f0306          >        bbr 0,zpt,ok30279
                       >        trap            ;bbr branch not taken
08b9 : 209524          >        jsr report_error
                       >
08bc :                 >fail30279 
                       >        trap            ;bbs branch taken
08bc : 209524          >        jsr report_error
                       >
08bf :                 >ok30279   
                       >        tst_a $33,0
08bf : 08              >            php         ;save flags
08c0 : c933            >            cmp #$33     ;test result
                       >            trap_ne
08c2 : f003            >        beq skip0307
                       >        trap            ;failed not equal (non zero)
08c4 : 209524          >        jsr report_error
                       >
08c7 :                 >skip0307
                       >
08c7 : 68              >            pla         ;load status
08c8 : 48              >            pha
                       >            cmp_flag 0
08c9 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
08cb : f003            >        beq skip0310
                       >        trap            ;failed not equal (non zero)
08cd : 209524          >        jsr report_error
                       >
08d0 :                 >skip0310
                       >
08d0 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
08d1 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
08d3 : 48              >            pha         ;use stack to load status
08d4 : a9cc            >            lda #$cc     ;precharge accu
08d6 : 28              >            plp
                       >
08d7 : 8f0306          >        bbs 0,zpt,fail40279
08da : 0f0306          >        bbr 0,zpt,ok40279
                       >        trap            ;bbr branch not taken
08dd : 209524          >        jsr report_error
                       >
08e0 :                 >fail40279 
                       >        trap            ;bbs branch taken
08e0 : 209524          >        jsr report_error
                       >
08e3 :                 >ok40279   
                       >        tst_a $cc,$ff
08e3 : 08              >            php         ;save flags
08e4 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
08e6 : f003            >        beq skip0317
                       >        trap            ;failed not equal (non zero)
08e8 : 209524          >        jsr report_error
                       >
08eb :                 >skip0317
                       >
08eb : 68              >            pla         ;load status
08ec : 48              >            pha
                       >            cmp_flag $ff
08ed : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
08ef : f003            >        beq skip0320
                       >        trap            ;failed not equal (non zero)
08f1 : 209524          >        jsr report_error
                       >
08f4 :                 >skip0320
                       >
08f4 : 28              >            plp         ;restore status
                       >
08f5 : a503            >        lda zpt
08f7 : c9fe            >        cmp #$ff-(1<<0)
                       >        trap_ne         ;zp altered
08f9 : f003            >        beq skip0322
                       >        trap            ;failed not equal (non zero)
08fb : 209524          >        jsr report_error
                       >
08fe :                 >skip0322
                       >
                        
                                bbt 1
08fe : a902            >        lda #(1<<1)    ;testing 1 bit on
0900 : 8503            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0902 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0904 : 48              >            pha         ;use stack to load status
0905 : a933            >            lda #$33     ;precharge accu
0907 : 28              >            plp
                       >
0908 : 1f0306          >        bbr 1,zpt,fail10324
090b : 9f0306          >        bbs 1,zpt,ok10324
                       >        trap            ;bbs branch not taken
090e : 209524          >        jsr report_error
                       >
0911 :                 >fail10324
                       >        trap            ;bbr branch taken
0911 : 209524          >        jsr report_error
                       >
0914 :                 >ok10324   
                       >        tst_a $33,0
0914 : 08              >            php         ;save flags
0915 : c933            >            cmp #$33     ;test result
                       >            trap_ne
0917 : f003            >        beq skip0330
                       >        trap            ;failed not equal (non zero)
0919 : 209524          >        jsr report_error
                       >
091c :                 >skip0330
                       >
091c : 68              >            pla         ;load status
091d : 48              >            pha
                       >            cmp_flag 0
091e : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0920 : f003            >        beq skip0333
                       >        trap            ;failed not equal (non zero)
0922 : 209524          >        jsr report_error
                       >
0925 :                 >skip0333
                       >
0925 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0926 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0928 : 48              >            pha         ;use stack to load status
0929 : a9cc            >            lda #$cc     ;precharge accu
092b : 28              >            plp
                       >
092c : 1f0306          >        bbr 1,zpt,fail20324
092f : 9f0306          >        bbs 1,zpt,ok20324
                       >        trap            ;bbs branch not taken
0932 : 209524          >        jsr report_error
                       >
0935 :                 >fail20324 
                       >        trap            ;bbr branch taken
0935 : 209524          >        jsr report_error
                       >
0938 :                 >ok20324   
                       >        tst_a $cc,$ff
0938 : 08              >            php         ;save flags
0939 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
093b : f003            >        beq skip0340
                       >        trap            ;failed not equal (non zero)
093d : 209524          >        jsr report_error
                       >
0940 :                 >skip0340
                       >
0940 : 68              >            pla         ;load status
0941 : 48              >            pha
                       >            cmp_flag $ff
0942 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0944 : f003            >        beq skip0343
                       >        trap            ;failed not equal (non zero)
0946 : 209524          >        jsr report_error
                       >
0949 :                 >skip0343
                       >
0949 : 28              >            plp         ;restore status
                       >
094a : a503            >        lda zpt
094c : c902            >        cmp #(1<<1)
                       >        trap_ne         ;zp altered
094e : f003            >        beq skip0345
                       >        trap            ;failed not equal (non zero)
0950 : 209524          >        jsr report_error
                       >
0953 :                 >skip0345
                       >
0953 : a9fd            >        lda #$ff-(1<<1) ;testing 1 bit off
0955 : 8503            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0957 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0959 : 48              >            pha         ;use stack to load status
095a : a933            >            lda #$33     ;precharge accu
095c : 28              >            plp
                       >
095d : 9f0306          >        bbs 1,zpt,fail30324
0960 : 1f0306          >        bbr 1,zpt,ok30324
                       >        trap            ;bbr branch not taken
0963 : 209524          >        jsr report_error
                       >
0966 :                 >fail30324 
                       >        trap            ;bbs branch taken
0966 : 209524          >        jsr report_error
                       >
0969 :                 >ok30324   
                       >        tst_a $33,0
0969 : 08              >            php         ;save flags
096a : c933            >            cmp #$33     ;test result
                       >            trap_ne
096c : f003            >        beq skip0352
                       >        trap            ;failed not equal (non zero)
096e : 209524          >        jsr report_error
                       >
0971 :                 >skip0352
                       >
0971 : 68              >            pla         ;load status
0972 : 48              >            pha
                       >            cmp_flag 0
0973 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0975 : f003            >        beq skip0355
                       >        trap            ;failed not equal (non zero)
0977 : 209524          >        jsr report_error
                       >
097a :                 >skip0355
                       >
097a : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
097b : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
097d : 48              >            pha         ;use stack to load status
097e : a9cc            >            lda #$cc     ;precharge accu
0980 : 28              >            plp
                       >
0981 : 9f0306          >        bbs 1,zpt,fail40324
0984 : 1f0306          >        bbr 1,zpt,ok40324
                       >        trap            ;bbr branch not taken
0987 : 209524          >        jsr report_error
                       >
098a :                 >fail40324 
                       >        trap            ;bbs branch taken
098a : 209524          >        jsr report_error
                       >
098d :                 >ok40324   
                       >        tst_a $cc,$ff
098d : 08              >            php         ;save flags
098e : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0990 : f003            >        beq skip0362
                       >        trap            ;failed not equal (non zero)
0992 : 209524          >        jsr report_error
                       >
0995 :                 >skip0362
                       >
0995 : 68              >            pla         ;load status
0996 : 48              >            pha
                       >            cmp_flag $ff
0997 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0999 : f003            >        beq skip0365
                       >        trap            ;failed not equal (non zero)
099b : 209524          >        jsr report_error
                       >
099e :                 >skip0365
                       >
099e : 28              >            plp         ;restore status
                       >
099f : a503            >        lda zpt
09a1 : c9fd            >        cmp #$ff-(1<<1)
                       >        trap_ne         ;zp altered
09a3 : f003            >        beq skip0367
                       >        trap            ;failed not equal (non zero)
09a5 : 209524          >        jsr report_error
                       >
09a8 :                 >skip0367
                       >
                        
                                bbt 2
09a8 : a904            >        lda #(1<<2)    ;testing 1 bit on
09aa : 8503            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
09ac : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
09ae : 48              >            pha         ;use stack to load status
09af : a933            >            lda #$33     ;precharge accu
09b1 : 28              >            plp
                       >
09b2 : 2f0306          >        bbr 2,zpt,fail10369
09b5 : af0306          >        bbs 2,zpt,ok10369
                       >        trap            ;bbs branch not taken
09b8 : 209524          >        jsr report_error
                       >
09bb :                 >fail10369
                       >        trap            ;bbr branch taken
09bb : 209524          >        jsr report_error
                       >
09be :                 >ok10369   
                       >        tst_a $33,0
09be : 08              >            php         ;save flags
09bf : c933            >            cmp #$33     ;test result
                       >            trap_ne
09c1 : f003            >        beq skip0375
                       >        trap            ;failed not equal (non zero)
09c3 : 209524          >        jsr report_error
                       >
09c6 :                 >skip0375
                       >
09c6 : 68              >            pla         ;load status
09c7 : 48              >            pha
                       >            cmp_flag 0
09c8 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
09ca : f003            >        beq skip0378
                       >        trap            ;failed not equal (non zero)
09cc : 209524          >        jsr report_error
                       >
09cf :                 >skip0378
                       >
09cf : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
09d0 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
09d2 : 48              >            pha         ;use stack to load status
09d3 : a9cc            >            lda #$cc     ;precharge accu
09d5 : 28              >            plp
                       >
09d6 : 2f0306          >        bbr 2,zpt,fail20369
09d9 : af0306          >        bbs 2,zpt,ok20369
                       >        trap            ;bbs branch not taken
09dc : 209524          >        jsr report_error
                       >
09df :                 >fail20369 
                       >        trap            ;bbr branch taken
09df : 209524          >        jsr report_error
                       >
09e2 :                 >ok20369   
                       >        tst_a $cc,$ff
09e2 : 08              >            php         ;save flags
09e3 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
09e5 : f003            >        beq skip0385
                       >        trap            ;failed not equal (non zero)
09e7 : 209524          >        jsr report_error
                       >
09ea :                 >skip0385
                       >
09ea : 68              >            pla         ;load status
09eb : 48              >            pha
                       >            cmp_flag $ff
09ec : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
09ee : f003            >        beq skip0388
                       >        trap            ;failed not equal (non zero)
09f0 : 209524          >        jsr report_error
                       >
09f3 :                 >skip0388
                       >
09f3 : 28              >            plp         ;restore status
                       >
09f4 : a503            >        lda zpt
09f6 : c904            >        cmp #(1<<2)
                       >        trap_ne         ;zp altered
09f8 : f003            >        beq skip0390
                       >        trap            ;failed not equal (non zero)
09fa : 209524          >        jsr report_error
                       >
09fd :                 >skip0390
                       >
09fd : a9fb            >        lda #$ff-(1<<2) ;testing 1 bit off
09ff : 8503            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0a01 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0a03 : 48              >            pha         ;use stack to load status
0a04 : a933            >            lda #$33     ;precharge accu
0a06 : 28              >            plp
                       >
0a07 : af0306          >        bbs 2,zpt,fail30369
0a0a : 2f0306          >        bbr 2,zpt,ok30369
                       >        trap            ;bbr branch not taken
0a0d : 209524          >        jsr report_error
                       >
0a10 :                 >fail30369 
                       >        trap            ;bbs branch taken
0a10 : 209524          >        jsr report_error
                       >
0a13 :                 >ok30369   
                       >        tst_a $33,0
0a13 : 08              >            php         ;save flags
0a14 : c933            >            cmp #$33     ;test result
                       >            trap_ne
0a16 : f003            >        beq skip0397
                       >        trap            ;failed not equal (non zero)
0a18 : 209524          >        jsr report_error
                       >
0a1b :                 >skip0397
                       >
0a1b : 68              >            pla         ;load status
0a1c : 48              >            pha
                       >            cmp_flag 0
0a1d : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0a1f : f003            >        beq skip0400
                       >        trap            ;failed not equal (non zero)
0a21 : 209524          >        jsr report_error
                       >
0a24 :                 >skip0400
                       >
0a24 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0a25 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0a27 : 48              >            pha         ;use stack to load status
0a28 : a9cc            >            lda #$cc     ;precharge accu
0a2a : 28              >            plp
                       >
0a2b : af0306          >        bbs 2,zpt,fail40369
0a2e : 2f0306          >        bbr 2,zpt,ok40369
                       >        trap            ;bbr branch not taken
0a31 : 209524          >        jsr report_error
                       >
0a34 :                 >fail40369 
                       >        trap            ;bbs branch taken
0a34 : 209524          >        jsr report_error
                       >
0a37 :                 >ok40369   
                       >        tst_a $cc,$ff
0a37 : 08              >            php         ;save flags
0a38 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0a3a : f003            >        beq skip0407
                       >        trap            ;failed not equal (non zero)
0a3c : 209524          >        jsr report_error
                       >
0a3f :                 >skip0407
                       >
0a3f : 68              >            pla         ;load status
0a40 : 48              >            pha
                       >            cmp_flag $ff
0a41 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0a43 : f003            >        beq skip0410
                       >        trap            ;failed not equal (non zero)
0a45 : 209524          >        jsr report_error
                       >
0a48 :                 >skip0410
                       >
0a48 : 28              >            plp         ;restore status
                       >
0a49 : a503            >        lda zpt
0a4b : c9fb            >        cmp #$ff-(1<<2)
                       >        trap_ne         ;zp altered
0a4d : f003            >        beq skip0412
                       >        trap            ;failed not equal (non zero)
0a4f : 209524          >        jsr report_error
                       >
0a52 :                 >skip0412
                       >
                        
                                bbt 3
0a52 : a908            >        lda #(1<<3)    ;testing 1 bit on
0a54 : 8503            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0a56 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0a58 : 48              >            pha         ;use stack to load status
0a59 : a933            >            lda #$33     ;precharge accu
0a5b : 28              >            plp
                       >
0a5c : 3f0306          >        bbr 3,zpt,fail10414
0a5f : bf0306          >        bbs 3,zpt,ok10414
                       >        trap            ;bbs branch not taken
0a62 : 209524          >        jsr report_error
                       >
0a65 :                 >fail10414
                       >        trap            ;bbr branch taken
0a65 : 209524          >        jsr report_error
                       >
0a68 :                 >ok10414   
                       >        tst_a $33,0
0a68 : 08              >            php         ;save flags
0a69 : c933            >            cmp #$33     ;test result
                       >            trap_ne
0a6b : f003            >        beq skip0420
                       >        trap            ;failed not equal (non zero)
0a6d : 209524          >        jsr report_error
                       >
0a70 :                 >skip0420
                       >
0a70 : 68              >            pla         ;load status
0a71 : 48              >            pha
                       >            cmp_flag 0
0a72 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0a74 : f003            >        beq skip0423
                       >        trap            ;failed not equal (non zero)
0a76 : 209524          >        jsr report_error
                       >
0a79 :                 >skip0423
                       >
0a79 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0a7a : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0a7c : 48              >            pha         ;use stack to load status
0a7d : a9cc            >            lda #$cc     ;precharge accu
0a7f : 28              >            plp
                       >
0a80 : 3f0306          >        bbr 3,zpt,fail20414
0a83 : bf0306          >        bbs 3,zpt,ok20414
                       >        trap            ;bbs branch not taken
0a86 : 209524          >        jsr report_error
                       >
0a89 :                 >fail20414 
                       >        trap            ;bbr branch taken
0a89 : 209524          >        jsr report_error
                       >
0a8c :                 >ok20414   
                       >        tst_a $cc,$ff
0a8c : 08              >            php         ;save flags
0a8d : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0a8f : f003            >        beq skip0430
                       >        trap            ;failed not equal (non zero)
0a91 : 209524          >        jsr report_error
                       >
0a94 :                 >skip0430
                       >
0a94 : 68              >            pla         ;load status
0a95 : 48              >            pha
                       >            cmp_flag $ff
0a96 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0a98 : f003            >        beq skip0433
                       >        trap            ;failed not equal (non zero)
0a9a : 209524          >        jsr report_error
                       >
0a9d :                 >skip0433
                       >
0a9d : 28              >            plp         ;restore status
                       >
0a9e : a503            >        lda zpt
0aa0 : c908            >        cmp #(1<<3)
                       >        trap_ne         ;zp altered
0aa2 : f003            >        beq skip0435
                       >        trap            ;failed not equal (non zero)
0aa4 : 209524          >        jsr report_error
                       >
0aa7 :                 >skip0435
                       >
0aa7 : a9f7            >        lda #$ff-(1<<3) ;testing 1 bit off
0aa9 : 8503            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0aab : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0aad : 48              >            pha         ;use stack to load status
0aae : a933            >            lda #$33     ;precharge accu
0ab0 : 28              >            plp
                       >
0ab1 : bf0306          >        bbs 3,zpt,fail30414
0ab4 : 3f0306          >        bbr 3,zpt,ok30414
                       >        trap            ;bbr branch not taken
0ab7 : 209524          >        jsr report_error
                       >
0aba :                 >fail30414 
                       >        trap            ;bbs branch taken
0aba : 209524          >        jsr report_error
                       >
0abd :                 >ok30414   
                       >        tst_a $33,0
0abd : 08              >            php         ;save flags
0abe : c933            >            cmp #$33     ;test result
                       >            trap_ne
0ac0 : f003            >        beq skip0442
                       >        trap            ;failed not equal (non zero)
0ac2 : 209524          >        jsr report_error
                       >
0ac5 :                 >skip0442
                       >
0ac5 : 68              >            pla         ;load status
0ac6 : 48              >            pha
                       >            cmp_flag 0
0ac7 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0ac9 : f003            >        beq skip0445
                       >        trap            ;failed not equal (non zero)
0acb : 209524          >        jsr report_error
                       >
0ace :                 >skip0445
                       >
0ace : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0acf : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0ad1 : 48              >            pha         ;use stack to load status
0ad2 : a9cc            >            lda #$cc     ;precharge accu
0ad4 : 28              >            plp
                       >
0ad5 : bf0306          >        bbs 3,zpt,fail40414
0ad8 : 3f0306          >        bbr 3,zpt,ok40414
                       >        trap            ;bbr branch not taken
0adb : 209524          >        jsr report_error
                       >
0ade :                 >fail40414 
                       >        trap            ;bbs branch taken
0ade : 209524          >        jsr report_error
                       >
0ae1 :                 >ok40414   
                       >        tst_a $cc,$ff
0ae1 : 08              >            php         ;save flags
0ae2 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0ae4 : f003            >        beq skip0452
                       >        trap            ;failed not equal (non zero)
0ae6 : 209524          >        jsr report_error
                       >
0ae9 :                 >skip0452
                       >
0ae9 : 68              >            pla         ;load status
0aea : 48              >            pha
                       >            cmp_flag $ff
0aeb : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0aed : f003            >        beq skip0455
                       >        trap            ;failed not equal (non zero)
0aef : 209524          >        jsr report_error
                       >
0af2 :                 >skip0455
                       >
0af2 : 28              >            plp         ;restore status
                       >
0af3 : a503            >        lda zpt
0af5 : c9f7            >        cmp #$ff-(1<<3)
                       >        trap_ne         ;zp altered
0af7 : f003            >        beq skip0457
                       >        trap            ;failed not equal (non zero)
0af9 : 209524          >        jsr report_error
                       >
0afc :                 >skip0457
                       >
                        
                                bbt 4
0afc : a910            >        lda #(1<<4)    ;testing 1 bit on
0afe : 8503            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0b00 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0b02 : 48              >            pha         ;use stack to load status
0b03 : a933            >            lda #$33     ;precharge accu
0b05 : 28              >            plp
                       >
0b06 : 4f0306          >        bbr 4,zpt,fail10459
0b09 : cf0306          >        bbs 4,zpt,ok10459
                       >        trap            ;bbs branch not taken
0b0c : 209524          >        jsr report_error
                       >
0b0f :                 >fail10459
                       >        trap            ;bbr branch taken
0b0f : 209524          >        jsr report_error
                       >
0b12 :                 >ok10459   
                       >        tst_a $33,0
0b12 : 08              >            php         ;save flags
0b13 : c933            >            cmp #$33     ;test result
                       >            trap_ne
0b15 : f003            >        beq skip0465
                       >        trap            ;failed not equal (non zero)
0b17 : 209524          >        jsr report_error
                       >
0b1a :                 >skip0465
                       >
0b1a : 68              >            pla         ;load status
0b1b : 48              >            pha
                       >            cmp_flag 0
0b1c : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0b1e : f003            >        beq skip0468
                       >        trap            ;failed not equal (non zero)
0b20 : 209524          >        jsr report_error
                       >
0b23 :                 >skip0468
                       >
0b23 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0b24 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0b26 : 48              >            pha         ;use stack to load status
0b27 : a9cc            >            lda #$cc     ;precharge accu
0b29 : 28              >            plp
                       >
0b2a : 4f0306          >        bbr 4,zpt,fail20459
0b2d : cf0306          >        bbs 4,zpt,ok20459
                       >        trap            ;bbs branch not taken
0b30 : 209524          >        jsr report_error
                       >
0b33 :                 >fail20459 
                       >        trap            ;bbr branch taken
0b33 : 209524          >        jsr report_error
                       >
0b36 :                 >ok20459   
                       >        tst_a $cc,$ff
0b36 : 08              >            php         ;save flags
0b37 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0b39 : f003            >        beq skip0475
                       >        trap            ;failed not equal (non zero)
0b3b : 209524          >        jsr report_error
                       >
0b3e :                 >skip0475
                       >
0b3e : 68              >            pla         ;load status
0b3f : 48              >            pha
                       >            cmp_flag $ff
0b40 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0b42 : f003            >        beq skip0478
                       >        trap            ;failed not equal (non zero)
0b44 : 209524          >        jsr report_error
                       >
0b47 :                 >skip0478
                       >
0b47 : 28              >            plp         ;restore status
                       >
0b48 : a503            >        lda zpt
0b4a : c910            >        cmp #(1<<4)
                       >        trap_ne         ;zp altered
0b4c : f003            >        beq skip0480
                       >        trap            ;failed not equal (non zero)
0b4e : 209524          >        jsr report_error
                       >
0b51 :                 >skip0480
                       >
0b51 : a9ef            >        lda #$ff-(1<<4) ;testing 1 bit off
0b53 : 8503            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0b55 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0b57 : 48              >            pha         ;use stack to load status
0b58 : a933            >            lda #$33     ;precharge accu
0b5a : 28              >            plp
                       >
0b5b : cf0306          >        bbs 4,zpt,fail30459
0b5e : 4f0306          >        bbr 4,zpt,ok30459
                       >        trap            ;bbr branch not taken
0b61 : 209524          >        jsr report_error
                       >
0b64 :                 >fail30459 
                       >        trap            ;bbs branch taken
0b64 : 209524          >        jsr report_error
                       >
0b67 :                 >ok30459   
                       >        tst_a $33,0
0b67 : 08              >            php         ;save flags
0b68 : c933            >            cmp #$33     ;test result
                       >            trap_ne
0b6a : f003            >        beq skip0487
                       >        trap            ;failed not equal (non zero)
0b6c : 209524          >        jsr report_error
                       >
0b6f :                 >skip0487
                       >
0b6f : 68              >            pla         ;load status
0b70 : 48              >            pha
                       >            cmp_flag 0
0b71 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0b73 : f003            >        beq skip0490
                       >        trap            ;failed not equal (non zero)
0b75 : 209524          >        jsr report_error
                       >
0b78 :                 >skip0490
                       >
0b78 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0b79 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0b7b : 48              >            pha         ;use stack to load status
0b7c : a9cc            >            lda #$cc     ;precharge accu
0b7e : 28              >            plp
                       >
0b7f : cf0306          >        bbs 4,zpt,fail40459
0b82 : 4f0306          >        bbr 4,zpt,ok40459
                       >        trap            ;bbr branch not taken
0b85 : 209524          >        jsr report_error
                       >
0b88 :                 >fail40459 
                       >        trap            ;bbs branch taken
0b88 : 209524          >        jsr report_error
                       >
0b8b :                 >ok40459   
                       >        tst_a $cc,$ff
0b8b : 08              >            php         ;save flags
0b8c : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0b8e : f003            >        beq skip0497
                       >        trap            ;failed not equal (non zero)
0b90 : 209524          >        jsr report_error
                       >
0b93 :                 >skip0497
                       >
0b93 : 68              >            pla         ;load status
0b94 : 48              >            pha
                       >            cmp_flag $ff
0b95 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0b97 : f003            >        beq skip0500
                       >        trap            ;failed not equal (non zero)
0b99 : 209524          >        jsr report_error
                       >
0b9c :                 >skip0500
                       >
0b9c : 28              >            plp         ;restore status
                       >
0b9d : a503            >        lda zpt
0b9f : c9ef            >        cmp #$ff-(1<<4)
                       >        trap_ne         ;zp altered
0ba1 : f003            >        beq skip0502
                       >        trap            ;failed not equal (non zero)
0ba3 : 209524          >        jsr report_error
                       >
0ba6 :                 >skip0502
                       >
                        
                                bbt 5
0ba6 : a920            >        lda #(1<<5)    ;testing 1 bit on
0ba8 : 8503            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0baa : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0bac : 48              >            pha         ;use stack to load status
0bad : a933            >            lda #$33     ;precharge accu
0baf : 28              >            plp
                       >
0bb0 : 5f0306          >        bbr 5,zpt,fail10504
0bb3 : df0306          >        bbs 5,zpt,ok10504
                       >        trap            ;bbs branch not taken
0bb6 : 209524          >        jsr report_error
                       >
0bb9 :                 >fail10504
                       >        trap            ;bbr branch taken
0bb9 : 209524          >        jsr report_error
                       >
0bbc :                 >ok10504   
                       >        tst_a $33,0
0bbc : 08              >            php         ;save flags
0bbd : c933            >            cmp #$33     ;test result
                       >            trap_ne
0bbf : f003            >        beq skip0510
                       >        trap            ;failed not equal (non zero)
0bc1 : 209524          >        jsr report_error
                       >
0bc4 :                 >skip0510
                       >
0bc4 : 68              >            pla         ;load status
0bc5 : 48              >            pha
                       >            cmp_flag 0
0bc6 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0bc8 : f003            >        beq skip0513
                       >        trap            ;failed not equal (non zero)
0bca : 209524          >        jsr report_error
                       >
0bcd :                 >skip0513
                       >
0bcd : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0bce : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0bd0 : 48              >            pha         ;use stack to load status
0bd1 : a9cc            >            lda #$cc     ;precharge accu
0bd3 : 28              >            plp
                       >
0bd4 : 5f0306          >        bbr 5,zpt,fail20504
0bd7 : df0306          >        bbs 5,zpt,ok20504
                       >        trap            ;bbs branch not taken
0bda : 209524          >        jsr report_error
                       >
0bdd :                 >fail20504 
                       >        trap            ;bbr branch taken
0bdd : 209524          >        jsr report_error
                       >
0be0 :                 >ok20504   
                       >        tst_a $cc,$ff
0be0 : 08              >            php         ;save flags
0be1 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0be3 : f003            >        beq skip0520
                       >        trap            ;failed not equal (non zero)
0be5 : 209524          >        jsr report_error
                       >
0be8 :                 >skip0520
                       >
0be8 : 68              >            pla         ;load status
0be9 : 48              >            pha
                       >            cmp_flag $ff
0bea : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0bec : f003            >        beq skip0523
                       >        trap            ;failed not equal (non zero)
0bee : 209524          >        jsr report_error
                       >
0bf1 :                 >skip0523
                       >
0bf1 : 28              >            plp         ;restore status
                       >
0bf2 : a503            >        lda zpt
0bf4 : c920            >        cmp #(1<<5)
                       >        trap_ne         ;zp altered
0bf6 : f003            >        beq skip0525
                       >        trap            ;failed not equal (non zero)
0bf8 : 209524          >        jsr report_error
                       >
0bfb :                 >skip0525
                       >
0bfb : a9df            >        lda #$ff-(1<<5) ;testing 1 bit off
0bfd : 8503            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0bff : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0c01 : 48              >            pha         ;use stack to load status
0c02 : a933            >            lda #$33     ;precharge accu
0c04 : 28              >            plp
                       >
0c05 : df0306          >        bbs 5,zpt,fail30504
0c08 : 5f0306          >        bbr 5,zpt,ok30504
                       >        trap            ;bbr branch not taken
0c0b : 209524          >        jsr report_error
                       >
0c0e :                 >fail30504 
                       >        trap            ;bbs branch taken
0c0e : 209524          >        jsr report_error
                       >
0c11 :                 >ok30504   
                       >        tst_a $33,0
0c11 : 08              >            php         ;save flags
0c12 : c933            >            cmp #$33     ;test result
                       >            trap_ne
0c14 : f003            >        beq skip0532
                       >        trap            ;failed not equal (non zero)
0c16 : 209524          >        jsr report_error
                       >
0c19 :                 >skip0532
                       >
0c19 : 68              >            pla         ;load status
0c1a : 48              >            pha
                       >            cmp_flag 0
0c1b : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c1d : f003            >        beq skip0535
                       >        trap            ;failed not equal (non zero)
0c1f : 209524          >        jsr report_error
                       >
0c22 :                 >skip0535
                       >
0c22 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0c23 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0c25 : 48              >            pha         ;use stack to load status
0c26 : a9cc            >            lda #$cc     ;precharge accu
0c28 : 28              >            plp
                       >
0c29 : df0306          >        bbs 5,zpt,fail40504
0c2c : 5f0306          >        bbr 5,zpt,ok40504
                       >        trap            ;bbr branch not taken
0c2f : 209524          >        jsr report_error
                       >
0c32 :                 >fail40504 
                       >        trap            ;bbs branch taken
0c32 : 209524          >        jsr report_error
                       >
0c35 :                 >ok40504   
                       >        tst_a $cc,$ff
0c35 : 08              >            php         ;save flags
0c36 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0c38 : f003            >        beq skip0542
                       >        trap            ;failed not equal (non zero)
0c3a : 209524          >        jsr report_error
                       >
0c3d :                 >skip0542
                       >
0c3d : 68              >            pla         ;load status
0c3e : 48              >            pha
                       >            cmp_flag $ff
0c3f : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c41 : f003            >        beq skip0545
                       >        trap            ;failed not equal (non zero)
0c43 : 209524          >        jsr report_error
                       >
0c46 :                 >skip0545
                       >
0c46 : 28              >            plp         ;restore status
                       >
0c47 : a503            >        lda zpt
0c49 : c9df            >        cmp #$ff-(1<<5)
                       >        trap_ne         ;zp altered
0c4b : f003            >        beq skip0547
                       >        trap            ;failed not equal (non zero)
0c4d : 209524          >        jsr report_error
                       >
0c50 :                 >skip0547
                       >
                        
                                bbt 6
0c50 : a940            >        lda #(1<<6)    ;testing 1 bit on
0c52 : 8503            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0c54 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0c56 : 48              >            pha         ;use stack to load status
0c57 : a933            >            lda #$33     ;precharge accu
0c59 : 28              >            plp
                       >
0c5a : 6f0306          >        bbr 6,zpt,fail10549
0c5d : ef0306          >        bbs 6,zpt,ok10549
                       >        trap            ;bbs branch not taken
0c60 : 209524          >        jsr report_error
                       >
0c63 :                 >fail10549
                       >        trap            ;bbr branch taken
0c63 : 209524          >        jsr report_error
                       >
0c66 :                 >ok10549   
                       >        tst_a $33,0
0c66 : 08              >            php         ;save flags
0c67 : c933            >            cmp #$33     ;test result
                       >            trap_ne
0c69 : f003            >        beq skip0555
                       >        trap            ;failed not equal (non zero)
0c6b : 209524          >        jsr report_error
                       >
0c6e :                 >skip0555
                       >
0c6e : 68              >            pla         ;load status
0c6f : 48              >            pha
                       >            cmp_flag 0
0c70 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c72 : f003            >        beq skip0558
                       >        trap            ;failed not equal (non zero)
0c74 : 209524          >        jsr report_error
                       >
0c77 :                 >skip0558
                       >
0c77 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0c78 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0c7a : 48              >            pha         ;use stack to load status
0c7b : a9cc            >            lda #$cc     ;precharge accu
0c7d : 28              >            plp
                       >
0c7e : 6f0306          >        bbr 6,zpt,fail20549
0c81 : ef0306          >        bbs 6,zpt,ok20549
                       >        trap            ;bbs branch not taken
0c84 : 209524          >        jsr report_error
                       >
0c87 :                 >fail20549 
                       >        trap            ;bbr branch taken
0c87 : 209524          >        jsr report_error
                       >
0c8a :                 >ok20549   
                       >        tst_a $cc,$ff
0c8a : 08              >            php         ;save flags
0c8b : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0c8d : f003            >        beq skip0565
                       >        trap            ;failed not equal (non zero)
0c8f : 209524          >        jsr report_error
                       >
0c92 :                 >skip0565
                       >
0c92 : 68              >            pla         ;load status
0c93 : 48              >            pha
                       >            cmp_flag $ff
0c94 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0c96 : f003            >        beq skip0568
                       >        trap            ;failed not equal (non zero)
0c98 : 209524          >        jsr report_error
                       >
0c9b :                 >skip0568
                       >
0c9b : 28              >            plp         ;restore status
                       >
0c9c : a503            >        lda zpt
0c9e : c940            >        cmp #(1<<6)
                       >        trap_ne         ;zp altered
0ca0 : f003            >        beq skip0570
                       >        trap            ;failed not equal (non zero)
0ca2 : 209524          >        jsr report_error
                       >
0ca5 :                 >skip0570
                       >
0ca5 : a9bf            >        lda #$ff-(1<<6) ;testing 1 bit off
0ca7 : 8503            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0ca9 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0cab : 48              >            pha         ;use stack to load status
0cac : a933            >            lda #$33     ;precharge accu
0cae : 28              >            plp
                       >
0caf : ef0306          >        bbs 6,zpt,fail30549
0cb2 : 6f0306          >        bbr 6,zpt,ok30549
                       >        trap            ;bbr branch not taken
0cb5 : 209524          >        jsr report_error
                       >
0cb8 :                 >fail30549 
                       >        trap            ;bbs branch taken
0cb8 : 209524          >        jsr report_error
                       >
0cbb :                 >ok30549   
                       >        tst_a $33,0
0cbb : 08              >            php         ;save flags
0cbc : c933            >            cmp #$33     ;test result
                       >            trap_ne
0cbe : f003            >        beq skip0577
                       >        trap            ;failed not equal (non zero)
0cc0 : 209524          >        jsr report_error
                       >
0cc3 :                 >skip0577
                       >
0cc3 : 68              >            pla         ;load status
0cc4 : 48              >            pha
                       >            cmp_flag 0
0cc5 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0cc7 : f003            >        beq skip0580
                       >        trap            ;failed not equal (non zero)
0cc9 : 209524          >        jsr report_error
                       >
0ccc :                 >skip0580
                       >
0ccc : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0ccd : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0ccf : 48              >            pha         ;use stack to load status
0cd0 : a9cc            >            lda #$cc     ;precharge accu
0cd2 : 28              >            plp
                       >
0cd3 : ef0306          >        bbs 6,zpt,fail40549
0cd6 : 6f0306          >        bbr 6,zpt,ok40549
                       >        trap            ;bbr branch not taken
0cd9 : 209524          >        jsr report_error
                       >
0cdc :                 >fail40549 
                       >        trap            ;bbs branch taken
0cdc : 209524          >        jsr report_error
                       >
0cdf :                 >ok40549   
                       >        tst_a $cc,$ff
0cdf : 08              >            php         ;save flags
0ce0 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0ce2 : f003            >        beq skip0587
                       >        trap            ;failed not equal (non zero)
0ce4 : 209524          >        jsr report_error
                       >
0ce7 :                 >skip0587
                       >
0ce7 : 68              >            pla         ;load status
0ce8 : 48              >            pha
                       >            cmp_flag $ff
0ce9 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0ceb : f003            >        beq skip0590
                       >        trap            ;failed not equal (non zero)
0ced : 209524          >        jsr report_error
                       >
0cf0 :                 >skip0590
                       >
0cf0 : 28              >            plp         ;restore status
                       >
0cf1 : a503            >        lda zpt
0cf3 : c9bf            >        cmp #$ff-(1<<6)
                       >        trap_ne         ;zp altered
0cf5 : f003            >        beq skip0592
                       >        trap            ;failed not equal (non zero)
0cf7 : 209524          >        jsr report_error
                       >
0cfa :                 >skip0592
                       >
                        
                                bbt 7
0cfa : a980            >        lda #(1<<7)    ;testing 1 bit on
0cfc : 8503            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0cfe : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0d00 : 48              >            pha         ;use stack to load status
0d01 : a933            >            lda #$33     ;precharge accu
0d03 : 28              >            plp
                       >
0d04 : 7f0306          >        bbr 7,zpt,fail10594
0d07 : ff0306          >        bbs 7,zpt,ok10594
                       >        trap            ;bbs branch not taken
0d0a : 209524          >        jsr report_error
                       >
0d0d :                 >fail10594
                       >        trap            ;bbr branch taken
0d0d : 209524          >        jsr report_error
                       >
0d10 :                 >ok10594   
                       >        tst_a $33,0
0d10 : 08              >            php         ;save flags
0d11 : c933            >            cmp #$33     ;test result
                       >            trap_ne
0d13 : f003            >        beq skip0600
                       >        trap            ;failed not equal (non zero)
0d15 : 209524          >        jsr report_error
                       >
0d18 :                 >skip0600
                       >
0d18 : 68              >            pla         ;load status
0d19 : 48              >            pha
                       >            cmp_flag 0
0d1a : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d1c : f003            >        beq skip0603
                       >        trap            ;failed not equal (non zero)
0d1e : 209524          >        jsr report_error
                       >
0d21 :                 >skip0603
                       >
0d21 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0d22 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0d24 : 48              >            pha         ;use stack to load status
0d25 : a9cc            >            lda #$cc     ;precharge accu
0d27 : 28              >            plp
                       >
0d28 : 7f0306          >        bbr 7,zpt,fail20594
0d2b : ff0306          >        bbs 7,zpt,ok20594
                       >        trap            ;bbs branch not taken
0d2e : 209524          >        jsr report_error
                       >
0d31 :                 >fail20594 
                       >        trap            ;bbr branch taken
0d31 : 209524          >        jsr report_error
                       >
0d34 :                 >ok20594   
                       >        tst_a $cc,$ff
0d34 : 08              >            php         ;save flags
0d35 : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0d37 : f003            >        beq skip0610
                       >        trap            ;failed not equal (non zero)
0d39 : 209524          >        jsr report_error
                       >
0d3c :                 >skip0610
                       >
0d3c : 68              >            pla         ;load status
0d3d : 48              >            pha
                       >            cmp_flag $ff
0d3e : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d40 : f003            >        beq skip0613
                       >        trap            ;failed not equal (non zero)
0d42 : 209524          >        jsr report_error
                       >
0d45 :                 >skip0613
                       >
0d45 : 28              >            plp         ;restore status
                       >
0d46 : a503            >        lda zpt
0d48 : c980            >        cmp #(1<<7)
                       >        trap_ne         ;zp altered
0d4a : f003            >        beq skip0615
                       >        trap            ;failed not equal (non zero)
0d4c : 209524          >        jsr report_error
                       >
0d4f :                 >skip0615
                       >
0d4f : a97f            >        lda #$ff-(1<<7) ;testing 1 bit off
0d51 : 8503            >        sta zpt
                       >        set_a $33,0     ;with flags off
                       >            load_flag 0     
0d53 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                       >
0d55 : 48              >            pha         ;use stack to load status
0d56 : a933            >            lda #$33     ;precharge accu
0d58 : 28              >            plp
                       >
0d59 : ff0306          >        bbs 7,zpt,fail30594
0d5c : 7f0306          >        bbr 7,zpt,ok30594
                       >        trap            ;bbr branch not taken
0d5f : 209524          >        jsr report_error
                       >
0d62 :                 >fail30594 
                       >        trap            ;bbs branch taken
0d62 : 209524          >        jsr report_error
                       >
0d65 :                 >ok30594   
                       >        tst_a $33,0
0d65 : 08              >            php         ;save flags
0d66 : c933            >            cmp #$33     ;test result
                       >            trap_ne
0d68 : f003            >        beq skip0622
                       >        trap            ;failed not equal (non zero)
0d6a : 209524          >        jsr report_error
                       >
0d6d :                 >skip0622
                       >
0d6d : 68              >            pla         ;load status
0d6e : 48              >            pha
                       >            cmp_flag 0
0d6f : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d71 : f003            >        beq skip0625
                       >        trap            ;failed not equal (non zero)
0d73 : 209524          >        jsr report_error
                       >
0d76 :                 >skip0625
                       >
0d76 : 28              >            plp         ;restore status
                       >
                       >        set_a $cc,$ff   ;with flags on
                       >            load_flag $ff   
0d77 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                       >
0d79 : 48              >            pha         ;use stack to load status
0d7a : a9cc            >            lda #$cc     ;precharge accu
0d7c : 28              >            plp
                       >
0d7d : ff0306          >        bbs 7,zpt,fail40594
0d80 : 7f0306          >        bbr 7,zpt,ok40594
                       >        trap            ;bbr branch not taken
0d83 : 209524          >        jsr report_error
                       >
0d86 :                 >fail40594 
                       >        trap            ;bbs branch taken
0d86 : 209524          >        jsr report_error
                       >
0d89 :                 >ok40594   
                       >        tst_a $cc,$ff
0d89 : 08              >            php         ;save flags
0d8a : c9cc            >            cmp #$cc     ;test result
                       >            trap_ne
0d8c : f003            >        beq skip0632
                       >        trap            ;failed not equal (non zero)
0d8e : 209524          >        jsr report_error
                       >
0d91 :                 >skip0632
                       >
0d91 : 68              >            pla         ;load status
0d92 : 48              >            pha
                       >            cmp_flag $ff
0d93 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0d95 : f003            >        beq skip0635
                       >        trap            ;failed not equal (non zero)
0d97 : 209524          >        jsr report_error
                       >
0d9a :                 >skip0635
                       >
0d9a : 28              >            plp         ;restore status
                       >
0d9b : a503            >        lda zpt
0d9d : c97f            >        cmp #$ff-(1<<7)
                       >        trap_ne         ;zp altered
0d9f : f003            >        beq skip0637
                       >        trap            ;failed not equal (non zero)
0da1 : 209524          >        jsr report_error
                       >
0da4 :                 >skip0637
                       >
                        
0da4 : e011                     cpx #$11
                                trap_ne         ;x overwritten
0da6 : f003            >        beq skip0639
                       >        trap            ;failed not equal (non zero)
0da8 : 209524          >        jsr report_error
                       >
0dab :                 >skip0639
                        
0dab : c022                     cpy #$22
                                trap_ne         ;y overwritten
0dad : f003            >        beq skip0641
                       >        trap            ;failed not equal (non zero)
0daf : 209524          >        jsr report_error
                       >
0db2 :                 >skip0641
                        
                                next_test 
0db2 : ad0202          >            lda test_case   ;previous test
0db5 : c906            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0db7 : f003            >        beq skip0644
                       >        trap            ;failed not equal (non zero)
0db9 : 209524          >        jsr report_error
                       >
0dbc :                 >skip0644
                       >
0007 =                 >test_num = test_num + 1
0dbc : a907            >            lda #test_num   ;*** next tests' number
0dbe : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        bbrc    macro           ;\1 = bitnum
                                bbr \1,zpt,skip\?
                                eor #(1<<\1)       
                        skip\?
                                endm
                        bbsc    macro           ;\1 = bitnum
                                bbs \1,zpt,skip\?
                                eor #(1<<\1)       
                        skip\?
                                endm
                        
0dc1 : a900                     lda #0          ;combined bit test
0dc3 : 8503                     sta zpt
0dc5 : a900             bbcl    lda #0
                                bbrc 0
0dc7 : 0f0302          >        bbr 0,zpt,skip0646
0dca : 4901            >        eor #(1<<0)       
0dcc :                 >skip0646
                        
                                bbrc 1
0dcc : 1f0302          >        bbr 1,zpt,skip0647
0dcf : 4902            >        eor #(1<<1)       
0dd1 :                 >skip0647
                        
                                bbrc 2
0dd1 : 2f0302          >        bbr 2,zpt,skip0648
0dd4 : 4904            >        eor #(1<<2)       
0dd6 :                 >skip0648
                        
                                bbrc 3
0dd6 : 3f0302          >        bbr 3,zpt,skip0649
0dd9 : 4908            >        eor #(1<<3)       
0ddb :                 >skip0649
                        
                                bbrc 4
0ddb : 4f0302          >        bbr 4,zpt,skip0650
0dde : 4910            >        eor #(1<<4)       
0de0 :                 >skip0650
                        
                                bbrc 5
0de0 : 5f0302          >        bbr 5,zpt,skip0651
0de3 : 4920            >        eor #(1<<5)       
0de5 :                 >skip0651
                        
                                bbrc 6
0de5 : 6f0302          >        bbr 6,zpt,skip0652
0de8 : 4940            >        eor #(1<<6)       
0dea :                 >skip0652
                        
                                bbrc 7
0dea : 7f0302          >        bbr 7,zpt,skip0653
0ded : 4980            >        eor #(1<<7)       
0def :                 >skip0653
                        
0def : 4503                     eor zpt
                                trap_ne         ;failed bbr bitnum in accu       
0df1 : f003            >        beq skip0654
                       >        trap            ;failed not equal (non zero)
0df3 : 209524          >        jsr report_error
                       >
0df6 :                 >skip0654
                        
0df6 : a9ff                     lda #$ff
                                bbsc 0
0df8 : 8f0302          >        bbs 0,zpt,skip0656
0dfb : 4901            >        eor #(1<<0)       
0dfd :                 >skip0656
                        
                                bbsc 1
0dfd : 9f0302          >        bbs 1,zpt,skip0657
0e00 : 4902            >        eor #(1<<1)       
0e02 :                 >skip0657
                        
                                bbsc 2
0e02 : af0302          >        bbs 2,zpt,skip0658
0e05 : 4904            >        eor #(1<<2)       
0e07 :                 >skip0658
                        
                                bbsc 3
0e07 : bf0302          >        bbs 3,zpt,skip0659
0e0a : 4908            >        eor #(1<<3)       
0e0c :                 >skip0659
                        
                                bbsc 4
0e0c : cf0302          >        bbs 4,zpt,skip0660
0e0f : 4910            >        eor #(1<<4)       
0e11 :                 >skip0660
                        
                                bbsc 5
0e11 : df0302          >        bbs 5,zpt,skip0661
0e14 : 4920            >        eor #(1<<5)       
0e16 :                 >skip0661
                        
                                bbsc 6
0e16 : ef0302          >        bbs 6,zpt,skip0662
0e19 : 4940            >        eor #(1<<6)       
0e1b :                 >skip0662
                        
                                bbsc 7
0e1b : ff0302          >        bbs 7,zpt,skip0663
0e1e : 4980            >        eor #(1<<7)       
0e20 :                 >skip0663
                        
0e20 : 4503                     eor zpt
                                trap_ne         ;failed bbs bitnum in accu       
0e22 : f003            >        beq skip0664
                       >        trap            ;failed not equal (non zero)
0e24 : 209524          >        jsr report_error
                       >
0e27 :                 >skip0664
                        
0e27 : e603                     inc zpt
0e29 : d09a                     bne bbcl
                                next_test            
0e2b : ad0202          >            lda test_case   ;previous test
0e2e : c907            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0e30 : f003            >        beq skip0667
                       >        trap            ;failed not equal (non zero)
0e32 : 209524          >        jsr report_error
                       >
0e35 :                 >skip0667
                       >
0008 =                 >test_num = test_num + 1
0e35 : a908            >            lda #test_num   ;*** next tests' number
0e37 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                            endif
                            
                        ; testing NOP
                        
                        nop_test    macro       ;\1 = opcode, \2 = # of bytes
                                    ldy #$42
                                    ldx #4-\2
                                    db  \1          ;test nop length
                                if \2 = 1
                                    dex
                                    dex
                                endif
                                if \2 = 2
                                    iny
                                    dex
                                endif
                                if \2 = 3
                                    iny
                                    iny
                                endif
                                    dex
                                    trap_ne         ;wrong number of bytes
                                    set_a $ff-\1,0
                                    db  \1          ;test nop integrity - flags off
                                    nop
                                    nop
                                    tst_a $ff-\1,0
                                    set_a $aa-\1,$ff
                                    db  \1          ;test nop integrity - flags on
                                    nop
                                    nop
                                    tst_a $aa-\1,$ff
                                    cpy #$42
                                    trap_ne         ;y changed
                                    cpx #0
                                    trap_ne         ;x changed
                                    endm
                        
                            if skip_nop = 0
                                nop_test $02,2
                                nop_test $22,2
                                nop_test $42,2
                                nop_test $62,2
                                nop_test $82,2
                                nop_test $c2,2
                                nop_test $e2,2
                                nop_test $44,2
                                nop_test $54,2
                                nop_test $d4,2
                                nop_test $f4,2
                                nop_test $5c,3
                                nop_test $dc,3
                                nop_test $fc,3
                                nop_test $03,1
                                nop_test $13,1
                                nop_test $23,1
                                nop_test $33,1
                                nop_test $43,1
                                nop_test $53,1
                                nop_test $63,1
                                nop_test $73,1
                                nop_test $83,1
                                nop_test $93,1
                                nop_test $a3,1
                                nop_test $b3,1
                                nop_test $c3,1
                                nop_test $d3,1
                                nop_test $e3,1
                                nop_test $f3,1
                                nop_test $0b,1
                                nop_test $1b,1
                                nop_test $2b,1
                                nop_test $3b,1
                                nop_test $4b,1
                                nop_test $5b,1
                                nop_test $6b,1
                                nop_test $7b,1
                                nop_test $8b,1
                                nop_test $9b,1
                                nop_test $ab,1
                                nop_test $bb,1
                                nop_test $eb,1
                                nop_test $fb,1
                            if rkwl_wdc_op = 0      ;NOPs not available on Rockwell & WDC 65C02
                                nop_test $07,1
                                nop_test $17,1
                                nop_test $27,1
                                nop_test $37,1
                                nop_test $47,1
                                nop_test $57,1
                                nop_test $67,1
                                nop_test $77,1
                                nop_test $87,1
                                nop_test $97,1
                                nop_test $a7,1
                                nop_test $b7,1
                                nop_test $c7,1
                                nop_test $d7,1
                                nop_test $e7,1
                                nop_test $f7,1
                                nop_test $0f,1
                                nop_test $1f,1
                                nop_test $2f,1
                                nop_test $3f,1
                                nop_test $4f,1
                                nop_test $5f,1
                                nop_test $6f,1
                                nop_test $7f,1
                                nop_test $8f,1
                                nop_test $9f,1
                                nop_test $af,1
                                nop_test $bf,1
                                nop_test $cf,1
                                nop_test $df,1
                                nop_test $ef,1
                                nop_test $ff,1
                            endif
                            if  wdc_op = 0          ;NOPs not available on WDC 65C02 (WAI, STP)
                                nop_test $cb,1
                                nop_test $db,1
                            endif
                                next_test
                            endif
                                    
                        ; jump indirect (test page cross bug is fixed)
0e3a : a203                     ldx #3          ;prepare table
0e3c : bd0823           ji1     lda ji_adr,x
0e3f : 9dfd02                   sta ji_tab,x
0e42 : ca                       dex
0e43 : 10f7                     bpl ji1
0e45 : a926                     lda #hi(ji_px) ;high address if page cross bug
0e47 : 8d0002                   sta pg_x
                                set_stat 0
                       >            load_flag 0
0e4a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e4c : 48              >            pha         ;use stack to load status
0e4d : 28              >            plp
                        
0e4e : a949                     lda #'I'
0e50 : a24e                     ldx #'N'
0e52 : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
0e54 : 6cfd02                   jmp (ji_tab)
0e57 : ea                       nop
                                trap_ne         ;runover protection
0e58 : f003            >        beq skip0671
                       >        trap            ;failed not equal (non zero)
0e5a : 209524          >        jsr report_error
                       >
0e5d :                 >skip0671
                        
                        
0e5d : 88                       dey
0e5e : 88                       dey
0e5f : 08               ji_ret  php             ;either SP or Y count will fail, if we do not hit
0e60 : 88                       dey
0e61 : 88                       dey
0e62 : 88                       dey
0e63 : 28                       plp
                                trap_eq         ;returned flags OK?
0e64 : d003            >        bne skip0673
                       >        trap           ;failed equal (zero)
0e66 : 209524          >        jsr report_error
                       >
0e69 :                 >skip0673
                        
                                trap_pl
0e69 : 3003            >        bmi skip0675
                       >        trap            ;failed plus (bit 7 clear)
0e6b : 209524          >        jsr report_error
                       >
0e6e :                 >skip0675
                        
                                trap_cc
0e6e : b003            >        bcs skip0677
                       >        trap            ;failed carry clear
0e70 : 209524          >        jsr report_error
                       >
0e73 :                 >skip0677
                        
                                trap_vc
0e73 : 7003            >        bvs skip0679
                       >        trap            ;failed overflow clear
0e75 : 209524          >        jsr report_error
                       >
0e78 :                 >skip0679
                        
0e78 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
0e7a : f003            >        beq skip0681
                       >        trap            ;failed not equal (non zero)
0e7c : 209524          >        jsr report_error
                       >
0e7f :                 >skip0681
                        
0e7f : e04f                     cpx #('N'+1)
                                trap_ne
0e81 : f003            >        beq skip0683
                       >        trap            ;failed not equal (non zero)
0e83 : 209524          >        jsr report_error
                       >
0e86 :                 >skip0683
                        
0e86 : c03e                     cpy #('D'-6)
                                trap_ne
0e88 : f003            >        beq skip0685
                       >        trap            ;failed not equal (non zero)
0e8a : 209524          >        jsr report_error
                       >
0e8d :                 >skip0685
                        
0e8d : ba                       tsx             ;SP check
0e8e : e0ff                     cpx #$ff
                                trap_ne
0e90 : f003            >        beq skip0687
                       >        trap            ;failed not equal (non zero)
0e92 : 209524          >        jsr report_error
                       >
0e95 :                 >skip0687
                        
                                next_test
0e95 : ad0202          >            lda test_case   ;previous test
0e98 : c908            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0e9a : f003            >        beq skip0690
                       >        trap            ;failed not equal (non zero)
0e9c : 209524          >        jsr report_error
                       >
0e9f :                 >skip0690
                       >
0009 =                 >test_num = test_num + 1
0e9f : a909            >            lda #test_num   ;*** next tests' number
0ea1 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; jump indexed indirect
0ea4 : a20b                     ldx #11         ;prepare table
0ea6 : bd5c23           jxi1    lda jxi_adr,x
0ea9 : 9df902                   sta jxi_tab,x
0eac : ca                       dex
0ead : 10f7                     bpl jxi1
0eaf : a926                     lda #hi(jxi_px) ;high address if page cross bug
0eb1 : 8d0002                   sta pg_x
                                set_stat 0
                       >            load_flag 0
0eb4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0eb6 : 48              >            pha         ;use stack to load status
0eb7 : 28              >            plp
                        
0eb8 : a958                     lda #'X'
0eba : a204                     ldx #4
0ebc : a049                     ldy #'I'        ;N=0, V=0, Z=0, C=0
0ebe : 7cf902                   jmp (jxi_tab,x)
0ec1 : ea                       nop
                                trap_ne         ;runover protection
0ec2 : f003            >        beq skip0694
                       >        trap            ;failed not equal (non zero)
0ec4 : 209524          >        jsr report_error
                       >
0ec7 :                 >skip0694
                        
                        
0ec7 : 88                       dey
0ec8 : 88                       dey
0ec9 : 08               jxi_ret php             ;either SP or Y count will fail, if we do not hit
0eca : 88                       dey
0ecb : 88                       dey
0ecc : 88                       dey
0ecd : 28                       plp
                                trap_eq         ;returned flags OK?
0ece : d003            >        bne skip0696
                       >        trap           ;failed equal (zero)
0ed0 : 209524          >        jsr report_error
                       >
0ed3 :                 >skip0696
                        
                                trap_pl
0ed3 : 3003            >        bmi skip0698
                       >        trap            ;failed plus (bit 7 clear)
0ed5 : 209524          >        jsr report_error
                       >
0ed8 :                 >skip0698
                        
                                trap_cc
0ed8 : b003            >        bcs skip0700
                       >        trap            ;failed carry clear
0eda : 209524          >        jsr report_error
                       >
0edd :                 >skip0700
                        
                                trap_vc
0edd : 7003            >        bvs skip0702
                       >        trap            ;failed overflow clear
0edf : 209524          >        jsr report_error
                       >
0ee2 :                 >skip0702
                        
0ee2 : c9f2                     cmp #('X'^$aa)  ;returned registers OK?
                                trap_ne
0ee4 : f003            >        beq skip0704
                       >        trap            ;failed not equal (non zero)
0ee6 : 209524          >        jsr report_error
                       >
0ee9 :                 >skip0704
                        
0ee9 : e006                     cpx #6
                                trap_ne
0eeb : f003            >        beq skip0706
                       >        trap            ;failed not equal (non zero)
0eed : 209524          >        jsr report_error
                       >
0ef0 :                 >skip0706
                        
0ef0 : c043                     cpy #('I'-6)
                                trap_ne
0ef2 : f003            >        beq skip0708
                       >        trap            ;failed not equal (non zero)
0ef4 : 209524          >        jsr report_error
                       >
0ef7 :                 >skip0708
                        
0ef7 : ba                       tsx             ;SP check
0ef8 : e0ff                     cpx #$ff
                                trap_ne
0efa : f003            >        beq skip0710
                       >        trap            ;failed not equal (non zero)
0efc : 209524          >        jsr report_error
                       >
0eff :                 >skip0710
                        
                        
0eff : a91b                     lda #lo(jxp_ok) ;test with index causing a page cross
0f01 : 8d0003                   sta jxp_tab
0f04 : a90f                     lda #hi(jxp_ok)
0f06 : 8d0103                   sta jxp_tab+1
0f09 : a918                     lda #lo(jxp_px)
0f0b : 8d0002                   sta pg_x
0f0e : a90f                     lda #hi(jxp_px)
0f10 : 8d0102                   sta pg_x+1
0f13 : a2ff                     ldx #$ff
0f15 : 7c0102                   jmp (jxp_tab-$ff,x)
                                
0f18 :                  jxp_px  
                                trap            ;page cross by index to wrong page
0f18 : 209524          >        jsr report_error
                        
                        
0f1b :                  jxp_ok
                                next_test
0f1b : ad0202          >            lda test_case   ;previous test
0f1e : c909            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0f20 : f003            >        beq skip0714
                       >        trap            ;failed not equal (non zero)
0f22 : 209524          >        jsr report_error
                       >
0f25 :                 >skip0714
                       >
000a =                 >test_num = test_num + 1
0f25 : a90a            >            lda #test_num   ;*** next tests' number
0f27 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                            if ROM_vectors = 1
                        ; test BRK clears decimal mode
                                load_flag 0     ;with interrupts enabled if allowed!
0f2a : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                        
0f2c : 48                       pha
0f2d : a942                     lda #'B'
0f2f : a252                     ldx #'R'
0f31 : a04b                     ldy #'K'
0f33 : 28                       plp             ;N=0, V=0, Z=0, C=0
0f34 : 00                       brk
0f35 : 88                       dey             ;should not be executed
0f36 :                  brk_ret0                ;address of break return
0f36 : 08                       php             ;either SP or Y count will fail, if we do not hit
0f37 : 88                       dey
0f38 : 88                       dey
0f39 : 88                       dey
0f3a : c9e8                     cmp #'B'^$aa    ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
0f3c : f003            >        beq skip0717
                       >        trap            ;failed not equal (non zero)
0f3e : 209524          >        jsr report_error
                       >
0f41 :                 >skip0717
                        
0f41 : e053                     cpx #'R'+1
                                trap_ne
0f43 : f003            >        beq skip0719
                       >        trap            ;failed not equal (non zero)
0f45 : 209524          >        jsr report_error
                       >
0f48 :                 >skip0719
                        
0f48 : c045                     cpy #'K'-6
                                trap_ne
0f4a : f003            >        beq skip0721
                       >        trap            ;failed not equal (non zero)
0f4c : 209524          >        jsr report_error
                       >
0f4f :                 >skip0721
                        
0f4f : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
0f50 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
0f52 : f003            >        beq skip0724
                       >        trap            ;failed not equal (non zero)
0f54 : 209524          >        jsr report_error
                       >
0f57 :                 >skip0724
                        
0f57 : ba                       tsx             ;sp?
0f58 : e0ff                     cpx #$ff
                                trap_ne
0f5a : f003            >        beq skip0726
                       >        trap            ;failed not equal (non zero)
0f5c : 209524          >        jsr report_error
                       >
0f5f :                 >skip0726
                        
                        ;pass 2
                                load_flag $ff   ;with interrupts disabled if allowed!
0f5f : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                        
0f61 : 48                       pha
0f62 : a9bd                     lda #$ff-'B'
0f64 : a2ad                     ldx #$ff-'R'
0f66 : a0b4                     ldy #$ff-'K'
0f68 : 28                       plp             ;N=1, V=1, Z=1, C=1
0f69 : 00                       brk
0f6a : 88                       dey             ;should not be executed
0f6b :                  brk_ret1                ;address of break return
0f6b : 08                       php             ;either SP or Y count will fail, if we do not hit
0f6c : 88                       dey
0f6d : 88                       dey
0f6e : 88                       dey
0f6f : c917                     cmp #($ff-'B')^$aa  ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
0f71 : f003            >        beq skip0729
                       >        trap            ;failed not equal (non zero)
0f73 : 209524          >        jsr report_error
                       >
0f76 :                 >skip0729
                        
0f76 : e0ae                     cpx #$ff-'R'+1
                                trap_ne
0f78 : f003            >        beq skip0731
                       >        trap            ;failed not equal (non zero)
0f7a : 209524          >        jsr report_error
                       >
0f7d :                 >skip0731
                        
0f7d : c0ae                     cpy #$ff-'K'-6
                                trap_ne
0f7f : f003            >        beq skip0733
                       >        trap            ;failed not equal (non zero)
0f81 : 209524          >        jsr report_error
                       >
0f84 :                 >skip0733
                        
0f84 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag $ff
0f85 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
0f87 : f003            >        beq skip0736
                       >        trap            ;failed not equal (non zero)
0f89 : 209524          >        jsr report_error
                       >
0f8c :                 >skip0736
                        
0f8c : ba                       tsx             ;sp?
0f8d : e0ff                     cpx #$ff
                                trap_ne
0f8f : f003            >        beq skip0738
                       >        trap            ;failed not equal (non zero)
0f91 : 209524          >        jsr report_error
                       >
0f94 :                 >skip0738
                        
                                next_test
0f94 : ad0202          >            lda test_case   ;previous test
0f97 : c90a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0f99 : f003            >        beq skip0741
                       >        trap            ;failed not equal (non zero)
0f9b : 209524          >        jsr report_error
                       >
0f9e :                 >skip0741
                       >
000b =                 >test_num = test_num + 1
0f9e : a90b            >            lda #test_num   ;*** next tests' number
0fa0 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                            endif
                         
                        ; testing accumulator increment/decrement INC A & DEC A
0fa3 : a2ac                     ldx #$ac    ;protect x & y
0fa5 : a0dc                     ldy #$dc
                                set_a $fe,$ff
                       >            load_flag $ff
0fa7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0fa9 : 48              >            pha         ;use stack to load status
0faa : a9fe            >            lda #$fe     ;precharge accu
0fac : 28              >            plp
                        
0fad : 1a                       inc a           ;ff
                                tst_as $ff,$ff-zero
0fae : 48              >            pha
0faf : 08              >            php         ;save flags
0fb0 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0fb2 : f003            >        beq skip0746
                       >        trap            ;failed not equal (non zero)
0fb4 : 209524          >        jsr report_error
                       >
0fb7 :                 >skip0746
                       >
0fb7 : 68              >            pla         ;load status
0fb8 : 48              >            pha
                       >            cmp_flag $ff-zero
0fb9 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0fbb : f003            >        beq skip0749
                       >        trap            ;failed not equal (non zero)
0fbd : 209524          >        jsr report_error
                       >
0fc0 :                 >skip0749
                       >
0fc0 : 28              >            plp         ;restore status
0fc1 : 68              >            pla
                        
0fc2 : 1a                       inc a           ;00
                                tst_as 0,$ff-minus
0fc3 : 48              >            pha
0fc4 : 08              >            php         ;save flags
0fc5 : c900            >            cmp #0     ;test result
                       >            trap_ne
0fc7 : f003            >        beq skip0752
                       >        trap            ;failed not equal (non zero)
0fc9 : 209524          >        jsr report_error
                       >
0fcc :                 >skip0752
                       >
0fcc : 68              >            pla         ;load status
0fcd : 48              >            pha
                       >            cmp_flag $ff-minus
0fce : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0fd0 : f003            >        beq skip0755
                       >        trap            ;failed not equal (non zero)
0fd2 : 209524          >        jsr report_error
                       >
0fd5 :                 >skip0755
                       >
0fd5 : 28              >            plp         ;restore status
0fd6 : 68              >            pla
                        
0fd7 : 1a                       inc a           ;01
                                tst_as 1,$ff-minus-zero
0fd8 : 48              >            pha
0fd9 : 08              >            php         ;save flags
0fda : c901            >            cmp #1     ;test result
                       >            trap_ne
0fdc : f003            >        beq skip0758
                       >        trap            ;failed not equal (non zero)
0fde : 209524          >        jsr report_error
                       >
0fe1 :                 >skip0758
                       >
0fe1 : 68              >            pla         ;load status
0fe2 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0fe3 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0fe5 : f003            >        beq skip0761
                       >        trap            ;failed not equal (non zero)
0fe7 : 209524          >        jsr report_error
                       >
0fea :                 >skip0761
                       >
0fea : 28              >            plp         ;restore status
0feb : 68              >            pla
                        
0fec : 3a                       dec a           ;00
                                tst_as 0,$ff-minus
0fed : 48              >            pha
0fee : 08              >            php         ;save flags
0fef : c900            >            cmp #0     ;test result
                       >            trap_ne
0ff1 : f003            >        beq skip0764
                       >        trap            ;failed not equal (non zero)
0ff3 : 209524          >        jsr report_error
                       >
0ff6 :                 >skip0764
                       >
0ff6 : 68              >            pla         ;load status
0ff7 : 48              >            pha
                       >            cmp_flag $ff-minus
0ff8 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
0ffa : f003            >        beq skip0767
                       >        trap            ;failed not equal (non zero)
0ffc : 209524          >        jsr report_error
                       >
0fff :                 >skip0767
                       >
0fff : 28              >            plp         ;restore status
1000 : 68              >            pla
                        
1001 : 3a                       dec a           ;ff
                                tst_as $ff,$ff-zero
1002 : 48              >            pha
1003 : 08              >            php         ;save flags
1004 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1006 : f003            >        beq skip0770
                       >        trap            ;failed not equal (non zero)
1008 : 209524          >        jsr report_error
                       >
100b :                 >skip0770
                       >
100b : 68              >            pla         ;load status
100c : 48              >            pha
                       >            cmp_flag $ff-zero
100d : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
100f : f003            >        beq skip0773
                       >        trap            ;failed not equal (non zero)
1011 : 209524          >        jsr report_error
                       >
1014 :                 >skip0773
                       >
1014 : 28              >            plp         ;restore status
1015 : 68              >            pla
                        
1016 : 3a                       dec a           ;fe
                                set_a $fe,0
                       >            load_flag 0
1017 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1019 : 48              >            pha         ;use stack to load status
101a : a9fe            >            lda #$fe     ;precharge accu
101c : 28              >            plp
                        
101d : 1a                       inc a           ;ff
                                tst_as $ff,minus
101e : 48              >            pha
101f : 08              >            php         ;save flags
1020 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1022 : f003            >        beq skip0778
                       >        trap            ;failed not equal (non zero)
1024 : 209524          >        jsr report_error
                       >
1027 :                 >skip0778
                       >
1027 : 68              >            pla         ;load status
1028 : 48              >            pha
                       >            cmp_flag minus
1029 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
102b : f003            >        beq skip0781
                       >        trap            ;failed not equal (non zero)
102d : 209524          >        jsr report_error
                       >
1030 :                 >skip0781
                       >
1030 : 28              >            plp         ;restore status
1031 : 68              >            pla
                        
1032 : 1a                       inc a           ;00
                                tst_as 0,zero
1033 : 48              >            pha
1034 : 08              >            php         ;save flags
1035 : c900            >            cmp #0     ;test result
                       >            trap_ne
1037 : f003            >        beq skip0784
                       >        trap            ;failed not equal (non zero)
1039 : 209524          >        jsr report_error
                       >
103c :                 >skip0784
                       >
103c : 68              >            pla         ;load status
103d : 48              >            pha
                       >            cmp_flag zero
103e : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1040 : f003            >        beq skip0787
                       >        trap            ;failed not equal (non zero)
1042 : 209524          >        jsr report_error
                       >
1045 :                 >skip0787
                       >
1045 : 28              >            plp         ;restore status
1046 : 68              >            pla
                        
1047 : 1a                       inc a           ;01
                                tst_as 1,0
1048 : 48              >            pha
1049 : 08              >            php         ;save flags
104a : c901            >            cmp #1     ;test result
                       >            trap_ne
104c : f003            >        beq skip0790
                       >        trap            ;failed not equal (non zero)
104e : 209524          >        jsr report_error
                       >
1051 :                 >skip0790
                       >
1051 : 68              >            pla         ;load status
1052 : 48              >            pha
                       >            cmp_flag 0
1053 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1055 : f003            >        beq skip0793
                       >        trap            ;failed not equal (non zero)
1057 : 209524          >        jsr report_error
                       >
105a :                 >skip0793
                       >
105a : 28              >            plp         ;restore status
105b : 68              >            pla
                        
105c : 3a                       dec a           ;00
                                tst_as 0,zero
105d : 48              >            pha
105e : 08              >            php         ;save flags
105f : c900            >            cmp #0     ;test result
                       >            trap_ne
1061 : f003            >        beq skip0796
                       >        trap            ;failed not equal (non zero)
1063 : 209524          >        jsr report_error
                       >
1066 :                 >skip0796
                       >
1066 : 68              >            pla         ;load status
1067 : 48              >            pha
                       >            cmp_flag zero
1068 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
106a : f003            >        beq skip0799
                       >        trap            ;failed not equal (non zero)
106c : 209524          >        jsr report_error
                       >
106f :                 >skip0799
                       >
106f : 28              >            plp         ;restore status
1070 : 68              >            pla
                        
1071 : 3a                       dec a           ;ff
                                tst_as $ff,minus
1072 : 48              >            pha
1073 : 08              >            php         ;save flags
1074 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1076 : f003            >        beq skip0802
                       >        trap            ;failed not equal (non zero)
1078 : 209524          >        jsr report_error
                       >
107b :                 >skip0802
                       >
107b : 68              >            pla         ;load status
107c : 48              >            pha
                       >            cmp_flag minus
107d : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
107f : f003            >        beq skip0805
                       >        trap            ;failed not equal (non zero)
1081 : 209524          >        jsr report_error
                       >
1084 :                 >skip0805
                       >
1084 : 28              >            plp         ;restore status
1085 : 68              >            pla
                        
1086 : e0ac                     cpx #$ac
                                trap_ne     ;x altered during test
1088 : f003            >        beq skip0807
                       >        trap            ;failed not equal (non zero)
108a : 209524          >        jsr report_error
                       >
108d :                 >skip0807
                        
108d : c0dc                     cpy #$dc
                                trap_ne     ;y altered during test
108f : f003            >        beq skip0809
                       >        trap            ;failed not equal (non zero)
1091 : 209524          >        jsr report_error
                       >
1094 :                 >skip0809
                        
1094 : ba                       tsx
1095 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
1097 : f003            >        beq skip0811
                       >        trap            ;failed not equal (non zero)
1099 : 209524          >        jsr report_error
                       >
109c :                 >skip0811
                        
                                next_test
109c : ad0202          >            lda test_case   ;previous test
109f : c90b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
10a1 : f003            >        beq skip0814
                       >        trap            ;failed not equal (non zero)
10a3 : 209524          >        jsr report_error
                       >
10a6 :                 >skip0814
                       >
000c =                 >test_num = test_num + 1
10a6 : a90c            >            lda #test_num   ;*** next tests' number
10a8 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing load / store accumulator LDA / STA (zp)
10ab : a299                     ldx #$99    ;protect x & y
10ad : a066                     ldy #$66
                                set_stat 0  
                       >            load_flag 0  
10af : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
10b1 : 48              >            pha         ;use stack to load status
10b2 : 28              >            plp
                        
10b3 : b21b                     lda (ind1)
10b5 : 08                       php         ;test stores do not alter flags
10b6 : 49c3                     eor #$c3
10b8 : 28                       plp
10b9 : 9227                     sta (indt)
10bb : 08                       php         ;flags after load/store sequence
10bc : 49c3                     eor #$c3
10be : c9c3                     cmp #$c3    ;test result
                                trap_ne
10c0 : f003            >        beq skip0818
                       >        trap            ;failed not equal (non zero)
10c2 : 209524          >        jsr report_error
                       >
10c5 :                 >skip0818
                        
10c5 : 68                       pla         ;load status
                                eor_flag 0
10c6 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
10c8 : cd1502                   cmp fLDx    ;test flags
                                trap_ne
10cb : f003            >        beq skip0821
                       >        trap            ;failed not equal (non zero)
10cd : 209524          >        jsr report_error
                       >
10d0 :                 >skip0821
                        
                                set_stat 0
                       >            load_flag 0
10d0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
10d2 : 48              >            pha         ;use stack to load status
10d3 : 28              >            plp
                        
10d4 : b21d                     lda (ind1+2)
10d6 : 08                       php         ;test stores do not alter flags
10d7 : 49c3                     eor #$c3
10d9 : 28                       plp
10da : 9229                     sta (indt+2)
10dc : 08                       php         ;flags after load/store sequence
10dd : 49c3                     eor #$c3
10df : c982                     cmp #$82    ;test result
                                trap_ne
10e1 : f003            >        beq skip0825
                       >        trap            ;failed not equal (non zero)
10e3 : 209524          >        jsr report_error
                       >
10e6 :                 >skip0825
                        
10e6 : 68                       pla         ;load status
                                eor_flag 0
10e7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
10e9 : cd1602                   cmp fLDx+1  ;test flags
                                trap_ne
10ec : f003            >        beq skip0828
                       >        trap            ;failed not equal (non zero)
10ee : 209524          >        jsr report_error
                       >
10f1 :                 >skip0828
                        
                                set_stat 0
                       >            load_flag 0
10f1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
10f3 : 48              >            pha         ;use stack to load status
10f4 : 28              >            plp
                        
10f5 : b21f                     lda (ind1+4)
10f7 : 08                       php         ;test stores do not alter flags
10f8 : 49c3                     eor #$c3
10fa : 28                       plp
10fb : 922b                     sta (indt+4)
10fd : 08                       php         ;flags after load/store sequence
10fe : 49c3                     eor #$c3
1100 : c941                     cmp #$41    ;test result
                                trap_ne
1102 : f003            >        beq skip0832
                       >        trap            ;failed not equal (non zero)
1104 : 209524          >        jsr report_error
                       >
1107 :                 >skip0832
                        
1107 : 68                       pla         ;load status
                                eor_flag 0
1108 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
110a : cd1702                   cmp fLDx+2  ;test flags
                                trap_ne
110d : f003            >        beq skip0835
                       >        trap            ;failed not equal (non zero)
110f : 209524          >        jsr report_error
                       >
1112 :                 >skip0835
                        
                                set_stat 0
                       >            load_flag 0
1112 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1114 : 48              >            pha         ;use stack to load status
1115 : 28              >            plp
                        
1116 : b221                     lda (ind1+6)
1118 : 08                       php         ;test stores do not alter flags
1119 : 49c3                     eor #$c3
111b : 28                       plp
111c : 922d                     sta (indt+6)
111e : 08                       php         ;flags after load/store sequence
111f : 49c3                     eor #$c3
1121 : c900                     cmp #0      ;test result
                                trap_ne
1123 : f003            >        beq skip0839
                       >        trap            ;failed not equal (non zero)
1125 : 209524          >        jsr report_error
                       >
1128 :                 >skip0839
                        
1128 : 68                       pla         ;load status
                                eor_flag 0
1129 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
112b : cd1802                   cmp fLDx+3  ;test flags
                                trap_ne
112e : f003            >        beq skip0842
                       >        trap            ;failed not equal (non zero)
1130 : 209524          >        jsr report_error
                       >
1133 :                 >skip0842
                        
1133 : e099                     cpx #$99
                                trap_ne     ;x altered during test
1135 : f003            >        beq skip0844
                       >        trap            ;failed not equal (non zero)
1137 : 209524          >        jsr report_error
                       >
113a :                 >skip0844
                        
113a : c066                     cpy #$66
                                trap_ne     ;y altered during test
113c : f003            >        beq skip0846
                       >        trap            ;failed not equal (non zero)
113e : 209524          >        jsr report_error
                       >
1141 :                 >skip0846
                        
                        
1141 : a003                     ldy #3      ;testing store result
1143 : a200                     ldx #0
1145 : b90502           tstai1  lda abst,y
1148 : 49c3                     eor #$c3
114a : d91002                   cmp abs1,y
                                trap_ne     ;store to indirect data
114d : f003            >        beq skip0848
                       >        trap            ;failed not equal (non zero)
114f : 209524          >        jsr report_error
                       >
1152 :                 >skip0848
                        
1152 : 8a                       txa
1153 : 990502                   sta abst,y  ;clear                
1156 : 88                       dey
1157 : 10ec                     bpl tstai1
                        
1159 : a299                     ldx #$99    ;protect x & y
115b : a066                     ldy #$66
                                set_stat $ff  
                       >            load_flag $ff  
115d : a9ff            >            lda #$ff               ;allow test to change I-flag (no mask)
                       >
115f : 48              >            pha         ;use stack to load status
1160 : 28              >            plp
                        
1161 : b21b                     lda (ind1)
1163 : 08                       php         ;test stores do not alter flags
1164 : 49c3                     eor #$c3
1166 : 28                       plp
1167 : 9227                     sta (indt)
1169 : 08                       php         ;flags after load/store sequence
116a : 49c3                     eor #$c3
116c : c9c3                     cmp #$c3    ;test result
                                trap_ne
116e : f003            >        beq skip0852
                       >        trap            ;failed not equal (non zero)
1170 : 209524          >        jsr report_error
                       >
1173 :                 >skip0852
                        
1173 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1174 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1176 : cd1502                   cmp fLDx    ;test flags
                                trap_ne
1179 : f003            >        beq skip0855
                       >        trap            ;failed not equal (non zero)
117b : 209524          >        jsr report_error
                       >
117e :                 >skip0855
                        
                                set_stat $ff
                       >            load_flag $ff
117e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1180 : 48              >            pha         ;use stack to load status
1181 : 28              >            plp
                        
1182 : b21d                     lda (ind1+2)
1184 : 08                       php         ;test stores do not alter flags
1185 : 49c3                     eor #$c3
1187 : 28                       plp
1188 : 9229                     sta (indt+2)
118a : 08                       php         ;flags after load/store sequence
118b : 49c3                     eor #$c3
118d : c982                     cmp #$82    ;test result
                                trap_ne
118f : f003            >        beq skip0859
                       >        trap            ;failed not equal (non zero)
1191 : 209524          >        jsr report_error
                       >
1194 :                 >skip0859
                        
1194 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1195 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
1197 : cd1602                   cmp fLDx+1  ;test flags
                                trap_ne
119a : f003            >        beq skip0862
                       >        trap            ;failed not equal (non zero)
119c : 209524          >        jsr report_error
                       >
119f :                 >skip0862
                        
                                set_stat $ff
                       >            load_flag $ff
119f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11a1 : 48              >            pha         ;use stack to load status
11a2 : 28              >            plp
                        
11a3 : b21f                     lda (ind1+4)
11a5 : 08                       php         ;test stores do not alter flags
11a6 : 49c3                     eor #$c3
11a8 : 28                       plp
11a9 : 922b                     sta (indt+4)
11ab : 08                       php         ;flags after load/store sequence
11ac : 49c3                     eor #$c3
11ae : c941                     cmp #$41    ;test result
                                trap_ne
11b0 : f003            >        beq skip0866
                       >        trap            ;failed not equal (non zero)
11b2 : 209524          >        jsr report_error
                       >
11b5 :                 >skip0866
                        
11b5 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
11b6 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
11b8 : cd1702                   cmp fLDx+2  ;test flags
                                trap_ne
11bb : f003            >        beq skip0869
                       >        trap            ;failed not equal (non zero)
11bd : 209524          >        jsr report_error
                       >
11c0 :                 >skip0869
                        
                                set_stat $ff
                       >            load_flag $ff
11c0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11c2 : 48              >            pha         ;use stack to load status
11c3 : 28              >            plp
                        
11c4 : b221                     lda (ind1+6)
11c6 : 08                       php         ;test stores do not alter flags
11c7 : 49c3                     eor #$c3
11c9 : 28                       plp
11ca : 922d                     sta (indt+6)
11cc : 08                       php         ;flags after load/store sequence
11cd : 49c3                     eor #$c3
11cf : c900                     cmp #0      ;test result
                                trap_ne
11d1 : f003            >        beq skip0873
                       >        trap            ;failed not equal (non zero)
11d3 : 209524          >        jsr report_error
                       >
11d6 :                 >skip0873
                        
11d6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
11d7 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
11d9 : cd1802                   cmp fLDx+3  ;test flags
                                trap_ne
11dc : f003            >        beq skip0876
                       >        trap            ;failed not equal (non zero)
11de : 209524          >        jsr report_error
                       >
11e1 :                 >skip0876
                        
11e1 : e099                     cpx #$99
                                trap_ne     ;x altered during test
11e3 : f003            >        beq skip0878
                       >        trap            ;failed not equal (non zero)
11e5 : 209524          >        jsr report_error
                       >
11e8 :                 >skip0878
                        
11e8 : c066                     cpy #$66
                                trap_ne     ;y altered during test
11ea : f003            >        beq skip0880
                       >        trap            ;failed not equal (non zero)
11ec : 209524          >        jsr report_error
                       >
11ef :                 >skip0880
                        
                        
11ef : a003                     ldy #3      ;testing store result
11f1 : a200                     ldx #0
11f3 : b90502           tstai2  lda abst,y
11f6 : 49c3                     eor #$c3
11f8 : d91002                   cmp abs1,y
                                trap_ne     ;store to indirect data
11fb : f003            >        beq skip0882
                       >        trap            ;failed not equal (non zero)
11fd : 209524          >        jsr report_error
                       >
1200 :                 >skip0882
                        
1200 : 8a                       txa
1201 : 990502                   sta abst,y  ;clear                
1204 : 88                       dey
1205 : 10ec                     bpl tstai2
1207 : ba                       tsx
1208 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
120a : f003            >        beq skip0884
                       >        trap            ;failed not equal (non zero)
120c : 209524          >        jsr report_error
                       >
120f :                 >skip0884
                        
                                next_test
120f : ad0202          >            lda test_case   ;previous test
1212 : c90c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1214 : f003            >        beq skip0887
                       >        trap            ;failed not equal (non zero)
1216 : 209524          >        jsr report_error
                       >
1219 :                 >skip0887
                       >
000d =                 >test_num = test_num + 1
1219 : a90d            >            lda #test_num   ;*** next tests' number
121b : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing STZ - zp / abs / zp,x / abs,x
121e : a07b                     ldy #123    ;protect y
1220 : a204                     ldx #4      ;precharge test area
1222 : a907                     lda #7
1224 : 9503             tstz1   sta zpt,x
1226 : 0a                       asl a
1227 : ca                       dex
1228 : 10fa                     bpl tstz1
122a : a204                     ldx #4
                                set_a $55,$ff
                       >            load_flag $ff
122c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
122e : 48              >            pha         ;use stack to load status
122f : a955            >            lda #$55     ;precharge accu
1231 : 28              >            plp
                        
1232 : 6403                     stz zpt     
1234 : 6404                     stz zpt+1
1236 : 6405                     stz zpt+2
1238 : 6406                     stz zpt+3
123a : 6407                     stz zpt+4
                                tst_a $55,$ff
123c : 08              >            php         ;save flags
123d : c955            >            cmp #$55     ;test result
                       >            trap_ne
123f : f003            >        beq skip0892
                       >        trap            ;failed not equal (non zero)
1241 : 209524          >        jsr report_error
                       >
1244 :                 >skip0892
                       >
1244 : 68              >            pla         ;load status
1245 : 48              >            pha
                       >            cmp_flag $ff
1246 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1248 : f003            >        beq skip0895
                       >        trap            ;failed not equal (non zero)
124a : 209524          >        jsr report_error
                       >
124d :                 >skip0895
                       >
124d : 28              >            plp         ;restore status
                        
124e : b503             tstz2   lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
1250 : f003            >        beq skip0897
                       >        trap            ;failed not equal (non zero)
1252 : 209524          >        jsr report_error
                       >
1255 :                 >skip0897
                        
1255 : ca                       dex
1256 : 10f6                     bpl tstz2
1258 : a204                     ldx #4      ;precharge test area
125a : a907                     lda #7
125c : 9503             tstz3   sta zpt,x
125e : 0a                       asl a
125f : ca                       dex
1260 : 10fa                     bpl tstz3
1262 : a204                     ldx #4
                                set_a $aa,0
                       >            load_flag 0
1264 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1266 : 48              >            pha         ;use stack to load status
1267 : a9aa            >            lda #$aa     ;precharge accu
1269 : 28              >            plp
                        
126a : 6403                     stz zpt     
126c : 6404                     stz zpt+1
126e : 6405                     stz zpt+2
1270 : 6406                     stz zpt+3
1272 : 6407                     stz zpt+4
                                tst_a $aa,0
1274 : 08              >            php         ;save flags
1275 : c9aa            >            cmp #$aa     ;test result
                       >            trap_ne
1277 : f003            >        beq skip0902
                       >        trap            ;failed not equal (non zero)
1279 : 209524          >        jsr report_error
                       >
127c :                 >skip0902
                       >
127c : 68              >            pla         ;load status
127d : 48              >            pha
                       >            cmp_flag 0
127e : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1280 : f003            >        beq skip0905
                       >        trap            ;failed not equal (non zero)
1282 : 209524          >        jsr report_error
                       >
1285 :                 >skip0905
                       >
1285 : 28              >            plp         ;restore status
                        
1286 : b503             tstz4   lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
1288 : f003            >        beq skip0907
                       >        trap            ;failed not equal (non zero)
128a : 209524          >        jsr report_error
                       >
128d :                 >skip0907
                        
128d : ca                       dex
128e : 10f6                     bpl tstz4
                                
1290 : a204                     ldx #4      ;precharge test area
1292 : a907                     lda #7
1294 : 9d0502           tstz5   sta abst,x
1297 : 0a                       asl a
1298 : ca                       dex
1299 : 10f9                     bpl tstz5
129b : a204                     ldx #4
                                set_a $55,$ff
                       >            load_flag $ff
129d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
129f : 48              >            pha         ;use stack to load status
12a0 : a955            >            lda #$55     ;precharge accu
12a2 : 28              >            plp
                        
12a3 : 9c0502                   stz abst     
12a6 : 9c0602                   stz abst+1
12a9 : 9c0702                   stz abst+2
12ac : 9c0802                   stz abst+3
12af : 9c0902                   stz abst+4
                                tst_a $55,$ff
12b2 : 08              >            php         ;save flags
12b3 : c955            >            cmp #$55     ;test result
                       >            trap_ne
12b5 : f003            >        beq skip0912
                       >        trap            ;failed not equal (non zero)
12b7 : 209524          >        jsr report_error
                       >
12ba :                 >skip0912
                       >
12ba : 68              >            pla         ;load status
12bb : 48              >            pha
                       >            cmp_flag $ff
12bc : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
12be : f003            >        beq skip0915
                       >        trap            ;failed not equal (non zero)
12c0 : 209524          >        jsr report_error
                       >
12c3 :                 >skip0915
                       >
12c3 : 28              >            plp         ;restore status
                        
12c4 : bd0502           tstz6   lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ abs
12c7 : f003            >        beq skip0917
                       >        trap            ;failed not equal (non zero)
12c9 : 209524          >        jsr report_error
                       >
12cc :                 >skip0917
                        
12cc : ca                       dex
12cd : 10f5                     bpl tstz6
12cf : a204                     ldx #4      ;precharge test area
12d1 : a907                     lda #7
12d3 : 9d0502           tstz7   sta abst,x
12d6 : 0a                       asl a
12d7 : ca                       dex
12d8 : 10f9                     bpl tstz7
12da : a204                     ldx #4
                                set_a $aa,0
                       >            load_flag 0
12dc : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
12de : 48              >            pha         ;use stack to load status
12df : a9aa            >            lda #$aa     ;precharge accu
12e1 : 28              >            plp
                        
12e2 : 9c0502                   stz abst     
12e5 : 9c0602                   stz abst+1
12e8 : 9c0702                   stz abst+2
12eb : 9c0802                   stz abst+3
12ee : 9c0902                   stz abst+4
                                tst_a $aa,0
12f1 : 08              >            php         ;save flags
12f2 : c9aa            >            cmp #$aa     ;test result
                       >            trap_ne
12f4 : f003            >        beq skip0922
                       >        trap            ;failed not equal (non zero)
12f6 : 209524          >        jsr report_error
                       >
12f9 :                 >skip0922
                       >
12f9 : 68              >            pla         ;load status
12fa : 48              >            pha
                       >            cmp_flag 0
12fb : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
12fd : f003            >        beq skip0925
                       >        trap            ;failed not equal (non zero)
12ff : 209524          >        jsr report_error
                       >
1302 :                 >skip0925
                       >
1302 : 28              >            plp         ;restore status
                        
1303 : bd0502           tstz8   lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ abs
1306 : f003            >        beq skip0927
                       >        trap            ;failed not equal (non zero)
1308 : 209524          >        jsr report_error
                       >
130b :                 >skip0927
                        
130b : ca                       dex
130c : 10f5                     bpl tstz8
                                
130e : a204                     ldx #4      ;precharge test area
1310 : a907                     lda #7
1312 : 9503             tstz11  sta zpt,x
1314 : 0a                       asl a
1315 : ca                       dex
1316 : 10fa                     bpl tstz11
1318 : a204                     ldx #4
131a :                  tstz15
                                set_a $55,$ff
                       >            load_flag $ff
131a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
131c : 48              >            pha         ;use stack to load status
131d : a955            >            lda #$55     ;precharge accu
131f : 28              >            plp
                        
1320 : 7403                     stz zpt,x     
                                tst_a $55,$ff
1322 : 08              >            php         ;save flags
1323 : c955            >            cmp #$55     ;test result
                       >            trap_ne
1325 : f003            >        beq skip0932
                       >        trap            ;failed not equal (non zero)
1327 : 209524          >        jsr report_error
                       >
132a :                 >skip0932
                       >
132a : 68              >            pla         ;load status
132b : 48              >            pha
                       >            cmp_flag $ff
132c : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
132e : f003            >        beq skip0935
                       >        trap            ;failed not equal (non zero)
1330 : 209524          >        jsr report_error
                       >
1333 :                 >skip0935
                       >
1333 : 28              >            plp         ;restore status
                        
1334 : ca                       dex
1335 : 10e3                     bpl tstz15
1337 : a204                     ldx #4
1339 : b503             tstz12  lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
133b : f003            >        beq skip0937
                       >        trap            ;failed not equal (non zero)
133d : 209524          >        jsr report_error
                       >
1340 :                 >skip0937
                        
1340 : ca                       dex
1341 : 10f6                     bpl tstz12
1343 : a204                     ldx #4      ;precharge test area
1345 : a907                     lda #7
1347 : 9503             tstz13  sta zpt,x
1349 : 0a                       asl a
134a : ca                       dex
134b : 10fa                     bpl tstz13
134d : a204                     ldx #4
134f :                  tstz16
                                set_a $aa,0
                       >            load_flag 0
134f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1351 : 48              >            pha         ;use stack to load status
1352 : a9aa            >            lda #$aa     ;precharge accu
1354 : 28              >            plp
                        
1355 : 7403                     stz zpt,x
                                tst_a $aa,0
1357 : 08              >            php         ;save flags
1358 : c9aa            >            cmp #$aa     ;test result
                       >            trap_ne
135a : f003            >        beq skip0942
                       >        trap            ;failed not equal (non zero)
135c : 209524          >        jsr report_error
                       >
135f :                 >skip0942
                       >
135f : 68              >            pla         ;load status
1360 : 48              >            pha
                       >            cmp_flag 0
1361 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1363 : f003            >        beq skip0945
                       >        trap            ;failed not equal (non zero)
1365 : 209524          >        jsr report_error
                       >
1368 :                 >skip0945
                       >
1368 : 28              >            plp         ;restore status
                        
1369 : ca                       dex
136a : 10e3                     bpl tstz16
136c : a204                     ldx #4
136e : b503             tstz14  lda zpt,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
1370 : f003            >        beq skip0947
                       >        trap            ;failed not equal (non zero)
1372 : 209524          >        jsr report_error
                       >
1375 :                 >skip0947
                        
1375 : ca                       dex
1376 : 10f6                     bpl tstz14
                                
1378 : a204                     ldx #4      ;precharge test area
137a : a907                     lda #7
137c : 9d0502           tstz21  sta abst,x
137f : 0a                       asl a
1380 : ca                       dex
1381 : 10f9                     bpl tstz21
1383 : a204                     ldx #4
1385 :                  tstz25
                                set_a $55,$ff
                       >            load_flag $ff
1385 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1387 : 48              >            pha         ;use stack to load status
1388 : a955            >            lda #$55     ;precharge accu
138a : 28              >            plp
                        
138b : 9e0502                   stz abst,x     
                                tst_a $55,$ff
138e : 08              >            php         ;save flags
138f : c955            >            cmp #$55     ;test result
                       >            trap_ne
1391 : f003            >        beq skip0952
                       >        trap            ;failed not equal (non zero)
1393 : 209524          >        jsr report_error
                       >
1396 :                 >skip0952
                       >
1396 : 68              >            pla         ;load status
1397 : 48              >            pha
                       >            cmp_flag $ff
1398 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
139a : f003            >        beq skip0955
                       >        trap            ;failed not equal (non zero)
139c : 209524          >        jsr report_error
                       >
139f :                 >skip0955
                       >
139f : 28              >            plp         ;restore status
                        
13a0 : ca                       dex
13a1 : 10e2                     bpl tstz25
13a3 : a204                     ldx #4
13a5 : bd0502           tstz22  lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
13a8 : f003            >        beq skip0957
                       >        trap            ;failed not equal (non zero)
13aa : 209524          >        jsr report_error
                       >
13ad :                 >skip0957
                        
13ad : ca                       dex
13ae : 10f5                     bpl tstz22
13b0 : a204                     ldx #4      ;precharge test area
13b2 : a907                     lda #7
13b4 : 9d0502           tstz23  sta abst,x
13b7 : 0a                       asl a
13b8 : ca                       dex
13b9 : 10f9                     bpl tstz23
13bb : a204                     ldx #4
13bd :                  tstz26
                                set_a $aa,0
                       >            load_flag 0
13bd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
13bf : 48              >            pha         ;use stack to load status
13c0 : a9aa            >            lda #$aa     ;precharge accu
13c2 : 28              >            plp
                        
13c3 : 9e0502                   stz abst,x
                                tst_a $aa,0
13c6 : 08              >            php         ;save flags
13c7 : c9aa            >            cmp #$aa     ;test result
                       >            trap_ne
13c9 : f003            >        beq skip0962
                       >        trap            ;failed not equal (non zero)
13cb : 209524          >        jsr report_error
                       >
13ce :                 >skip0962
                       >
13ce : 68              >            pla         ;load status
13cf : 48              >            pha
                       >            cmp_flag 0
13d0 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
13d2 : f003            >        beq skip0965
                       >        trap            ;failed not equal (non zero)
13d4 : 209524          >        jsr report_error
                       >
13d7 :                 >skip0965
                       >
13d7 : 28              >            plp         ;restore status
                        
13d8 : ca                       dex
13d9 : 10e2                     bpl tstz26
13db : a204                     ldx #4
13dd : bd0502           tstz24  lda abst,x   ;verify zeros stored
                                trap_ne     ;non zero after STZ zp
13e0 : f003            >        beq skip0967
                       >        trap            ;failed not equal (non zero)
13e2 : 209524          >        jsr report_error
                       >
13e5 :                 >skip0967
                        
13e5 : ca                       dex
13e6 : 10f5                     bpl tstz24
                                
13e8 : c07b                     cpy #123
                                trap_ne     ;y altered during test 
13ea : f003            >        beq skip0969
                       >        trap            ;failed not equal (non zero)
13ec : 209524          >        jsr report_error
                       >
13ef :                 >skip0969
                        
13ef : ba                       tsx
13f0 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
13f2 : f003            >        beq skip0971
                       >        trap            ;failed not equal (non zero)
13f4 : 209524          >        jsr report_error
                       >
13f7 :                 >skip0971
                        
                                next_test
13f7 : ad0202          >            lda test_case   ;previous test
13fa : c90d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
13fc : f003            >        beq skip0974
                       >        trap            ;failed not equal (non zero)
13fe : 209524          >        jsr report_error
                       >
1401 :                 >skip0974
                       >
000e =                 >test_num = test_num + 1
1401 : a90e            >            lda #test_num   ;*** next tests' number
1403 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing BIT - zp,x / abs,x / #
1406 : a042                     ldy #$42
1408 : a203                     ldx #3
                                set_a $ff,0
                       >            load_flag 0
140a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
140c : 48              >            pha         ;use stack to load status
140d : a9ff            >            lda #$ff     ;precharge accu
140f : 28              >            plp
                        
1410 : 340a                     bit zp1,x   ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
1412 : 08              >            php         ;save flags
1413 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1415 : f003            >        beq skip0979
                       >        trap            ;failed not equal (non zero)
1417 : 209524          >        jsr report_error
                       >
141a :                 >skip0979
                       >
141a : 68              >            pla         ;load status
141b : 48              >            pha
                       >            cmp_flag fz 
141c : c932            >            cmp #(fz |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
141e : f003            >        beq skip0982
                       >        trap            ;failed not equal (non zero)
1420 : 209524          >        jsr report_error
                       >
1423 :                 >skip0982
                       >
1423 : 28              >            plp         ;restore status
                        
1424 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
1425 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1427 : 48              >            pha         ;use stack to load status
1428 : a901            >            lda #1     ;precharge accu
142a : 28              >            plp
                        
142b : 340a                     bit zp1,x   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
142d : 08              >            php         ;save flags
142e : c901            >            cmp #1     ;test result
                       >            trap_ne
1430 : f003            >        beq skip0987
                       >        trap            ;failed not equal (non zero)
1432 : 209524          >        jsr report_error
                       >
1435 :                 >skip0987
                       >
1435 : 68              >            pla         ;load status
1436 : 48              >            pha
                       >            cmp_flag fv
1437 : c970            >            cmp #(fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1439 : f003            >        beq skip0990
                       >        trap            ;failed not equal (non zero)
143b : 209524          >        jsr report_error
                       >
143e :                 >skip0990
                       >
143e : 28              >            plp         ;restore status
                        
143f : ca                       dex
                                set_a 1,0
                       >            load_flag 0
1440 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1442 : 48              >            pha         ;use stack to load status
1443 : a901            >            lda #1     ;precharge accu
1445 : 28              >            plp
                        
1446 : 340a                     bit zp1,x   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
1448 : 08              >            php         ;save flags
1449 : c901            >            cmp #1     ;test result
                       >            trap_ne
144b : f003            >        beq skip0995
                       >        trap            ;failed not equal (non zero)
144d : 209524          >        jsr report_error
                       >
1450 :                 >skip0995
                       >
1450 : 68              >            pla         ;load status
1451 : 48              >            pha
                       >            cmp_flag fnz
1452 : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1454 : f003            >        beq skip0998
                       >        trap            ;failed not equal (non zero)
1456 : 209524          >        jsr report_error
                       >
1459 :                 >skip0998
                       >
1459 : 28              >            plp         ;restore status
                        
145a : ca                       dex
                                set_a 1,0
                       >            load_flag 0
145b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
145d : 48              >            pha         ;use stack to load status
145e : a901            >            lda #1     ;precharge accu
1460 : 28              >            plp
                        
1461 : 340a                     bit zp1,x   ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
1463 : 08              >            php         ;save flags
1464 : c901            >            cmp #1     ;test result
                       >            trap_ne
1466 : f003            >        beq skip1003
                       >        trap            ;failed not equal (non zero)
1468 : 209524          >        jsr report_error
                       >
146b :                 >skip1003
                       >
146b : 68              >            pla         ;load status
146c : 48              >            pha
                       >            cmp_flag fnv
146d : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
146f : f003            >        beq skip1006
                       >        trap            ;failed not equal (non zero)
1471 : 209524          >        jsr report_error
                       >
1474 :                 >skip1006
                       >
1474 : 28              >            plp         ;restore status
                        
                                
                                set_a 1,$ff
                       >            load_flag $ff
1475 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1477 : 48              >            pha         ;use stack to load status
1478 : a901            >            lda #1     ;precharge accu
147a : 28              >            plp
                        
147b : 340a                     bit zp1,x   ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
147d : 08              >            php         ;save flags
147e : c901            >            cmp #1     ;test result
                       >            trap_ne
1480 : f003            >        beq skip1011
                       >        trap            ;failed not equal (non zero)
1482 : 209524          >        jsr report_error
                       >
1485 :                 >skip1011
                       >
1485 : 68              >            pla         ;load status
1486 : 48              >            pha
                       >            cmp_flag ~fz
1487 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1489 : f003            >        beq skip1014
                       >        trap            ;failed not equal (non zero)
148b : 209524          >        jsr report_error
                       >
148e :                 >skip1014
                       >
148e : 28              >            plp         ;restore status
                        
148f : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
1490 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1492 : 48              >            pha         ;use stack to load status
1493 : a901            >            lda #1     ;precharge accu
1495 : 28              >            plp
                        
1496 : 340a                     bit zp1,x   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
1498 : 08              >            php         ;save flags
1499 : c901            >            cmp #1     ;test result
                       >            trap_ne
149b : f003            >        beq skip1019
                       >        trap            ;failed not equal (non zero)
149d : 209524          >        jsr report_error
                       >
14a0 :                 >skip1019
                       >
14a0 : 68              >            pla         ;load status
14a1 : 48              >            pha
                       >            cmp_flag ~fv
14a2 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
14a4 : f003            >        beq skip1022
                       >        trap            ;failed not equal (non zero)
14a6 : 209524          >        jsr report_error
                       >
14a9 :                 >skip1022
                       >
14a9 : 28              >            plp         ;restore status
                        
14aa : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
14ab : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14ad : 48              >            pha         ;use stack to load status
14ae : a901            >            lda #1     ;precharge accu
14b0 : 28              >            plp
                        
14b1 : 340a                     bit zp1,x   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
14b3 : 08              >            php         ;save flags
14b4 : c901            >            cmp #1     ;test result
                       >            trap_ne
14b6 : f003            >        beq skip1027
                       >        trap            ;failed not equal (non zero)
14b8 : 209524          >        jsr report_error
                       >
14bb :                 >skip1027
                       >
14bb : 68              >            pla         ;load status
14bc : 48              >            pha
                       >            cmp_flag ~fnz
14bd : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
14bf : f003            >        beq skip1030
                       >        trap            ;failed not equal (non zero)
14c1 : 209524          >        jsr report_error
                       >
14c4 :                 >skip1030
                       >
14c4 : 28              >            plp         ;restore status
                        
14c5 : e8                       inx
                                set_a $ff,$ff
                       >            load_flag $ff
14c6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14c8 : 48              >            pha         ;use stack to load status
14c9 : a9ff            >            lda #$ff     ;precharge accu
14cb : 28              >            plp
                        
14cc : 340a                     bit zp1,x   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
14ce : 08              >            php         ;save flags
14cf : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
14d1 : f003            >        beq skip1035
                       >        trap            ;failed not equal (non zero)
14d3 : 209524          >        jsr report_error
                       >
14d6 :                 >skip1035
                       >
14d6 : 68              >            pla         ;load status
14d7 : 48              >            pha
                       >            cmp_flag ~fnv 
14d8 : c93f            >            cmp #(~fnv |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
14da : f003            >        beq skip1038
                       >        trap            ;failed not equal (non zero)
14dc : 209524          >        jsr report_error
                       >
14df :                 >skip1038
                       >
14df : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,0
                       >            load_flag 0
14e0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
14e2 : 48              >            pha         ;use stack to load status
14e3 : a9ff            >            lda #$ff     ;precharge accu
14e5 : 28              >            plp
                        
14e6 : 3c1002                   bit abs1,x  ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
14e9 : 08              >            php         ;save flags
14ea : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
14ec : f003            >        beq skip1043
                       >        trap            ;failed not equal (non zero)
14ee : 209524          >        jsr report_error
                       >
14f1 :                 >skip1043
                       >
14f1 : 68              >            pla         ;load status
14f2 : 48              >            pha
                       >            cmp_flag fz 
14f3 : c932            >            cmp #(fz |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
14f5 : f003            >        beq skip1046
                       >        trap            ;failed not equal (non zero)
14f7 : 209524          >        jsr report_error
                       >
14fa :                 >skip1046
                       >
14fa : 28              >            plp         ;restore status
                        
14fb : ca                       dex
                                set_a 1,0
                       >            load_flag 0
14fc : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
14fe : 48              >            pha         ;use stack to load status
14ff : a901            >            lda #1     ;precharge accu
1501 : 28              >            plp
                        
1502 : 3c1002                   bit abs1,x  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
1505 : 08              >            php         ;save flags
1506 : c901            >            cmp #1     ;test result
                       >            trap_ne
1508 : f003            >        beq skip1051
                       >        trap            ;failed not equal (non zero)
150a : 209524          >        jsr report_error
                       >
150d :                 >skip1051
                       >
150d : 68              >            pla         ;load status
150e : 48              >            pha
                       >            cmp_flag fv
150f : c970            >            cmp #(fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1511 : f003            >        beq skip1054
                       >        trap            ;failed not equal (non zero)
1513 : 209524          >        jsr report_error
                       >
1516 :                 >skip1054
                       >
1516 : 28              >            plp         ;restore status
                        
1517 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
1518 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
151a : 48              >            pha         ;use stack to load status
151b : a901            >            lda #1     ;precharge accu
151d : 28              >            plp
                        
151e : 3c1002                   bit abs1,x  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
1521 : 08              >            php         ;save flags
1522 : c901            >            cmp #1     ;test result
                       >            trap_ne
1524 : f003            >        beq skip1059
                       >        trap            ;failed not equal (non zero)
1526 : 209524          >        jsr report_error
                       >
1529 :                 >skip1059
                       >
1529 : 68              >            pla         ;load status
152a : 48              >            pha
                       >            cmp_flag fnz
152b : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
152d : f003            >        beq skip1062
                       >        trap            ;failed not equal (non zero)
152f : 209524          >        jsr report_error
                       >
1532 :                 >skip1062
                       >
1532 : 28              >            plp         ;restore status
                        
1533 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
1534 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1536 : 48              >            pha         ;use stack to load status
1537 : a901            >            lda #1     ;precharge accu
1539 : 28              >            plp
                        
153a : 3c1002                   bit abs1,x  ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
153d : 08              >            php         ;save flags
153e : c901            >            cmp #1     ;test result
                       >            trap_ne
1540 : f003            >        beq skip1067
                       >        trap            ;failed not equal (non zero)
1542 : 209524          >        jsr report_error
                       >
1545 :                 >skip1067
                       >
1545 : 68              >            pla         ;load status
1546 : 48              >            pha
                       >            cmp_flag fnv
1547 : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1549 : f003            >        beq skip1070
                       >        trap            ;failed not equal (non zero)
154b : 209524          >        jsr report_error
                       >
154e :                 >skip1070
                       >
154e : 28              >            plp         ;restore status
                        
                                
                                set_a 1,$ff
                       >            load_flag $ff
154f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1551 : 48              >            pha         ;use stack to load status
1552 : a901            >            lda #1     ;precharge accu
1554 : 28              >            plp
                        
1555 : 3c1002                   bit abs1,x  ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
1558 : 08              >            php         ;save flags
1559 : c901            >            cmp #1     ;test result
                       >            trap_ne
155b : f003            >        beq skip1075
                       >        trap            ;failed not equal (non zero)
155d : 209524          >        jsr report_error
                       >
1560 :                 >skip1075
                       >
1560 : 68              >            pla         ;load status
1561 : 48              >            pha
                       >            cmp_flag ~fz
1562 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1564 : f003            >        beq skip1078
                       >        trap            ;failed not equal (non zero)
1566 : 209524          >        jsr report_error
                       >
1569 :                 >skip1078
                       >
1569 : 28              >            plp         ;restore status
                        
156a : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
156b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
156d : 48              >            pha         ;use stack to load status
156e : a901            >            lda #1     ;precharge accu
1570 : 28              >            plp
                        
1571 : 3c1002                   bit abs1,x  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
1574 : 08              >            php         ;save flags
1575 : c901            >            cmp #1     ;test result
                       >            trap_ne
1577 : f003            >        beq skip1083
                       >        trap            ;failed not equal (non zero)
1579 : 209524          >        jsr report_error
                       >
157c :                 >skip1083
                       >
157c : 68              >            pla         ;load status
157d : 48              >            pha
                       >            cmp_flag ~fv
157e : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1580 : f003            >        beq skip1086
                       >        trap            ;failed not equal (non zero)
1582 : 209524          >        jsr report_error
                       >
1585 :                 >skip1086
                       >
1585 : 28              >            plp         ;restore status
                        
1586 : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
1587 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1589 : 48              >            pha         ;use stack to load status
158a : a901            >            lda #1     ;precharge accu
158c : 28              >            plp
                        
158d : 3c1002                   bit abs1,x  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
1590 : 08              >            php         ;save flags
1591 : c901            >            cmp #1     ;test result
                       >            trap_ne
1593 : f003            >        beq skip1091
                       >        trap            ;failed not equal (non zero)
1595 : 209524          >        jsr report_error
                       >
1598 :                 >skip1091
                       >
1598 : 68              >            pla         ;load status
1599 : 48              >            pha
                       >            cmp_flag ~fnz
159a : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
159c : f003            >        beq skip1094
                       >        trap            ;failed not equal (non zero)
159e : 209524          >        jsr report_error
                       >
15a1 :                 >skip1094
                       >
15a1 : 28              >            plp         ;restore status
                        
15a2 : e8                       inx
                                set_a $ff,$ff
                       >            load_flag $ff
15a3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
15a5 : 48              >            pha         ;use stack to load status
15a6 : a9ff            >            lda #$ff     ;precharge accu
15a8 : 28              >            plp
                        
15a9 : 3c1002                   bit abs1,x  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
15ac : 08              >            php         ;save flags
15ad : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
15af : f003            >        beq skip1099
                       >        trap            ;failed not equal (non zero)
15b1 : 209524          >        jsr report_error
                       >
15b4 :                 >skip1099
                       >
15b4 : 68              >            pla         ;load status
15b5 : 48              >            pha
                       >            cmp_flag ~fnv 
15b6 : c93f            >            cmp #(~fnv |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
15b8 : f003            >        beq skip1102
                       >        trap            ;failed not equal (non zero)
15ba : 209524          >        jsr report_error
                       >
15bd :                 >skip1102
                       >
15bd : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,0
                       >            load_flag 0
15be : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
15c0 : 48              >            pha         ;use stack to load status
15c1 : a9ff            >            lda #$ff     ;precharge accu
15c3 : 28              >            plp
                        
15c4 : 8900                     bit #$00    ;00 - should set Z
                                tst_a $ff,fz 
15c6 : 08              >            php         ;save flags
15c7 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
15c9 : f003            >        beq skip1107
                       >        trap            ;failed not equal (non zero)
15cb : 209524          >        jsr report_error
                       >
15ce :                 >skip1107
                       >
15ce : 68              >            pla         ;load status
15cf : 48              >            pha
                       >            cmp_flag fz 
15d0 : c932            >            cmp #(fz |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
15d2 : f003            >        beq skip1110
                       >        trap            ;failed not equal (non zero)
15d4 : 209524          >        jsr report_error
                       >
15d7 :                 >skip1110
                       >
15d7 : 28              >            plp         ;restore status
                        
15d8 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
15d9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
15db : 48              >            pha         ;use stack to load status
15dc : a901            >            lda #1     ;precharge accu
15de : 28              >            plp
                        
15df : 8941                     bit #$41    ;41 - should clear Z
                                tst_a 1,0
15e1 : 08              >            php         ;save flags
15e2 : c901            >            cmp #1     ;test result
                       >            trap_ne
15e4 : f003            >        beq skip1115
                       >        trap            ;failed not equal (non zero)
15e6 : 209524          >        jsr report_error
                       >
15e9 :                 >skip1115
                       >
15e9 : 68              >            pla         ;load status
15ea : 48              >            pha
                       >            cmp_flag 0
15eb : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
15ed : f003            >        beq skip1118
                       >        trap            ;failed not equal (non zero)
15ef : 209524          >        jsr report_error
                       >
15f2 :                 >skip1118
                       >
15f2 : 28              >            plp         ;restore status
                        
                        ; *** DEBUG INFO ***
                        ; if it fails the previous test and your BIT # has set the V flag
                        ; see http://forum.6502.org/viewtopic.php?f=2&t=2241&p=27243#p27239
                        ; why it shouldn't alter N or V flags on a BIT #
15f3 : ca                       dex
                                set_a 1,0
                       >            load_flag 0
15f4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
15f6 : 48              >            pha         ;use stack to load status
15f7 : a901            >            lda #1     ;precharge accu
15f9 : 28              >            plp
                        
15fa : 8982                     bit #$82    ;82 - should set Z
                                tst_a 1,fz
15fc : 08              >            php         ;save flags
15fd : c901            >            cmp #1     ;test result
                       >            trap_ne
15ff : f003            >        beq skip1123
                       >        trap            ;failed not equal (non zero)
1601 : 209524          >        jsr report_error
                       >
1604 :                 >skip1123
                       >
1604 : 68              >            pla         ;load status
1605 : 48              >            pha
                       >            cmp_flag fz
1606 : c932            >            cmp #(fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1608 : f003            >        beq skip1126
                       >        trap            ;failed not equal (non zero)
160a : 209524          >        jsr report_error
                       >
160d :                 >skip1126
                       >
160d : 28              >            plp         ;restore status
                        
160e : ca                       dex
                                set_a 1,0
                       >            load_flag 0
160f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1611 : 48              >            pha         ;use stack to load status
1612 : a901            >            lda #1     ;precharge accu
1614 : 28              >            plp
                        
1615 : 89c3                     bit #$c3    ;c3 - should clear Z
                                tst_a 1,0
1617 : 08              >            php         ;save flags
1618 : c901            >            cmp #1     ;test result
                       >            trap_ne
161a : f003            >        beq skip1131
                       >        trap            ;failed not equal (non zero)
161c : 209524          >        jsr report_error
                       >
161f :                 >skip1131
                       >
161f : 68              >            pla         ;load status
1620 : 48              >            pha
                       >            cmp_flag 0
1621 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1623 : f003            >        beq skip1134
                       >        trap            ;failed not equal (non zero)
1625 : 209524          >        jsr report_error
                       >
1628 :                 >skip1134
                       >
1628 : 28              >            plp         ;restore status
                        
                                
                                set_a 1,$ff
                       >            load_flag $ff
1629 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
162b : 48              >            pha         ;use stack to load status
162c : a901            >            lda #1     ;precharge accu
162e : 28              >            plp
                        
162f : 89c3                     bit #$c3    ;c3 - clear Z
                                tst_a 1,~fz
1631 : 08              >            php         ;save flags
1632 : c901            >            cmp #1     ;test result
                       >            trap_ne
1634 : f003            >        beq skip1139
                       >        trap            ;failed not equal (non zero)
1636 : 209524          >        jsr report_error
                       >
1639 :                 >skip1139
                       >
1639 : 68              >            pla         ;load status
163a : 48              >            pha
                       >            cmp_flag ~fz
163b : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
163d : f003            >        beq skip1142
                       >        trap            ;failed not equal (non zero)
163f : 209524          >        jsr report_error
                       >
1642 :                 >skip1142
                       >
1642 : 28              >            plp         ;restore status
                        
1643 : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
1644 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1646 : 48              >            pha         ;use stack to load status
1647 : a901            >            lda #1     ;precharge accu
1649 : 28              >            plp
                        
164a : 8982                     bit #$82    ;82 - should set Z
                                tst_a 1,$ff
164c : 08              >            php         ;save flags
164d : c901            >            cmp #1     ;test result
                       >            trap_ne
164f : f003            >        beq skip1147
                       >        trap            ;failed not equal (non zero)
1651 : 209524          >        jsr report_error
                       >
1654 :                 >skip1147
                       >
1654 : 68              >            pla         ;load status
1655 : 48              >            pha
                       >            cmp_flag $ff
1656 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1658 : f003            >        beq skip1150
                       >        trap            ;failed not equal (non zero)
165a : 209524          >        jsr report_error
                       >
165d :                 >skip1150
                       >
165d : 28              >            plp         ;restore status
                        
165e : e8                       inx
                                set_a 1,$ff
                       >            load_flag $ff
165f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1661 : 48              >            pha         ;use stack to load status
1662 : a901            >            lda #1     ;precharge accu
1664 : 28              >            plp
                        
1665 : 8941                     bit #$41    ;41 - should clear Z
                                tst_a 1,~fz
1667 : 08              >            php         ;save flags
1668 : c901            >            cmp #1     ;test result
                       >            trap_ne
166a : f003            >        beq skip1155
                       >        trap            ;failed not equal (non zero)
166c : 209524          >        jsr report_error
                       >
166f :                 >skip1155
                       >
166f : 68              >            pla         ;load status
1670 : 48              >            pha
                       >            cmp_flag ~fz
1671 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1673 : f003            >        beq skip1158
                       >        trap            ;failed not equal (non zero)
1675 : 209524          >        jsr report_error
                       >
1678 :                 >skip1158
                       >
1678 : 28              >            plp         ;restore status
                        
1679 : e8                       inx
                                set_a $ff,$ff
                       >            load_flag $ff
167a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
167c : 48              >            pha         ;use stack to load status
167d : a9ff            >            lda #$ff     ;precharge accu
167f : 28              >            plp
                        
1680 : 8900                     bit #$00   ;00 - should set Z
                                tst_a $ff,$ff
1682 : 08              >            php         ;save flags
1683 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1685 : f003            >        beq skip1163
                       >        trap            ;failed not equal (non zero)
1687 : 209524          >        jsr report_error
                       >
168a :                 >skip1163
                       >
168a : 68              >            pla         ;load status
168b : 48              >            pha
                       >            cmp_flag $ff
168c : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
168e : f003            >        beq skip1166
                       >        trap            ;failed not equal (non zero)
1690 : 209524          >        jsr report_error
                       >
1693 :                 >skip1166
                       >
1693 : 28              >            plp         ;restore status
                        
                                
1694 : e003                     cpx #3
                                trap_ne     ;x altered during test
1696 : f003            >        beq skip1168
                       >        trap            ;failed not equal (non zero)
1698 : 209524          >        jsr report_error
                       >
169b :                 >skip1168
                        
169b : c042                     cpy #$42
                                trap_ne     ;y altered during test 
169d : f003            >        beq skip1170
                       >        trap            ;failed not equal (non zero)
169f : 209524          >        jsr report_error
                       >
16a2 :                 >skip1170
                        
16a2 : ba                       tsx
16a3 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
16a5 : f003            >        beq skip1172
                       >        trap            ;failed not equal (non zero)
16a7 : 209524          >        jsr report_error
                       >
16aa :                 >skip1172
                        
                                next_test
16aa : ad0202          >            lda test_case   ;previous test
16ad : c90e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
16af : f003            >        beq skip1175
                       >        trap            ;failed not equal (non zero)
16b1 : 209524          >        jsr report_error
                       >
16b4 :                 >skip1175
                       >
000f =                 >test_num = test_num + 1
16b4 : a90f            >            lda #test_num   ;*** next tests' number
16b6 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing TRB, TSB - zp / abs
                        
                        trbt    macro       ;\1 = memory, \2 = flags   
                                sty \1
                                load_flag \2
                                pha
                                lda zpt+1
                                plp
                                trb \1
                                php
                                cmp zpt+1
                                trap_ne     ;accu was changed
                                pla
                                pha
                                ora #fz     ;mask Z
                                cmp_flag \2|fz
                                trap_ne     ;flags changed except Z
                                pla
                                and #fz
                                cmp zpt+2
                                trap_ne     ;Z flag invalid
                                lda zpt+3
                                cmp zpt
                                trap_ne     ;altered bits in memory wrong       
                                endm
                        
                        tsbt    macro       ;\1 = memory, \2 = flags   
                                sty \1
                                load_flag \2
                                pha
                                lda zpt+1
                                plp
                                tsb \1
                                php
                                cmp zpt+1
                                trap_ne     ;accu was changed
                                pla
                                pha
                                ora #fz     ;mask Z
                                cmp_flag \2|fz
                                trap_ne     ;flags changed except Z
                                pla
                                and #fz
                                cmp zpt+2
                                trap_ne     ;Z flag invalid
                                lda zpt+4
                                cmp zpt
                                trap_ne     ;altered bits in memory wrong        
                                endm
                        
16b9 : a2c0                     ldx #$c0
16bb : a000                     ldy #0      ;op1 - memory save
                                ;   zpt     ;op1 - memory modifiable
16bd : 6404                     stz zpt+1   ;op2 - accu
                                ;   zpt+2   ;and flags
                                ;   zpt+3   ;memory after reset
                                ;   zpt+4   ;memory after set
                                
16bf : 98               tbt1    tya
16c0 : 2504                     and zpt+1   ;set Z by anding the 2 operands
16c2 : 08                       php
16c3 : 68                       pla
16c4 : 2902                     and #fz     ;mask Z
16c6 : 8505                     sta zpt+2
16c8 : 98                       tya         ;reset op1 bits by op2
16c9 : 49ff                     eor #$ff
16cb : 0504                     ora zpt+1
16cd : 49ff                     eor #$ff
16cf : 8506                     sta zpt+3
16d1 : 98                       tya         ;set op1 bits by op2
16d2 : 0504                     ora zpt+1
16d4 : 8507                     sta zpt+4
                        
                                trbt zpt,$ff
16d6 : 8403            >        sty zpt
                       >        load_flag $ff
16d8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
16da : 48              >        pha
16db : a504            >        lda zpt+1
16dd : 28              >        plp
16de : 1403            >        trb zpt
16e0 : 08              >        php
16e1 : c504            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
16e3 : f003            >        beq skip1179
                       >        trap            ;failed not equal (non zero)
16e5 : 209524          >        jsr report_error
                       >
16e8 :                 >skip1179
                       >
16e8 : 68              >        pla
16e9 : 48              >        pha
16ea : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag $ff|fz
16ec : c9ff            >            cmp #($ff|fz|fao)&m8    ;expected flags + always on bits
                       >
                       >        trap_ne     ;flags changed except Z
16ee : f003            >        beq skip1182
                       >        trap            ;failed not equal (non zero)
16f0 : 209524          >        jsr report_error
                       >
16f3 :                 >skip1182
                       >
16f3 : 68              >        pla
16f4 : 2902            >        and #fz
16f6 : c505            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
16f8 : f003            >        beq skip1184
                       >        trap            ;failed not equal (non zero)
16fa : 209524          >        jsr report_error
                       >
16fd :                 >skip1184
                       >
16fd : a506            >        lda zpt+3
16ff : c503            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong       
1701 : f003            >        beq skip1186
                       >        trap            ;failed not equal (non zero)
1703 : 209524          >        jsr report_error
                       >
1706 :                 >skip1186
                       >
                        
                                trbt abst,$ff
1706 : 8c0502          >        sty abst
                       >        load_flag $ff
1709 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
170b : 48              >        pha
170c : a504            >        lda zpt+1
170e : 28              >        plp
170f : 1c0502          >        trb abst
1712 : 08              >        php
1713 : c504            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
1715 : f003            >        beq skip1190
                       >        trap            ;failed not equal (non zero)
1717 : 209524          >        jsr report_error
                       >
171a :                 >skip1190
                       >
171a : 68              >        pla
171b : 48              >        pha
171c : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag $ff|fz
171e : c9ff            >            cmp #($ff|fz|fao)&m8    ;expected flags + always on bits
                       >
                       >        trap_ne     ;flags changed except Z
1720 : f003            >        beq skip1193
                       >        trap            ;failed not equal (non zero)
1722 : 209524          >        jsr report_error
                       >
1725 :                 >skip1193
                       >
1725 : 68              >        pla
1726 : 2902            >        and #fz
1728 : c505            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
172a : f003            >        beq skip1195
                       >        trap            ;failed not equal (non zero)
172c : 209524          >        jsr report_error
                       >
172f :                 >skip1195
                       >
172f : a506            >        lda zpt+3
1731 : c503            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong       
1733 : f003            >        beq skip1197
                       >        trap            ;failed not equal (non zero)
1735 : 209524          >        jsr report_error
                       >
1738 :                 >skip1197
                       >
                        
                                trbt zpt,0
1738 : 8403            >        sty zpt
                       >        load_flag 0
173a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
173c : 48              >        pha
173d : a504            >        lda zpt+1
173f : 28              >        plp
1740 : 1403            >        trb zpt
1742 : 08              >        php
1743 : c504            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
1745 : f003            >        beq skip1201
                       >        trap            ;failed not equal (non zero)
1747 : 209524          >        jsr report_error
                       >
174a :                 >skip1201
                       >
174a : 68              >        pla
174b : 48              >        pha
174c : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag 0|fz
174e : c932            >            cmp #(0|fz|fao)&m8    ;expected flags + always on bits
                       >
                       >        trap_ne     ;flags changed except Z
1750 : f003            >        beq skip1204
                       >        trap            ;failed not equal (non zero)
1752 : 209524          >        jsr report_error
                       >
1755 :                 >skip1204
                       >
1755 : 68              >        pla
1756 : 2902            >        and #fz
1758 : c505            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
175a : f003            >        beq skip1206
                       >        trap            ;failed not equal (non zero)
175c : 209524          >        jsr report_error
                       >
175f :                 >skip1206
                       >
175f : a506            >        lda zpt+3
1761 : c503            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong       
1763 : f003            >        beq skip1208
                       >        trap            ;failed not equal (non zero)
1765 : 209524          >        jsr report_error
                       >
1768 :                 >skip1208
                       >
                        
                                trbt abst,0
1768 : 8c0502          >        sty abst
                       >        load_flag 0
176b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
176d : 48              >        pha
176e : a504            >        lda zpt+1
1770 : 28              >        plp
1771 : 1c0502          >        trb abst
1774 : 08              >        php
1775 : c504            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
1777 : f003            >        beq skip1212
                       >        trap            ;failed not equal (non zero)
1779 : 209524          >        jsr report_error
                       >
177c :                 >skip1212
                       >
177c : 68              >        pla
177d : 48              >        pha
177e : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag 0|fz
1780 : c932            >            cmp #(0|fz|fao)&m8    ;expected flags + always on bits
                       >
                       >        trap_ne     ;flags changed except Z
1782 : f003            >        beq skip1215
                       >        trap            ;failed not equal (non zero)
1784 : 209524          >        jsr report_error
                       >
1787 :                 >skip1215
                       >
1787 : 68              >        pla
1788 : 2902            >        and #fz
178a : c505            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
178c : f003            >        beq skip1217
                       >        trap            ;failed not equal (non zero)
178e : 209524          >        jsr report_error
                       >
1791 :                 >skip1217
                       >
1791 : a506            >        lda zpt+3
1793 : c503            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong       
1795 : f003            >        beq skip1219
                       >        trap            ;failed not equal (non zero)
1797 : 209524          >        jsr report_error
                       >
179a :                 >skip1219
                       >
                        
                                tsbt zpt,$ff
179a : 8403            >        sty zpt
                       >        load_flag $ff
179c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
179e : 48              >        pha
179f : a504            >        lda zpt+1
17a1 : 28              >        plp
17a2 : 0403            >        tsb zpt
17a4 : 08              >        php
17a5 : c504            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
17a7 : f003            >        beq skip1223
                       >        trap            ;failed not equal (non zero)
17a9 : 209524          >        jsr report_error
                       >
17ac :                 >skip1223
                       >
17ac : 68              >        pla
17ad : 48              >        pha
17ae : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag $ff|fz
17b0 : c9ff            >            cmp #($ff|fz|fao)&m8    ;expected flags + always on bits
                       >
                       >        trap_ne     ;flags changed except Z
17b2 : f003            >        beq skip1226
                       >        trap            ;failed not equal (non zero)
17b4 : 209524          >        jsr report_error
                       >
17b7 :                 >skip1226
                       >
17b7 : 68              >        pla
17b8 : 2902            >        and #fz
17ba : c505            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
17bc : f003            >        beq skip1228
                       >        trap            ;failed not equal (non zero)
17be : 209524          >        jsr report_error
                       >
17c1 :                 >skip1228
                       >
17c1 : a507            >        lda zpt+4
17c3 : c503            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong        
17c5 : f003            >        beq skip1230
                       >        trap            ;failed not equal (non zero)
17c7 : 209524          >        jsr report_error
                       >
17ca :                 >skip1230
                       >
                        
                                tsbt abst,$ff
17ca : 8c0502          >        sty abst
                       >        load_flag $ff
17cd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
17cf : 48              >        pha
17d0 : a504            >        lda zpt+1
17d2 : 28              >        plp
17d3 : 0c0502          >        tsb abst
17d6 : 08              >        php
17d7 : c504            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
17d9 : f003            >        beq skip1234
                       >        trap            ;failed not equal (non zero)
17db : 209524          >        jsr report_error
                       >
17de :                 >skip1234
                       >
17de : 68              >        pla
17df : 48              >        pha
17e0 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag $ff|fz
17e2 : c9ff            >            cmp #($ff|fz|fao)&m8    ;expected flags + always on bits
                       >
                       >        trap_ne     ;flags changed except Z
17e4 : f003            >        beq skip1237
                       >        trap            ;failed not equal (non zero)
17e6 : 209524          >        jsr report_error
                       >
17e9 :                 >skip1237
                       >
17e9 : 68              >        pla
17ea : 2902            >        and #fz
17ec : c505            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
17ee : f003            >        beq skip1239
                       >        trap            ;failed not equal (non zero)
17f0 : 209524          >        jsr report_error
                       >
17f3 :                 >skip1239
                       >
17f3 : a507            >        lda zpt+4
17f5 : c503            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong        
17f7 : f003            >        beq skip1241
                       >        trap            ;failed not equal (non zero)
17f9 : 209524          >        jsr report_error
                       >
17fc :                 >skip1241
                       >
                        
                                tsbt zpt,0
17fc : 8403            >        sty zpt
                       >        load_flag 0
17fe : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1800 : 48              >        pha
1801 : a504            >        lda zpt+1
1803 : 28              >        plp
1804 : 0403            >        tsb zpt
1806 : 08              >        php
1807 : c504            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
1809 : f003            >        beq skip1245
                       >        trap            ;failed not equal (non zero)
180b : 209524          >        jsr report_error
                       >
180e :                 >skip1245
                       >
180e : 68              >        pla
180f : 48              >        pha
1810 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag 0|fz
1812 : c932            >            cmp #(0|fz|fao)&m8    ;expected flags + always on bits
                       >
                       >        trap_ne     ;flags changed except Z
1814 : f003            >        beq skip1248
                       >        trap            ;failed not equal (non zero)
1816 : 209524          >        jsr report_error
                       >
1819 :                 >skip1248
                       >
1819 : 68              >        pla
181a : 2902            >        and #fz
181c : c505            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
181e : f003            >        beq skip1250
                       >        trap            ;failed not equal (non zero)
1820 : 209524          >        jsr report_error
                       >
1823 :                 >skip1250
                       >
1823 : a507            >        lda zpt+4
1825 : c503            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong        
1827 : f003            >        beq skip1252
                       >        trap            ;failed not equal (non zero)
1829 : 209524          >        jsr report_error
                       >
182c :                 >skip1252
                       >
                        
                                tsbt abst,0
182c : 8c0502          >        sty abst
                       >        load_flag 0
182f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1831 : 48              >        pha
1832 : a504            >        lda zpt+1
1834 : 28              >        plp
1835 : 0c0502          >        tsb abst
1838 : 08              >        php
1839 : c504            >        cmp zpt+1
                       >        trap_ne     ;accu was changed
183b : f003            >        beq skip1256
                       >        trap            ;failed not equal (non zero)
183d : 209524          >        jsr report_error
                       >
1840 :                 >skip1256
                       >
1840 : 68              >        pla
1841 : 48              >        pha
1842 : 0902            >        ora #fz     ;mask Z
                       >        cmp_flag 0|fz
1844 : c932            >            cmp #(0|fz|fao)&m8    ;expected flags + always on bits
                       >
                       >        trap_ne     ;flags changed except Z
1846 : f003            >        beq skip1259
                       >        trap            ;failed not equal (non zero)
1848 : 209524          >        jsr report_error
                       >
184b :                 >skip1259
                       >
184b : 68              >        pla
184c : 2902            >        and #fz
184e : c505            >        cmp zpt+2
                       >        trap_ne     ;Z flag invalid
1850 : f003            >        beq skip1261
                       >        trap            ;failed not equal (non zero)
1852 : 209524          >        jsr report_error
                       >
1855 :                 >skip1261
                       >
1855 : a507            >        lda zpt+4
1857 : c503            >        cmp zpt
                       >        trap_ne     ;altered bits in memory wrong        
1859 : f003            >        beq skip1263
                       >        trap            ;failed not equal (non zero)
185b : 209524          >        jsr report_error
                       >
185e :                 >skip1263
                       >
                        
                                
185e : c8                       iny         ;iterate op1
185f : d004                     bne tbt3
1861 : e604                     inc zpt+1   ;iterate op2
1863 : f003                     beq tbt2
1865 : 4cbf16           tbt3    jmp tbt1        
1868 :                  tbt2
1868 : e0c0                     cpx #$c0
                                trap_ne     ;x altered during test
186a : f003            >        beq skip1265
                       >        trap            ;failed not equal (non zero)
186c : 209524          >        jsr report_error
                       >
186f :                 >skip1265
                        
186f : ba                       tsx
1870 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
1872 : f003            >        beq skip1267
                       >        trap            ;failed not equal (non zero)
1874 : 209524          >        jsr report_error
                       >
1877 :                 >skip1267
                        
                                next_test    
1877 : ad0202          >            lda test_case   ;previous test
187a : c90f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
187c : f003            >        beq skip1270
                       >        trap            ;failed not equal (non zero)
187e : 209524          >        jsr report_error
                       >
1881 :                 >skip1270
                       >
0010 =                 >test_num = test_num + 1
1881 : a910            >            lda #test_num   ;*** next tests' number
1883 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                            if rkwl_wdc_op = 1
                        ; testing RMB, SMB - zp
                        rmbt    macro       ;\1 = bitnum
                                lda #$ff
                                sta zpt
                                set_a $a5,0
                                rmb \1,zpt
                                tst_a $a5,0
                                lda zpt
                                cmp #$ff-(1<<\1)
                                trap_ne     ;wrong bits set or cleared
                                lda #1<<\1
                                sta zpt
                                set_a $5a,$ff
                                rmb \1,zpt
                                tst_a $5a,$ff
                                lda zpt
                                trap_ne     ;wrong bits set or cleared
                                endm
                        smbt    macro       ;\1 = bitnum
                                lda #$ff-(1<<\1)
                                sta zpt
                                set_a $a5,0
                                smb \1,zpt
                                tst_a $a5,0
                                lda zpt
                                cmp #$ff
                                trap_ne     ;wrong bits set or cleared
                                lda #0
                                sta zpt
                                set_a $5a,$ff
                                smb \1,zpt
                                tst_a $5a,$ff
                                lda zpt
                                cmp #1<<\1
                                trap_ne     ;wrong bits set or cleared
                                endm
                        
1886 : a2ba                     ldx #$ba    ;protect x & y
1888 : a0d0                     ldy #$d0
                                rmbt 0
188a : a9ff            >        lda #$ff
188c : 8503            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
188e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1890 : 48              >            pha         ;use stack to load status
1891 : a9a5            >            lda #$a5     ;precharge accu
1893 : 28              >            plp
                       >
1894 : 0703            >        rmb 0,zpt
                       >        tst_a $a5,0
1896 : 08              >            php         ;save flags
1897 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1899 : f003            >        beq skip1276
                       >        trap            ;failed not equal (non zero)
189b : 209524          >        jsr report_error
                       >
189e :                 >skip1276
                       >
189e : 68              >            pla         ;load status
189f : 48              >            pha
                       >            cmp_flag 0
18a0 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
18a2 : f003            >        beq skip1279
                       >        trap            ;failed not equal (non zero)
18a4 : 209524          >        jsr report_error
                       >
18a7 :                 >skip1279
                       >
18a7 : 28              >            plp         ;restore status
                       >
18a8 : a503            >        lda zpt
18aa : c9fe            >        cmp #$ff-(1<<0)
                       >        trap_ne     ;wrong bits set or cleared
18ac : f003            >        beq skip1281
                       >        trap            ;failed not equal (non zero)
18ae : 209524          >        jsr report_error
                       >
18b1 :                 >skip1281
                       >
18b1 : a901            >        lda #1<<0
18b3 : 8503            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
18b5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
18b7 : 48              >            pha         ;use stack to load status
18b8 : a95a            >            lda #$5a     ;precharge accu
18ba : 28              >            plp
                       >
18bb : 0703            >        rmb 0,zpt
                       >        tst_a $5a,$ff
18bd : 08              >            php         ;save flags
18be : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
18c0 : f003            >        beq skip1286
                       >        trap            ;failed not equal (non zero)
18c2 : 209524          >        jsr report_error
                       >
18c5 :                 >skip1286
                       >
18c5 : 68              >            pla         ;load status
18c6 : 48              >            pha
                       >            cmp_flag $ff
18c7 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
18c9 : f003            >        beq skip1289
                       >        trap            ;failed not equal (non zero)
18cb : 209524          >        jsr report_error
                       >
18ce :                 >skip1289
                       >
18ce : 28              >            plp         ;restore status
                       >
18cf : a503            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
18d1 : f003            >        beq skip1291
                       >        trap            ;failed not equal (non zero)
18d3 : 209524          >        jsr report_error
                       >
18d6 :                 >skip1291
                       >
                        
                                rmbt 1
18d6 : a9ff            >        lda #$ff
18d8 : 8503            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
18da : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
18dc : 48              >            pha         ;use stack to load status
18dd : a9a5            >            lda #$a5     ;precharge accu
18df : 28              >            plp
                       >
18e0 : 1703            >        rmb 1,zpt
                       >        tst_a $a5,0
18e2 : 08              >            php         ;save flags
18e3 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
18e5 : f003            >        beq skip1297
                       >        trap            ;failed not equal (non zero)
18e7 : 209524          >        jsr report_error
                       >
18ea :                 >skip1297
                       >
18ea : 68              >            pla         ;load status
18eb : 48              >            pha
                       >            cmp_flag 0
18ec : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
18ee : f003            >        beq skip1300
                       >        trap            ;failed not equal (non zero)
18f0 : 209524          >        jsr report_error
                       >
18f3 :                 >skip1300
                       >
18f3 : 28              >            plp         ;restore status
                       >
18f4 : a503            >        lda zpt
18f6 : c9fd            >        cmp #$ff-(1<<1)
                       >        trap_ne     ;wrong bits set or cleared
18f8 : f003            >        beq skip1302
                       >        trap            ;failed not equal (non zero)
18fa : 209524          >        jsr report_error
                       >
18fd :                 >skip1302
                       >
18fd : a902            >        lda #1<<1
18ff : 8503            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
1901 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1903 : 48              >            pha         ;use stack to load status
1904 : a95a            >            lda #$5a     ;precharge accu
1906 : 28              >            plp
                       >
1907 : 1703            >        rmb 1,zpt
                       >        tst_a $5a,$ff
1909 : 08              >            php         ;save flags
190a : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
190c : f003            >        beq skip1307
                       >        trap            ;failed not equal (non zero)
190e : 209524          >        jsr report_error
                       >
1911 :                 >skip1307
                       >
1911 : 68              >            pla         ;load status
1912 : 48              >            pha
                       >            cmp_flag $ff
1913 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1915 : f003            >        beq skip1310
                       >        trap            ;failed not equal (non zero)
1917 : 209524          >        jsr report_error
                       >
191a :                 >skip1310
                       >
191a : 28              >            plp         ;restore status
                       >
191b : a503            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
191d : f003            >        beq skip1312
                       >        trap            ;failed not equal (non zero)
191f : 209524          >        jsr report_error
                       >
1922 :                 >skip1312
                       >
                        
                                rmbt 2
1922 : a9ff            >        lda #$ff
1924 : 8503            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1926 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1928 : 48              >            pha         ;use stack to load status
1929 : a9a5            >            lda #$a5     ;precharge accu
192b : 28              >            plp
                       >
192c : 2703            >        rmb 2,zpt
                       >        tst_a $a5,0
192e : 08              >            php         ;save flags
192f : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1931 : f003            >        beq skip1318
                       >        trap            ;failed not equal (non zero)
1933 : 209524          >        jsr report_error
                       >
1936 :                 >skip1318
                       >
1936 : 68              >            pla         ;load status
1937 : 48              >            pha
                       >            cmp_flag 0
1938 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
193a : f003            >        beq skip1321
                       >        trap            ;failed not equal (non zero)
193c : 209524          >        jsr report_error
                       >
193f :                 >skip1321
                       >
193f : 28              >            plp         ;restore status
                       >
1940 : a503            >        lda zpt
1942 : c9fb            >        cmp #$ff-(1<<2)
                       >        trap_ne     ;wrong bits set or cleared
1944 : f003            >        beq skip1323
                       >        trap            ;failed not equal (non zero)
1946 : 209524          >        jsr report_error
                       >
1949 :                 >skip1323
                       >
1949 : a904            >        lda #1<<2
194b : 8503            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
194d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
194f : 48              >            pha         ;use stack to load status
1950 : a95a            >            lda #$5a     ;precharge accu
1952 : 28              >            plp
                       >
1953 : 2703            >        rmb 2,zpt
                       >        tst_a $5a,$ff
1955 : 08              >            php         ;save flags
1956 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1958 : f003            >        beq skip1328
                       >        trap            ;failed not equal (non zero)
195a : 209524          >        jsr report_error
                       >
195d :                 >skip1328
                       >
195d : 68              >            pla         ;load status
195e : 48              >            pha
                       >            cmp_flag $ff
195f : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1961 : f003            >        beq skip1331
                       >        trap            ;failed not equal (non zero)
1963 : 209524          >        jsr report_error
                       >
1966 :                 >skip1331
                       >
1966 : 28              >            plp         ;restore status
                       >
1967 : a503            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
1969 : f003            >        beq skip1333
                       >        trap            ;failed not equal (non zero)
196b : 209524          >        jsr report_error
                       >
196e :                 >skip1333
                       >
                        
                                rmbt 3
196e : a9ff            >        lda #$ff
1970 : 8503            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1972 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1974 : 48              >            pha         ;use stack to load status
1975 : a9a5            >            lda #$a5     ;precharge accu
1977 : 28              >            plp
                       >
1978 : 3703            >        rmb 3,zpt
                       >        tst_a $a5,0
197a : 08              >            php         ;save flags
197b : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
197d : f003            >        beq skip1339
                       >        trap            ;failed not equal (non zero)
197f : 209524          >        jsr report_error
                       >
1982 :                 >skip1339
                       >
1982 : 68              >            pla         ;load status
1983 : 48              >            pha
                       >            cmp_flag 0
1984 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1986 : f003            >        beq skip1342
                       >        trap            ;failed not equal (non zero)
1988 : 209524          >        jsr report_error
                       >
198b :                 >skip1342
                       >
198b : 28              >            plp         ;restore status
                       >
198c : a503            >        lda zpt
198e : c9f7            >        cmp #$ff-(1<<3)
                       >        trap_ne     ;wrong bits set or cleared
1990 : f003            >        beq skip1344
                       >        trap            ;failed not equal (non zero)
1992 : 209524          >        jsr report_error
                       >
1995 :                 >skip1344
                       >
1995 : a908            >        lda #1<<3
1997 : 8503            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
1999 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
199b : 48              >            pha         ;use stack to load status
199c : a95a            >            lda #$5a     ;precharge accu
199e : 28              >            plp
                       >
199f : 3703            >        rmb 3,zpt
                       >        tst_a $5a,$ff
19a1 : 08              >            php         ;save flags
19a2 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
19a4 : f003            >        beq skip1349
                       >        trap            ;failed not equal (non zero)
19a6 : 209524          >        jsr report_error
                       >
19a9 :                 >skip1349
                       >
19a9 : 68              >            pla         ;load status
19aa : 48              >            pha
                       >            cmp_flag $ff
19ab : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
19ad : f003            >        beq skip1352
                       >        trap            ;failed not equal (non zero)
19af : 209524          >        jsr report_error
                       >
19b2 :                 >skip1352
                       >
19b2 : 28              >            plp         ;restore status
                       >
19b3 : a503            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
19b5 : f003            >        beq skip1354
                       >        trap            ;failed not equal (non zero)
19b7 : 209524          >        jsr report_error
                       >
19ba :                 >skip1354
                       >
                        
                                rmbt 4
19ba : a9ff            >        lda #$ff
19bc : 8503            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
19be : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
19c0 : 48              >            pha         ;use stack to load status
19c1 : a9a5            >            lda #$a5     ;precharge accu
19c3 : 28              >            plp
                       >
19c4 : 4703            >        rmb 4,zpt
                       >        tst_a $a5,0
19c6 : 08              >            php         ;save flags
19c7 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
19c9 : f003            >        beq skip1360
                       >        trap            ;failed not equal (non zero)
19cb : 209524          >        jsr report_error
                       >
19ce :                 >skip1360
                       >
19ce : 68              >            pla         ;load status
19cf : 48              >            pha
                       >            cmp_flag 0
19d0 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
19d2 : f003            >        beq skip1363
                       >        trap            ;failed not equal (non zero)
19d4 : 209524          >        jsr report_error
                       >
19d7 :                 >skip1363
                       >
19d7 : 28              >            plp         ;restore status
                       >
19d8 : a503            >        lda zpt
19da : c9ef            >        cmp #$ff-(1<<4)
                       >        trap_ne     ;wrong bits set or cleared
19dc : f003            >        beq skip1365
                       >        trap            ;failed not equal (non zero)
19de : 209524          >        jsr report_error
                       >
19e1 :                 >skip1365
                       >
19e1 : a910            >        lda #1<<4
19e3 : 8503            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
19e5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
19e7 : 48              >            pha         ;use stack to load status
19e8 : a95a            >            lda #$5a     ;precharge accu
19ea : 28              >            plp
                       >
19eb : 4703            >        rmb 4,zpt
                       >        tst_a $5a,$ff
19ed : 08              >            php         ;save flags
19ee : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
19f0 : f003            >        beq skip1370
                       >        trap            ;failed not equal (non zero)
19f2 : 209524          >        jsr report_error
                       >
19f5 :                 >skip1370
                       >
19f5 : 68              >            pla         ;load status
19f6 : 48              >            pha
                       >            cmp_flag $ff
19f7 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
19f9 : f003            >        beq skip1373
                       >        trap            ;failed not equal (non zero)
19fb : 209524          >        jsr report_error
                       >
19fe :                 >skip1373
                       >
19fe : 28              >            plp         ;restore status
                       >
19ff : a503            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
1a01 : f003            >        beq skip1375
                       >        trap            ;failed not equal (non zero)
1a03 : 209524          >        jsr report_error
                       >
1a06 :                 >skip1375
                       >
                        
                                rmbt 5
1a06 : a9ff            >        lda #$ff
1a08 : 8503            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1a0a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1a0c : 48              >            pha         ;use stack to load status
1a0d : a9a5            >            lda #$a5     ;precharge accu
1a0f : 28              >            plp
                       >
1a10 : 5703            >        rmb 5,zpt
                       >        tst_a $a5,0
1a12 : 08              >            php         ;save flags
1a13 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1a15 : f003            >        beq skip1381
                       >        trap            ;failed not equal (non zero)
1a17 : 209524          >        jsr report_error
                       >
1a1a :                 >skip1381
                       >
1a1a : 68              >            pla         ;load status
1a1b : 48              >            pha
                       >            cmp_flag 0
1a1c : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1a1e : f003            >        beq skip1384
                       >        trap            ;failed not equal (non zero)
1a20 : 209524          >        jsr report_error
                       >
1a23 :                 >skip1384
                       >
1a23 : 28              >            plp         ;restore status
                       >
1a24 : a503            >        lda zpt
1a26 : c9df            >        cmp #$ff-(1<<5)
                       >        trap_ne     ;wrong bits set or cleared
1a28 : f003            >        beq skip1386
                       >        trap            ;failed not equal (non zero)
1a2a : 209524          >        jsr report_error
                       >
1a2d :                 >skip1386
                       >
1a2d : a920            >        lda #1<<5
1a2f : 8503            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
1a31 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a33 : 48              >            pha         ;use stack to load status
1a34 : a95a            >            lda #$5a     ;precharge accu
1a36 : 28              >            plp
                       >
1a37 : 5703            >        rmb 5,zpt
                       >        tst_a $5a,$ff
1a39 : 08              >            php         ;save flags
1a3a : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1a3c : f003            >        beq skip1391
                       >        trap            ;failed not equal (non zero)
1a3e : 209524          >        jsr report_error
                       >
1a41 :                 >skip1391
                       >
1a41 : 68              >            pla         ;load status
1a42 : 48              >            pha
                       >            cmp_flag $ff
1a43 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1a45 : f003            >        beq skip1394
                       >        trap            ;failed not equal (non zero)
1a47 : 209524          >        jsr report_error
                       >
1a4a :                 >skip1394
                       >
1a4a : 28              >            plp         ;restore status
                       >
1a4b : a503            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
1a4d : f003            >        beq skip1396
                       >        trap            ;failed not equal (non zero)
1a4f : 209524          >        jsr report_error
                       >
1a52 :                 >skip1396
                       >
                        
                                rmbt 6
1a52 : a9ff            >        lda #$ff
1a54 : 8503            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1a56 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1a58 : 48              >            pha         ;use stack to load status
1a59 : a9a5            >            lda #$a5     ;precharge accu
1a5b : 28              >            plp
                       >
1a5c : 6703            >        rmb 6,zpt
                       >        tst_a $a5,0
1a5e : 08              >            php         ;save flags
1a5f : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1a61 : f003            >        beq skip1402
                       >        trap            ;failed not equal (non zero)
1a63 : 209524          >        jsr report_error
                       >
1a66 :                 >skip1402
                       >
1a66 : 68              >            pla         ;load status
1a67 : 48              >            pha
                       >            cmp_flag 0
1a68 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1a6a : f003            >        beq skip1405
                       >        trap            ;failed not equal (non zero)
1a6c : 209524          >        jsr report_error
                       >
1a6f :                 >skip1405
                       >
1a6f : 28              >            plp         ;restore status
                       >
1a70 : a503            >        lda zpt
1a72 : c9bf            >        cmp #$ff-(1<<6)
                       >        trap_ne     ;wrong bits set or cleared
1a74 : f003            >        beq skip1407
                       >        trap            ;failed not equal (non zero)
1a76 : 209524          >        jsr report_error
                       >
1a79 :                 >skip1407
                       >
1a79 : a940            >        lda #1<<6
1a7b : 8503            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
1a7d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a7f : 48              >            pha         ;use stack to load status
1a80 : a95a            >            lda #$5a     ;precharge accu
1a82 : 28              >            plp
                       >
1a83 : 6703            >        rmb 6,zpt
                       >        tst_a $5a,$ff
1a85 : 08              >            php         ;save flags
1a86 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1a88 : f003            >        beq skip1412
                       >        trap            ;failed not equal (non zero)
1a8a : 209524          >        jsr report_error
                       >
1a8d :                 >skip1412
                       >
1a8d : 68              >            pla         ;load status
1a8e : 48              >            pha
                       >            cmp_flag $ff
1a8f : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1a91 : f003            >        beq skip1415
                       >        trap            ;failed not equal (non zero)
1a93 : 209524          >        jsr report_error
                       >
1a96 :                 >skip1415
                       >
1a96 : 28              >            plp         ;restore status
                       >
1a97 : a503            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
1a99 : f003            >        beq skip1417
                       >        trap            ;failed not equal (non zero)
1a9b : 209524          >        jsr report_error
                       >
1a9e :                 >skip1417
                       >
                        
                                rmbt 7
1a9e : a9ff            >        lda #$ff
1aa0 : 8503            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1aa2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1aa4 : 48              >            pha         ;use stack to load status
1aa5 : a9a5            >            lda #$a5     ;precharge accu
1aa7 : 28              >            plp
                       >
1aa8 : 7703            >        rmb 7,zpt
                       >        tst_a $a5,0
1aaa : 08              >            php         ;save flags
1aab : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1aad : f003            >        beq skip1423
                       >        trap            ;failed not equal (non zero)
1aaf : 209524          >        jsr report_error
                       >
1ab2 :                 >skip1423
                       >
1ab2 : 68              >            pla         ;load status
1ab3 : 48              >            pha
                       >            cmp_flag 0
1ab4 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1ab6 : f003            >        beq skip1426
                       >        trap            ;failed not equal (non zero)
1ab8 : 209524          >        jsr report_error
                       >
1abb :                 >skip1426
                       >
1abb : 28              >            plp         ;restore status
                       >
1abc : a503            >        lda zpt
1abe : c97f            >        cmp #$ff-(1<<7)
                       >        trap_ne     ;wrong bits set or cleared
1ac0 : f003            >        beq skip1428
                       >        trap            ;failed not equal (non zero)
1ac2 : 209524          >        jsr report_error
                       >
1ac5 :                 >skip1428
                       >
1ac5 : a980            >        lda #1<<7
1ac7 : 8503            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
1ac9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1acb : 48              >            pha         ;use stack to load status
1acc : a95a            >            lda #$5a     ;precharge accu
1ace : 28              >            plp
                       >
1acf : 7703            >        rmb 7,zpt
                       >        tst_a $5a,$ff
1ad1 : 08              >            php         ;save flags
1ad2 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1ad4 : f003            >        beq skip1433
                       >        trap            ;failed not equal (non zero)
1ad6 : 209524          >        jsr report_error
                       >
1ad9 :                 >skip1433
                       >
1ad9 : 68              >            pla         ;load status
1ada : 48              >            pha
                       >            cmp_flag $ff
1adb : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1add : f003            >        beq skip1436
                       >        trap            ;failed not equal (non zero)
1adf : 209524          >        jsr report_error
                       >
1ae2 :                 >skip1436
                       >
1ae2 : 28              >            plp         ;restore status
                       >
1ae3 : a503            >        lda zpt
                       >        trap_ne     ;wrong bits set or cleared
1ae5 : f003            >        beq skip1438
                       >        trap            ;failed not equal (non zero)
1ae7 : 209524          >        jsr report_error
                       >
1aea :                 >skip1438
                       >
                        
                                smbt 0
1aea : a9fe            >        lda #$ff-(1<<0)
1aec : 8503            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1aee : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1af0 : 48              >            pha         ;use stack to load status
1af1 : a9a5            >            lda #$a5     ;precharge accu
1af3 : 28              >            plp
                       >
1af4 : 8703            >        smb 0,zpt
                       >        tst_a $a5,0
1af6 : 08              >            php         ;save flags
1af7 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1af9 : f003            >        beq skip1444
                       >        trap            ;failed not equal (non zero)
1afb : 209524          >        jsr report_error
                       >
1afe :                 >skip1444
                       >
1afe : 68              >            pla         ;load status
1aff : 48              >            pha
                       >            cmp_flag 0
1b00 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1b02 : f003            >        beq skip1447
                       >        trap            ;failed not equal (non zero)
1b04 : 209524          >        jsr report_error
                       >
1b07 :                 >skip1447
                       >
1b07 : 28              >            plp         ;restore status
                       >
1b08 : a503            >        lda zpt
1b0a : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
1b0c : f003            >        beq skip1449
                       >        trap            ;failed not equal (non zero)
1b0e : 209524          >        jsr report_error
                       >
1b11 :                 >skip1449
                       >
1b11 : a900            >        lda #0
1b13 : 8503            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
1b15 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b17 : 48              >            pha         ;use stack to load status
1b18 : a95a            >            lda #$5a     ;precharge accu
1b1a : 28              >            plp
                       >
1b1b : 8703            >        smb 0,zpt
                       >        tst_a $5a,$ff
1b1d : 08              >            php         ;save flags
1b1e : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1b20 : f003            >        beq skip1454
                       >        trap            ;failed not equal (non zero)
1b22 : 209524          >        jsr report_error
                       >
1b25 :                 >skip1454
                       >
1b25 : 68              >            pla         ;load status
1b26 : 48              >            pha
                       >            cmp_flag $ff
1b27 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1b29 : f003            >        beq skip1457
                       >        trap            ;failed not equal (non zero)
1b2b : 209524          >        jsr report_error
                       >
1b2e :                 >skip1457
                       >
1b2e : 28              >            plp         ;restore status
                       >
1b2f : a503            >        lda zpt
1b31 : c901            >        cmp #1<<0
                       >        trap_ne     ;wrong bits set or cleared
1b33 : f003            >        beq skip1459
                       >        trap            ;failed not equal (non zero)
1b35 : 209524          >        jsr report_error
                       >
1b38 :                 >skip1459
                       >
                        
                                smbt 1
1b38 : a9fd            >        lda #$ff-(1<<1)
1b3a : 8503            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1b3c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b3e : 48              >            pha         ;use stack to load status
1b3f : a9a5            >            lda #$a5     ;precharge accu
1b41 : 28              >            plp
                       >
1b42 : 9703            >        smb 1,zpt
                       >        tst_a $a5,0
1b44 : 08              >            php         ;save flags
1b45 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1b47 : f003            >        beq skip1465
                       >        trap            ;failed not equal (non zero)
1b49 : 209524          >        jsr report_error
                       >
1b4c :                 >skip1465
                       >
1b4c : 68              >            pla         ;load status
1b4d : 48              >            pha
                       >            cmp_flag 0
1b4e : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1b50 : f003            >        beq skip1468
                       >        trap            ;failed not equal (non zero)
1b52 : 209524          >        jsr report_error
                       >
1b55 :                 >skip1468
                       >
1b55 : 28              >            plp         ;restore status
                       >
1b56 : a503            >        lda zpt
1b58 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
1b5a : f003            >        beq skip1470
                       >        trap            ;failed not equal (non zero)
1b5c : 209524          >        jsr report_error
                       >
1b5f :                 >skip1470
                       >
1b5f : a900            >        lda #0
1b61 : 8503            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
1b63 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b65 : 48              >            pha         ;use stack to load status
1b66 : a95a            >            lda #$5a     ;precharge accu
1b68 : 28              >            plp
                       >
1b69 : 9703            >        smb 1,zpt
                       >        tst_a $5a,$ff
1b6b : 08              >            php         ;save flags
1b6c : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1b6e : f003            >        beq skip1475
                       >        trap            ;failed not equal (non zero)
1b70 : 209524          >        jsr report_error
                       >
1b73 :                 >skip1475
                       >
1b73 : 68              >            pla         ;load status
1b74 : 48              >            pha
                       >            cmp_flag $ff
1b75 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1b77 : f003            >        beq skip1478
                       >        trap            ;failed not equal (non zero)
1b79 : 209524          >        jsr report_error
                       >
1b7c :                 >skip1478
                       >
1b7c : 28              >            plp         ;restore status
                       >
1b7d : a503            >        lda zpt
1b7f : c902            >        cmp #1<<1
                       >        trap_ne     ;wrong bits set or cleared
1b81 : f003            >        beq skip1480
                       >        trap            ;failed not equal (non zero)
1b83 : 209524          >        jsr report_error
                       >
1b86 :                 >skip1480
                       >
                        
                                smbt 2
1b86 : a9fb            >        lda #$ff-(1<<2)
1b88 : 8503            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1b8a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b8c : 48              >            pha         ;use stack to load status
1b8d : a9a5            >            lda #$a5     ;precharge accu
1b8f : 28              >            plp
                       >
1b90 : a703            >        smb 2,zpt
                       >        tst_a $a5,0
1b92 : 08              >            php         ;save flags
1b93 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1b95 : f003            >        beq skip1486
                       >        trap            ;failed not equal (non zero)
1b97 : 209524          >        jsr report_error
                       >
1b9a :                 >skip1486
                       >
1b9a : 68              >            pla         ;load status
1b9b : 48              >            pha
                       >            cmp_flag 0
1b9c : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1b9e : f003            >        beq skip1489
                       >        trap            ;failed not equal (non zero)
1ba0 : 209524          >        jsr report_error
                       >
1ba3 :                 >skip1489
                       >
1ba3 : 28              >            plp         ;restore status
                       >
1ba4 : a503            >        lda zpt
1ba6 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
1ba8 : f003            >        beq skip1491
                       >        trap            ;failed not equal (non zero)
1baa : 209524          >        jsr report_error
                       >
1bad :                 >skip1491
                       >
1bad : a900            >        lda #0
1baf : 8503            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
1bb1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1bb3 : 48              >            pha         ;use stack to load status
1bb4 : a95a            >            lda #$5a     ;precharge accu
1bb6 : 28              >            plp
                       >
1bb7 : a703            >        smb 2,zpt
                       >        tst_a $5a,$ff
1bb9 : 08              >            php         ;save flags
1bba : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1bbc : f003            >        beq skip1496
                       >        trap            ;failed not equal (non zero)
1bbe : 209524          >        jsr report_error
                       >
1bc1 :                 >skip1496
                       >
1bc1 : 68              >            pla         ;load status
1bc2 : 48              >            pha
                       >            cmp_flag $ff
1bc3 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1bc5 : f003            >        beq skip1499
                       >        trap            ;failed not equal (non zero)
1bc7 : 209524          >        jsr report_error
                       >
1bca :                 >skip1499
                       >
1bca : 28              >            plp         ;restore status
                       >
1bcb : a503            >        lda zpt
1bcd : c904            >        cmp #1<<2
                       >        trap_ne     ;wrong bits set or cleared
1bcf : f003            >        beq skip1501
                       >        trap            ;failed not equal (non zero)
1bd1 : 209524          >        jsr report_error
                       >
1bd4 :                 >skip1501
                       >
                        
                                smbt 3
1bd4 : a9f7            >        lda #$ff-(1<<3)
1bd6 : 8503            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1bd8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1bda : 48              >            pha         ;use stack to load status
1bdb : a9a5            >            lda #$a5     ;precharge accu
1bdd : 28              >            plp
                       >
1bde : b703            >        smb 3,zpt
                       >        tst_a $a5,0
1be0 : 08              >            php         ;save flags
1be1 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1be3 : f003            >        beq skip1507
                       >        trap            ;failed not equal (non zero)
1be5 : 209524          >        jsr report_error
                       >
1be8 :                 >skip1507
                       >
1be8 : 68              >            pla         ;load status
1be9 : 48              >            pha
                       >            cmp_flag 0
1bea : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1bec : f003            >        beq skip1510
                       >        trap            ;failed not equal (non zero)
1bee : 209524          >        jsr report_error
                       >
1bf1 :                 >skip1510
                       >
1bf1 : 28              >            plp         ;restore status
                       >
1bf2 : a503            >        lda zpt
1bf4 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
1bf6 : f003            >        beq skip1512
                       >        trap            ;failed not equal (non zero)
1bf8 : 209524          >        jsr report_error
                       >
1bfb :                 >skip1512
                       >
1bfb : a900            >        lda #0
1bfd : 8503            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
1bff : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c01 : 48              >            pha         ;use stack to load status
1c02 : a95a            >            lda #$5a     ;precharge accu
1c04 : 28              >            plp
                       >
1c05 : b703            >        smb 3,zpt
                       >        tst_a $5a,$ff
1c07 : 08              >            php         ;save flags
1c08 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1c0a : f003            >        beq skip1517
                       >        trap            ;failed not equal (non zero)
1c0c : 209524          >        jsr report_error
                       >
1c0f :                 >skip1517
                       >
1c0f : 68              >            pla         ;load status
1c10 : 48              >            pha
                       >            cmp_flag $ff
1c11 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1c13 : f003            >        beq skip1520
                       >        trap            ;failed not equal (non zero)
1c15 : 209524          >        jsr report_error
                       >
1c18 :                 >skip1520
                       >
1c18 : 28              >            plp         ;restore status
                       >
1c19 : a503            >        lda zpt
1c1b : c908            >        cmp #1<<3
                       >        trap_ne     ;wrong bits set or cleared
1c1d : f003            >        beq skip1522
                       >        trap            ;failed not equal (non zero)
1c1f : 209524          >        jsr report_error
                       >
1c22 :                 >skip1522
                       >
                        
                                smbt 4
1c22 : a9ef            >        lda #$ff-(1<<4)
1c24 : 8503            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1c26 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1c28 : 48              >            pha         ;use stack to load status
1c29 : a9a5            >            lda #$a5     ;precharge accu
1c2b : 28              >            plp
                       >
1c2c : c703            >        smb 4,zpt
                       >        tst_a $a5,0
1c2e : 08              >            php         ;save flags
1c2f : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1c31 : f003            >        beq skip1528
                       >        trap            ;failed not equal (non zero)
1c33 : 209524          >        jsr report_error
                       >
1c36 :                 >skip1528
                       >
1c36 : 68              >            pla         ;load status
1c37 : 48              >            pha
                       >            cmp_flag 0
1c38 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1c3a : f003            >        beq skip1531
                       >        trap            ;failed not equal (non zero)
1c3c : 209524          >        jsr report_error
                       >
1c3f :                 >skip1531
                       >
1c3f : 28              >            plp         ;restore status
                       >
1c40 : a503            >        lda zpt
1c42 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
1c44 : f003            >        beq skip1533
                       >        trap            ;failed not equal (non zero)
1c46 : 209524          >        jsr report_error
                       >
1c49 :                 >skip1533
                       >
1c49 : a900            >        lda #0
1c4b : 8503            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
1c4d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c4f : 48              >            pha         ;use stack to load status
1c50 : a95a            >            lda #$5a     ;precharge accu
1c52 : 28              >            plp
                       >
1c53 : c703            >        smb 4,zpt
                       >        tst_a $5a,$ff
1c55 : 08              >            php         ;save flags
1c56 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1c58 : f003            >        beq skip1538
                       >        trap            ;failed not equal (non zero)
1c5a : 209524          >        jsr report_error
                       >
1c5d :                 >skip1538
                       >
1c5d : 68              >            pla         ;load status
1c5e : 48              >            pha
                       >            cmp_flag $ff
1c5f : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1c61 : f003            >        beq skip1541
                       >        trap            ;failed not equal (non zero)
1c63 : 209524          >        jsr report_error
                       >
1c66 :                 >skip1541
                       >
1c66 : 28              >            plp         ;restore status
                       >
1c67 : a503            >        lda zpt
1c69 : c910            >        cmp #1<<4
                       >        trap_ne     ;wrong bits set or cleared
1c6b : f003            >        beq skip1543
                       >        trap            ;failed not equal (non zero)
1c6d : 209524          >        jsr report_error
                       >
1c70 :                 >skip1543
                       >
                        
                                smbt 5
1c70 : a9df            >        lda #$ff-(1<<5)
1c72 : 8503            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1c74 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1c76 : 48              >            pha         ;use stack to load status
1c77 : a9a5            >            lda #$a5     ;precharge accu
1c79 : 28              >            plp
                       >
1c7a : d703            >        smb 5,zpt
                       >        tst_a $a5,0
1c7c : 08              >            php         ;save flags
1c7d : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1c7f : f003            >        beq skip1549
                       >        trap            ;failed not equal (non zero)
1c81 : 209524          >        jsr report_error
                       >
1c84 :                 >skip1549
                       >
1c84 : 68              >            pla         ;load status
1c85 : 48              >            pha
                       >            cmp_flag 0
1c86 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1c88 : f003            >        beq skip1552
                       >        trap            ;failed not equal (non zero)
1c8a : 209524          >        jsr report_error
                       >
1c8d :                 >skip1552
                       >
1c8d : 28              >            plp         ;restore status
                       >
1c8e : a503            >        lda zpt
1c90 : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
1c92 : f003            >        beq skip1554
                       >        trap            ;failed not equal (non zero)
1c94 : 209524          >        jsr report_error
                       >
1c97 :                 >skip1554
                       >
1c97 : a900            >        lda #0
1c99 : 8503            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
1c9b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c9d : 48              >            pha         ;use stack to load status
1c9e : a95a            >            lda #$5a     ;precharge accu
1ca0 : 28              >            plp
                       >
1ca1 : d703            >        smb 5,zpt
                       >        tst_a $5a,$ff
1ca3 : 08              >            php         ;save flags
1ca4 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1ca6 : f003            >        beq skip1559
                       >        trap            ;failed not equal (non zero)
1ca8 : 209524          >        jsr report_error
                       >
1cab :                 >skip1559
                       >
1cab : 68              >            pla         ;load status
1cac : 48              >            pha
                       >            cmp_flag $ff
1cad : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1caf : f003            >        beq skip1562
                       >        trap            ;failed not equal (non zero)
1cb1 : 209524          >        jsr report_error
                       >
1cb4 :                 >skip1562
                       >
1cb4 : 28              >            plp         ;restore status
                       >
1cb5 : a503            >        lda zpt
1cb7 : c920            >        cmp #1<<5
                       >        trap_ne     ;wrong bits set or cleared
1cb9 : f003            >        beq skip1564
                       >        trap            ;failed not equal (non zero)
1cbb : 209524          >        jsr report_error
                       >
1cbe :                 >skip1564
                       >
                        
                                smbt 6
1cbe : a9bf            >        lda #$ff-(1<<6)
1cc0 : 8503            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1cc2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1cc4 : 48              >            pha         ;use stack to load status
1cc5 : a9a5            >            lda #$a5     ;precharge accu
1cc7 : 28              >            plp
                       >
1cc8 : e703            >        smb 6,zpt
                       >        tst_a $a5,0
1cca : 08              >            php         ;save flags
1ccb : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1ccd : f003            >        beq skip1570
                       >        trap            ;failed not equal (non zero)
1ccf : 209524          >        jsr report_error
                       >
1cd2 :                 >skip1570
                       >
1cd2 : 68              >            pla         ;load status
1cd3 : 48              >            pha
                       >            cmp_flag 0
1cd4 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1cd6 : f003            >        beq skip1573
                       >        trap            ;failed not equal (non zero)
1cd8 : 209524          >        jsr report_error
                       >
1cdb :                 >skip1573
                       >
1cdb : 28              >            plp         ;restore status
                       >
1cdc : a503            >        lda zpt
1cde : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
1ce0 : f003            >        beq skip1575
                       >        trap            ;failed not equal (non zero)
1ce2 : 209524          >        jsr report_error
                       >
1ce5 :                 >skip1575
                       >
1ce5 : a900            >        lda #0
1ce7 : 8503            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
1ce9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1ceb : 48              >            pha         ;use stack to load status
1cec : a95a            >            lda #$5a     ;precharge accu
1cee : 28              >            plp
                       >
1cef : e703            >        smb 6,zpt
                       >        tst_a $5a,$ff
1cf1 : 08              >            php         ;save flags
1cf2 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1cf4 : f003            >        beq skip1580
                       >        trap            ;failed not equal (non zero)
1cf6 : 209524          >        jsr report_error
                       >
1cf9 :                 >skip1580
                       >
1cf9 : 68              >            pla         ;load status
1cfa : 48              >            pha
                       >            cmp_flag $ff
1cfb : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1cfd : f003            >        beq skip1583
                       >        trap            ;failed not equal (non zero)
1cff : 209524          >        jsr report_error
                       >
1d02 :                 >skip1583
                       >
1d02 : 28              >            plp         ;restore status
                       >
1d03 : a503            >        lda zpt
1d05 : c940            >        cmp #1<<6
                       >        trap_ne     ;wrong bits set or cleared
1d07 : f003            >        beq skip1585
                       >        trap            ;failed not equal (non zero)
1d09 : 209524          >        jsr report_error
                       >
1d0c :                 >skip1585
                       >
                        
                                smbt 7
1d0c : a97f            >        lda #$ff-(1<<7)
1d0e : 8503            >        sta zpt
                       >        set_a $a5,0
                       >            load_flag 0
1d10 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d12 : 48              >            pha         ;use stack to load status
1d13 : a9a5            >            lda #$a5     ;precharge accu
1d15 : 28              >            plp
                       >
1d16 : f703            >        smb 7,zpt
                       >        tst_a $a5,0
1d18 : 08              >            php         ;save flags
1d19 : c9a5            >            cmp #$a5     ;test result
                       >            trap_ne
1d1b : f003            >        beq skip1591
                       >        trap            ;failed not equal (non zero)
1d1d : 209524          >        jsr report_error
                       >
1d20 :                 >skip1591
                       >
1d20 : 68              >            pla         ;load status
1d21 : 48              >            pha
                       >            cmp_flag 0
1d22 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1d24 : f003            >        beq skip1594
                       >        trap            ;failed not equal (non zero)
1d26 : 209524          >        jsr report_error
                       >
1d29 :                 >skip1594
                       >
1d29 : 28              >            plp         ;restore status
                       >
1d2a : a503            >        lda zpt
1d2c : c9ff            >        cmp #$ff
                       >        trap_ne     ;wrong bits set or cleared
1d2e : f003            >        beq skip1596
                       >        trap            ;failed not equal (non zero)
1d30 : 209524          >        jsr report_error
                       >
1d33 :                 >skip1596
                       >
1d33 : a900            >        lda #0
1d35 : 8503            >        sta zpt
                       >        set_a $5a,$ff
                       >            load_flag $ff
1d37 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d39 : 48              >            pha         ;use stack to load status
1d3a : a95a            >            lda #$5a     ;precharge accu
1d3c : 28              >            plp
                       >
1d3d : f703            >        smb 7,zpt
                       >        tst_a $5a,$ff
1d3f : 08              >            php         ;save flags
1d40 : c95a            >            cmp #$5a     ;test result
                       >            trap_ne
1d42 : f003            >        beq skip1601
                       >        trap            ;failed not equal (non zero)
1d44 : 209524          >        jsr report_error
                       >
1d47 :                 >skip1601
                       >
1d47 : 68              >            pla         ;load status
1d48 : 48              >            pha
                       >            cmp_flag $ff
1d49 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1d4b : f003            >        beq skip1604
                       >        trap            ;failed not equal (non zero)
1d4d : 209524          >        jsr report_error
                       >
1d50 :                 >skip1604
                       >
1d50 : 28              >            plp         ;restore status
                       >
1d51 : a503            >        lda zpt
1d53 : c980            >        cmp #1<<7
                       >        trap_ne     ;wrong bits set or cleared
1d55 : f003            >        beq skip1606
                       >        trap            ;failed not equal (non zero)
1d57 : 209524          >        jsr report_error
                       >
1d5a :                 >skip1606
                       >
                        
1d5a : e0ba                     cpx #$ba
                                trap_ne     ;x altered during test
1d5c : f003            >        beq skip1608
                       >        trap            ;failed not equal (non zero)
1d5e : 209524          >        jsr report_error
                       >
1d61 :                 >skip1608
                        
1d61 : c0d0                     cpy #$d0
                                trap_ne     ;y altered during test
1d63 : f003            >        beq skip1610
                       >        trap            ;failed not equal (non zero)
1d65 : 209524          >        jsr report_error
                       >
1d68 :                 >skip1610
                        
1d68 : ba                       tsx
1d69 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
1d6b : f003            >        beq skip1612
                       >        trap            ;failed not equal (non zero)
1d6d : 209524          >        jsr report_error
                       >
1d70 :                 >skip1612
                        
                                next_test
1d70 : ad0202          >            lda test_case   ;previous test
1d73 : c910            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1d75 : f003            >        beq skip1615
                       >        trap            ;failed not equal (non zero)
1d77 : 209524          >        jsr report_error
                       >
1d7a :                 >skip1615
                       >
0011 =                 >test_num = test_num + 1
1d7a : a911            >            lda #test_num   ;*** next tests' number
1d7c : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                            endif        
                                 
                        ; testing CMP - (zp)         
1d7f : a2de                     ldx #$de    ;protect x & y
1d81 : a0ad                     ldy #$ad
                                set_a $80,0
                       >            load_flag 0
1d83 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d85 : 48              >            pha         ;use stack to load status
1d86 : a980            >            lda #$80     ;precharge accu
1d88 : 28              >            plp
                        
1d89 : d223                     cmp (ind1+8)
                                tst_a $80,fc
1d8b : 08              >            php         ;save flags
1d8c : c980            >            cmp #$80     ;test result
                       >            trap_ne
1d8e : f003            >        beq skip1620
                       >        trap            ;failed not equal (non zero)
1d90 : 209524          >        jsr report_error
                       >
1d93 :                 >skip1620
                       >
1d93 : 68              >            pla         ;load status
1d94 : 48              >            pha
                       >            cmp_flag fc
1d95 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1d97 : f003            >        beq skip1623
                       >        trap            ;failed not equal (non zero)
1d99 : 209524          >        jsr report_error
                       >
1d9c :                 >skip1623
                       >
1d9c : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
1d9d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d9f : 48              >            pha         ;use stack to load status
1da0 : a97f            >            lda #$7f     ;precharge accu
1da2 : 28              >            plp
                        
1da3 : d223                     cmp (ind1+8)
                                tst_a $7f,fzc
1da5 : 08              >            php         ;save flags
1da6 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
1da8 : f003            >        beq skip1628
                       >        trap            ;failed not equal (non zero)
1daa : 209524          >        jsr report_error
                       >
1dad :                 >skip1628
                       >
1dad : 68              >            pla         ;load status
1dae : 48              >            pha
                       >            cmp_flag fzc
1daf : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1db1 : f003            >        beq skip1631
                       >        trap            ;failed not equal (non zero)
1db3 : 209524          >        jsr report_error
                       >
1db6 :                 >skip1631
                       >
1db6 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
1db7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1db9 : 48              >            pha         ;use stack to load status
1dba : a97e            >            lda #$7e     ;precharge accu
1dbc : 28              >            plp
                        
1dbd : d223                     cmp (ind1+8)
                                tst_a $7e,fn
1dbf : 08              >            php         ;save flags
1dc0 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
1dc2 : f003            >        beq skip1636
                       >        trap            ;failed not equal (non zero)
1dc4 : 209524          >        jsr report_error
                       >
1dc7 :                 >skip1636
                       >
1dc7 : 68              >            pla         ;load status
1dc8 : 48              >            pha
                       >            cmp_flag fn
1dc9 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1dcb : f003            >        beq skip1639
                       >        trap            ;failed not equal (non zero)
1dcd : 209524          >        jsr report_error
                       >
1dd0 :                 >skip1639
                       >
1dd0 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
1dd1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1dd3 : 48              >            pha         ;use stack to load status
1dd4 : a980            >            lda #$80     ;precharge accu
1dd6 : 28              >            plp
                        
1dd7 : d223                     cmp (ind1+8)
                                tst_a $80,~fnz
1dd9 : 08              >            php         ;save flags
1dda : c980            >            cmp #$80     ;test result
                       >            trap_ne
1ddc : f003            >        beq skip1644
                       >        trap            ;failed not equal (non zero)
1dde : 209524          >        jsr report_error
                       >
1de1 :                 >skip1644
                       >
1de1 : 68              >            pla         ;load status
1de2 : 48              >            pha
                       >            cmp_flag ~fnz
1de3 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1de5 : f003            >        beq skip1647
                       >        trap            ;failed not equal (non zero)
1de7 : 209524          >        jsr report_error
                       >
1dea :                 >skip1647
                       >
1dea : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
1deb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1ded : 48              >            pha         ;use stack to load status
1dee : a97f            >            lda #$7f     ;precharge accu
1df0 : 28              >            plp
                        
1df1 : d223                     cmp (ind1+8)
                                tst_a $7f,~fn
1df3 : 08              >            php         ;save flags
1df4 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
1df6 : f003            >        beq skip1652
                       >        trap            ;failed not equal (non zero)
1df8 : 209524          >        jsr report_error
                       >
1dfb :                 >skip1652
                       >
1dfb : 68              >            pla         ;load status
1dfc : 48              >            pha
                       >            cmp_flag ~fn
1dfd : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1dff : f003            >        beq skip1655
                       >        trap            ;failed not equal (non zero)
1e01 : 209524          >        jsr report_error
                       >
1e04 :                 >skip1655
                       >
1e04 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
1e05 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e07 : 48              >            pha         ;use stack to load status
1e08 : a97e            >            lda #$7e     ;precharge accu
1e0a : 28              >            plp
                        
1e0b : d223                     cmp (ind1+8)
                                tst_a $7e,~fzc
1e0d : 08              >            php         ;save flags
1e0e : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
1e10 : f003            >        beq skip1660
                       >        trap            ;failed not equal (non zero)
1e12 : 209524          >        jsr report_error
                       >
1e15 :                 >skip1660
                       >
1e15 : 68              >            pla         ;load status
1e16 : 48              >            pha
                       >            cmp_flag ~fzc
1e17 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1e19 : f003            >        beq skip1663
                       >        trap            ;failed not equal (non zero)
1e1b : 209524          >        jsr report_error
                       >
1e1e :                 >skip1663
                       >
1e1e : 28              >            plp         ;restore status
                        
1e1f : e0de                     cpx #$de
                                trap_ne     ;x altered during test
1e21 : f003            >        beq skip1665
                       >        trap            ;failed not equal (non zero)
1e23 : 209524          >        jsr report_error
                       >
1e26 :                 >skip1665
                        
1e26 : c0ad                     cpy #$ad
                                trap_ne     ;y altered during test 
1e28 : f003            >        beq skip1667
                       >        trap            ;failed not equal (non zero)
1e2a : 209524          >        jsr report_error
                       >
1e2d :                 >skip1667
                        
1e2d : ba                       tsx
1e2e : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
1e30 : f003            >        beq skip1669
                       >        trap            ;failed not equal (non zero)
1e32 : 209524          >        jsr report_error
                       >
1e35 :                 >skip1669
                        
                                next_test
1e35 : ad0202          >            lda test_case   ;previous test
1e38 : c911            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1e3a : f003            >        beq skip1672
                       >        trap            ;failed not equal (non zero)
1e3c : 209524          >        jsr report_error
                       >
1e3f :                 >skip1672
                       >
0012 =                 >test_num = test_num + 1
1e3f : a912            >            lda #test_num   ;*** next tests' number
1e41 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing logical instructions - AND EOR ORA (zp)
1e44 : a242                     ldx #$42    ;protect x & y
                        
1e46 : a000                     ldy #0      ;AND
1e48 : a531                     lda indAN   ;set indirect address
1e4a : 8503                     sta zpt
1e4c : a532                     lda indAN+1
1e4e : 8504                     sta zpt+1
1e50 :                  tand1
                                set_ay  absANa,0
                       >            load_flag 0
1e50 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1e52 : 48              >            pha         ;use stack to load status
1e53 : b95302          >            lda absANa,y    ;precharge accu
1e56 : 28              >            plp
                        
1e57 : 3203                     and (zpt)
                                tst_ay  absrlo,absflo,0
1e59 : 08              >            php         ;save flags
1e5a : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
1e5d : f003            >        beq skip1677
                       >        trap            ;failed not equal (non zero)
1e5f : 209524          >        jsr report_error
                       >
1e62 :                 >skip1677
                       >
1e62 : 68              >            pla         ;load status
                       >            eor_flag 0
1e63 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
1e65 : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
1e68 : f003            >        beq skip1680
                       >        trap            ;failed not equal (non zero)
1e6a : 209524          >        jsr report_error
                       >
1e6d :                 >skip1680
                       >
                        
1e6d : e603                     inc zpt
1e6f : c8                       iny
1e70 : c004                     cpy #4
1e72 : d0dc                     bne tand1
1e74 : 88                       dey
1e75 : c603                     dec zpt
1e77 :                  tand2
                                set_ay  absANa,$ff
                       >            load_flag $ff
1e77 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e79 : 48              >            pha         ;use stack to load status
1e7a : b95302          >            lda absANa,y    ;precharge accu
1e7d : 28              >            plp
                        
1e7e : 3203                     and (zpt)
                                tst_ay  absrlo,absflo,$ff-fnz
1e80 : 08              >            php         ;save flags
1e81 : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
1e84 : f003            >        beq skip1685
                       >        trap            ;failed not equal (non zero)
1e86 : 209524          >        jsr report_error
                       >
1e89 :                 >skip1685
                       >
1e89 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
1e8a : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
1e8c : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
1e8f : f003            >        beq skip1688
                       >        trap            ;failed not equal (non zero)
1e91 : 209524          >        jsr report_error
                       >
1e94 :                 >skip1688
                       >
                        
1e94 : c603                     dec zpt
1e96 : 88                       dey
1e97 : 10de                     bpl tand2
                        
1e99 : a000                     ldy #0      ;EOR
1e9b : a539                     lda indEO   ;set indirect address
1e9d : 8503                     sta zpt
1e9f : a53a                     lda indEO+1
1ea1 : 8504                     sta zpt+1
1ea3 :                  teor1
                                set_ay  absEOa,0
                       >            load_flag 0
1ea3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ea5 : 48              >            pha         ;use stack to load status
1ea6 : b95702          >            lda absEOa,y    ;precharge accu
1ea9 : 28              >            plp
                        
1eaa : 5203                     eor (zpt)
                                tst_ay  absrlo,absflo,0
1eac : 08              >            php         ;save flags
1ead : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
1eb0 : f003            >        beq skip1693
                       >        trap            ;failed not equal (non zero)
1eb2 : 209524          >        jsr report_error
                       >
1eb5 :                 >skip1693
                       >
1eb5 : 68              >            pla         ;load status
                       >            eor_flag 0
1eb6 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
1eb8 : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
1ebb : f003            >        beq skip1696
                       >        trap            ;failed not equal (non zero)
1ebd : 209524          >        jsr report_error
                       >
1ec0 :                 >skip1696
                       >
                        
1ec0 : e603                     inc zpt
1ec2 : c8                       iny
1ec3 : c004                     cpy #4
1ec5 : d0dc                     bne teor1
1ec7 : 88                       dey
1ec8 : c603                     dec zpt
1eca :                  teor2
                                set_ay  absEOa,$ff
                       >            load_flag $ff
1eca : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1ecc : 48              >            pha         ;use stack to load status
1ecd : b95702          >            lda absEOa,y    ;precharge accu
1ed0 : 28              >            plp
                        
1ed1 : 5203                     eor (zpt)
                                tst_ay  absrlo,absflo,$ff-fnz
1ed3 : 08              >            php         ;save flags
1ed4 : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
1ed7 : f003            >        beq skip1701
                       >        trap            ;failed not equal (non zero)
1ed9 : 209524          >        jsr report_error
                       >
1edc :                 >skip1701
                       >
1edc : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
1edd : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
1edf : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
1ee2 : f003            >        beq skip1704
                       >        trap            ;failed not equal (non zero)
1ee4 : 209524          >        jsr report_error
                       >
1ee7 :                 >skip1704
                       >
                        
1ee7 : c603                     dec zpt
1ee9 : 88                       dey
1eea : 10de                     bpl teor2
                        
1eec : a000                     ldy #0      ;ORA
1eee : a541                     lda indOR   ;set indirect address
1ef0 : 8503                     sta zpt
1ef2 : a542                     lda indOR+1
1ef4 : 8504                     sta zpt+1
1ef6 :                  tora1
                                set_ay  absORa,0
                       >            load_flag 0
1ef6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ef8 : 48              >            pha         ;use stack to load status
1ef9 : b94f02          >            lda absORa,y    ;precharge accu
1efc : 28              >            plp
                        
1efd : 1203                     ora (zpt)
                                tst_ay  absrlo,absflo,0
1eff : 08              >            php         ;save flags
1f00 : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
1f03 : f003            >        beq skip1709
                       >        trap            ;failed not equal (non zero)
1f05 : 209524          >        jsr report_error
                       >
1f08 :                 >skip1709
                       >
1f08 : 68              >            pla         ;load status
                       >            eor_flag 0
1f09 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
1f0b : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
1f0e : f003            >        beq skip1712
                       >        trap            ;failed not equal (non zero)
1f10 : 209524          >        jsr report_error
                       >
1f13 :                 >skip1712
                       >
                        
1f13 : e603                     inc zpt
1f15 : c8                       iny
1f16 : c004                     cpy #4
1f18 : d0dc                     bne tora1
1f1a : 88                       dey
1f1b : c603                     dec zpt
1f1d :                  tora2
                                set_ay  absORa,$ff
                       >            load_flag $ff
1f1d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1f1f : 48              >            pha         ;use stack to load status
1f20 : b94f02          >            lda absORa,y    ;precharge accu
1f23 : 28              >            plp
                        
1f24 : 1203                     ora (zpt)
                                tst_ay  absrlo,absflo,$ff-fnz
1f26 : 08              >            php         ;save flags
1f27 : d95b02          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
1f2a : f003            >        beq skip1717
                       >        trap            ;failed not equal (non zero)
1f2c : 209524          >        jsr report_error
                       >
1f2f :                 >skip1717
                       >
1f2f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
1f30 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
1f32 : d95f02          >            cmp absflo,y    ;test flags
                       >            trap_ne
1f35 : f003            >        beq skip1720
                       >        trap            ;failed not equal (non zero)
1f37 : 209524          >        jsr report_error
                       >
1f3a :                 >skip1720
                       >
                        
1f3a : c603                     dec zpt
1f3c : 88                       dey
1f3d : 10de                     bpl tora2
                        
1f3f : e042                     cpx #$42
                                trap_ne     ;x altered during test
1f41 : f003            >        beq skip1722
                       >        trap            ;failed not equal (non zero)
1f43 : 209524          >        jsr report_error
                       >
1f46 :                 >skip1722
                        
1f46 : ba                       tsx
1f47 : e0ff                     cpx #$ff
                                trap_ne     ;sp push/pop mismatch
1f49 : f003            >        beq skip1724
                       >        trap            ;failed not equal (non zero)
1f4b : 209524          >        jsr report_error
                       >
1f4e :                 >skip1724
                        
                                next_test
1f4e : ad0202          >            lda test_case   ;previous test
1f51 : c912            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1f53 : f003            >        beq skip1727
                       >        trap            ;failed not equal (non zero)
1f55 : 209524          >        jsr report_error
                       >
1f58 :                 >skip1727
                       >
0013 =                 >test_num = test_num + 1
1f58 : a913            >            lda #test_num   ;*** next tests' number
1f5a : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                            if I_flag = 3
1f5d : 58                       cli
                            endif                
                        
                        ; full binary add/subtract test - (zp) only
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
1f5e : d8                       cld
1f5f : a205                     ldx #ad2        ;for indexed test
1f61 : a0ff                     ldy #$ff        ;max range
1f63 : a900                     lda #0          ;start with adding zeroes & no carry
1f65 : 8503                     sta adfc        ;carry in - for diag
1f67 : 8504                     sta ad1         ;operand 1 - accumulator
1f69 : 8505                     sta ad2         ;operand 2 - memory or immediate
1f6b : 8d0502                   sta ada2        ;non zp
1f6e : 8506                     sta adrl        ;expected result bits 0-7
1f70 : 8507                     sta adrh        ;expected result bit 8 (carry out)
1f72 : a9ff                     lda #$ff        ;complemented operand 2 for subtract
1f74 : 8509                     sta sb2
1f76 : 8d0602                   sta sba2        ;non zp
1f79 : a902                     lda #2          ;expected Z-flag
1f7b : 8508                     sta adrf
1f7d : 18               tadd    clc             ;test with carry clear
1f7e : 20bf22                   jsr chkadd
1f81 : e603                     inc adfc        ;now with carry
1f83 : e606                     inc adrl        ;result +1
1f85 : 08                       php             ;save N & Z from low result
1f86 : 08                       php
1f87 : 68                       pla             ;accu holds expected flags
1f88 : 2982                     and #$82        ;mask N & Z
1f8a : 28                       plp
1f8b : d002                     bne tadd1
1f8d : e607                     inc adrh        ;result bit 8 - carry
1f8f : 0507             tadd1   ora adrh        ;merge C to expected flags
1f91 : 8508                     sta adrf        ;save expected flags except overflow
1f93 : 38                       sec             ;test with carry set
1f94 : 20bf22                   jsr chkadd
1f97 : c603                     dec adfc        ;same for operand +1 but no carry
1f99 : e604                     inc ad1
1f9b : d0e0                     bne tadd        ;iterate op1
1f9d : a900                     lda #0          ;preset result to op2 when op1 = 0
1f9f : 8507                     sta adrh
1fa1 : ee0502                   inc ada2
1fa4 : e605                     inc ad2
1fa6 : 08                       php             ;save NZ as operand 2 becomes the new result
1fa7 : 68                       pla
1fa8 : 2982                     and #$82        ;mask N00000Z0
1faa : 8508                     sta adrf        ;no need to check carry as we are adding to 0
1fac : c609                     dec sb2         ;complement subtract operand 2
1fae : ce0602                   dec sba2
1fb1 : a505                     lda ad2         
1fb3 : 8506                     sta adrl
1fb5 : d0c6                     bne tadd        ;iterate op2
                        
1fb7 : e005                     cpx #ad2
                                trap_ne         ;x altered during test
1fb9 : f003            >        beq skip1729
                       >        trap            ;failed not equal (non zero)
1fbb : 209524          >        jsr report_error
                       >
1fbe :                 >skip1729
                        
1fbe : c0ff                     cpy #$ff
                                trap_ne         ;y altered during test 
1fc0 : f003            >        beq skip1731
                       >        trap            ;failed not equal (non zero)
1fc2 : 209524          >        jsr report_error
                       >
1fc5 :                 >skip1731
                        
1fc5 : ba                       tsx
1fc6 : e0ff                     cpx #$ff
                                trap_ne         ;sp push/pop mismatch
1fc8 : f003            >        beq skip1733
                       >        trap            ;failed not equal (non zero)
1fca : 209524          >        jsr report_error
                       >
1fcd :                 >skip1733
                        
                                next_test
1fcd : ad0202          >            lda test_case   ;previous test
1fd0 : c913            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1fd2 : f003            >        beq skip1736
                       >        trap            ;failed not equal (non zero)
1fd4 : 209524          >        jsr report_error
                       >
1fd7 :                 >skip1736
                       >
0014 =                 >test_num = test_num + 1
1fd7 : a914            >            lda #test_num   ;*** next tests' number
1fd9 : 8d0202          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, the V flag is ignored
                        ;   although V is declared as beeing valid on the 65C02 it has absolutely
                        ;   no use in BCD math. No sign = no overflow!
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
1fdc : f8                       sed 
1fdd : a205                     ldx #ad2        ;for indexed test
1fdf : a0ff                     ldy #$ff        ;max range
1fe1 : a999                     lda #$99        ;start with adding 99 to 99 with carry
1fe3 : 8504                     sta ad1         ;operand 1 - accumulator
1fe5 : 8505                     sta ad2         ;operand 2 - memory or immediate
1fe7 : 8d0502                   sta ada2        ;non zp
1fea : 8506                     sta adrl        ;expected result bits 0-7
1fec : a901                     lda #1          ;set carry in & out
1fee : 8503                     sta adfc        ;carry in - for diag
1ff0 : 8507                     sta adrh        ;expected result bit 8 (carry out)
1ff2 : a981                     lda #$81        ;set N & C (99 + 99 + C = 99 + C)
1ff4 : 8508                     sta adrf
1ff6 : a900                     lda #0          ;complemented operand 2 for subtract
1ff8 : 8509                     sta sb2
1ffa : 8d0602                   sta sba2        ;non zp
1ffd : 38               tdad    sec             ;test with carry set
1ffe : 20fc20                   jsr chkdad
2001 : c603                     dec adfc        ;now with carry clear
2003 : a506                     lda adrl        ;decimal adjust result
2005 : d008                     bne tdad1       ;skip clear carry & preset result 99 (9A-1)
2007 : c607                     dec adrh
2009 : a999                     lda #$99
200b : 8506                     sta adrl
200d : d012                     bne tdad3
200f : 290f             tdad1   and #$f         ;lower nibble mask
2011 : d00c                     bne tdad2       ;no decimal adjust needed
2013 : c606                     dec adrl        ;decimal adjust (?0-6)
2015 : c606                     dec adrl
2017 : c606                     dec adrl
2019 : c606                     dec adrl
201b : c606                     dec adrl
201d : c606                     dec adrl
201f : c606             tdad2   dec adrl        ;result -1
2021 : 08               tdad3   php             ;save valid flags
2022 : 68                       pla
2023 : 2982                     and #$82        ;N-----Z-
2025 : 0507                     ora adrh        ;N-----ZC
2027 : 8508                     sta adrf
2029 : 18                       clc             ;test with carry clear
202a : 20fc20                   jsr chkdad
202d : e603                     inc adfc        ;same for operand -1 but with carry
202f : a504                     lda ad1         ;decimal adjust operand 1
2031 : f015                     beq tdad5       ;iterate operand 2
2033 : 290f                     and #$f         ;lower nibble mask
2035 : d00c                     bne tdad4       ;skip decimal adjust
2037 : c604                     dec ad1         ;decimal adjust (?0-6)
2039 : c604                     dec ad1
203b : c604                     dec ad1
203d : c604                     dec ad1
203f : c604                     dec ad1
2041 : c604                     dec ad1
2043 : c604             tdad4   dec ad1         ;operand 1 -1
2045 : 4cfd1f                   jmp tdad        ;iterate op1
                        
2048 : a999             tdad5   lda #$99        ;precharge op1 max
204a : 8504                     sta ad1
204c : a505                     lda ad2         ;decimal adjust operand 2
204e : f039                     beq tdad7       ;end of iteration
2050 : 290f                     and #$f         ;lower nibble mask
2052 : d018                     bne tdad6       ;skip decimal adjust
2054 : c605                     dec ad2         ;decimal adjust (?0-6)
2056 : c605                     dec ad2
2058 : c605                     dec ad2
205a : c605                     dec ad2
205c : c605                     dec ad2
205e : c605                     dec ad2
2060 : e609                     inc sb2         ;complemented decimal adjust for subtract (?9+6)
2062 : e609                     inc sb2
2064 : e609                     inc sb2
2066 : e609                     inc sb2
2068 : e609                     inc sb2
206a : e609                     inc sb2
206c : c605             tdad6   dec ad2         ;operand 2 -1
206e : e609                     inc sb2         ;complemented operand for subtract
2070 : a509                     lda sb2
2072 : 8d0602                   sta sba2        ;copy as non zp operand
2075 : a505                     lda ad2
2077 : 8d0502                   sta ada2        ;copy as non zp operand
207a : 8506                     sta adrl        ;new result since op1+carry=00+carry +op2=op2
207c : 08                       php             ;save flags
207d : 68                       pla
207e : 2982                     and #$82        ;N-----Z-
2080 : 0901                     ora #1          ;N-----ZC
2082 : 8508                     sta adrf
2084 : e607                     inc adrh        ;result carry
2086 : 4cfd1f                   jmp tdad        ;iterate op2
                        
2089 : e005             tdad7   cpx #ad2
                                trap_ne         ;x altered during test
208b : f003            >        beq skip1738
                       >        trap            ;failed not equal (non zero)
208d : 209524          >        jsr report_error
                       >
2090 :                 >skip1738
                        
2090 : c0ff                     cpy #$ff
                                trap_ne         ;y altered during test 
2092 : f003            >        beq skip1740
                       >        trap            ;failed not equal (non zero)
2094 : 209524          >        jsr report_error
                       >
2097 :                 >skip1740
                        
2097 : ba                       tsx
2098 : e0ff                     cpx #$ff
                                trap_ne         ;sp push/pop mismatch
209a : f003            >        beq skip1742
                       >        trap            ;failed not equal (non zero)
209c : 209524          >        jsr report_error
                       >
209f :                 >skip1742
                        
209f : d8                       cld
                        
20a0 : ad0202                   lda test_case
20a3 : c914                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
20a5 : f003            >        beq skip1744
                       >        trap            ;failed not equal (non zero)
20a7 : 209524          >        jsr report_error
                       >
20aa :                 >skip1744
                        
20aa : a9f0                     lda #$f0        ;mark opcode testing complete
20ac : 8d0202                   sta test_case
                        
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
20af : d8              >            cld
20b0 : a900            >            lda #0
20b2 : 8503            >            sta zpt         ;set low byte of indirect pointer
20b4 : 8506            >            sta zpt+3       ;checksum high byte
20b6 : a20b            >            ldx #11         ;reset modifiable RAM
20b8 : 9df902          >ccs11746      sta jxi_tab,x   ;JMP indirect page cross area
20bb : ca              >            dex
20bc : 10fa            >            bpl ccs11746
20be : 18              >            clc
20bf : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
20c1 : 7501            >ccs31746      adc zero_page,x
20c3 : 9003            >            bcc ccs21746
20c5 : e606            >            inc zpt+3       ;carry to high byte
20c7 : 18              >            clc
20c8 : e8              >ccs21746      inx
20c9 : d0f6            >            bne ccs31746
20cb : a202            >            ldx #hi(abs1)   ;set high byte of indirect pointer
20cd : 8604            >            stx zpt+1
20cf : a010            >            ldy #lo(abs1)   ;data after write & execute test area
20d1 : 7103            >ccs51746      adc (zpt),y
20d3 : 9003            >            bcc ccs41746
20d5 : e606            >            inc zpt+3       ;carry to high byte
20d7 : 18              >            clc
20d8 : c8              >ccs41746      iny
20d9 : d0f6            >            bne ccs51746
20db : e8              >            inx             ;advance RAM high address
20dc : 8604            >            stx zpt+1
20de : e000            >            cpx #ram_top
20e0 : d0ef            >            bne ccs51746
20e2 : 8505            >            sta zpt+2       ;checksum low is
20e4 : cd0302          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
20e7 : f003            >        beq skip1747
                       >        trap            ;failed not equal (non zero)
20e9 : 209524          >        jsr report_error
                       >
20ec :                 >skip1747
                       >
20ec : a506            >            lda zpt+3       ;checksum high is
20ee : cd0402          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
20f1 : f003            >        beq skip1749
                       >        trap            ;failed not equal (non zero)
20f3 : 209524          >        jsr report_error
                       >
20f6 :                 >skip1749
                       >
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to 
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************       
                        ; -------------       
                                success         ;if you get here everything went well
20f6 : 205e25          >        jsr report_success
                        
                        ; -------------       
                        ; S U C C E S S ************************************************       
20f9 : 4c0004                   jmp start       ;run again      
                        
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, V flag is ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
20fc :                  chkdad
                        ; decimal ADC / SBC zp
20fc : 08                       php             ;save carry for subtract
20fd : a504                     lda ad1
20ff : 6505                     adc ad2         ;perform add
2101 : 08                       php          
2102 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
2104 : f003            >        beq skip1752
                       >        trap            ;failed not equal (non zero)
2106 : 209524          >        jsr report_error
                       >
2109 :                 >skip1752
                        
2109 : 68                       pla             ;check flags
210a : 2983                     and #$83        ;mask N-----ZC
210c : c508                     cmp adrf
                                trap_ne         ;bad flags
210e : f003            >        beq skip1754
                       >        trap            ;failed not equal (non zero)
2110 : 209524          >        jsr report_error
                       >
2113 :                 >skip1754
                        
2113 : 28                       plp
2114 : 08                       php             ;save carry for next add
2115 : a504                     lda ad1
2117 : e509                     sbc sb2         ;perform subtract
2119 : 08                       php          
211a : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
211c : f003            >        beq skip1756
                       >        trap            ;failed not equal (non zero)
211e : 209524          >        jsr report_error
                       >
2121 :                 >skip1756
                        
2121 : 68                       pla             ;check flags
2122 : 2983                     and #$83        ;mask N-----ZC
2124 : c508                     cmp adrf
                                trap_ne         ;bad flags
2126 : f003            >        beq skip1758
                       >        trap            ;failed not equal (non zero)
2128 : 209524          >        jsr report_error
                       >
212b :                 >skip1758
                        
212b : 28                       plp
                        ; decimal ADC / SBC abs
212c : 08                       php             ;save carry for subtract
212d : a504                     lda ad1
212f : 6d0502                   adc ada2        ;perform add
2132 : 08                       php          
2133 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
2135 : f003            >        beq skip1760
                       >        trap            ;failed not equal (non zero)
2137 : 209524          >        jsr report_error
                       >
213a :                 >skip1760
                        
213a : 68                       pla             ;check flags
213b : 2983                     and #$83        ;mask N-----ZC
213d : c508                     cmp adrf
                                trap_ne         ;bad flags
213f : f003            >        beq skip1762
                       >        trap            ;failed not equal (non zero)
2141 : 209524          >        jsr report_error
                       >
2144 :                 >skip1762
                        
2144 : 28                       plp
2145 : 08                       php             ;save carry for next add
2146 : a504                     lda ad1
2148 : ed0602                   sbc sba2        ;perform subtract
214b : 08                       php          
214c : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
214e : f003            >        beq skip1764
                       >        trap            ;failed not equal (non zero)
2150 : 209524          >        jsr report_error
                       >
2153 :                 >skip1764
                        
2153 : 68                       pla             ;check flags
2154 : 2983                     and #$83        ;mask N-----ZC
2156 : c508                     cmp adrf
                                trap_ne         ;bad flags
2158 : f003            >        beq skip1766
                       >        trap            ;failed not equal (non zero)
215a : 209524          >        jsr report_error
                       >
215d :                 >skip1766
                        
215d : 28                       plp
                        ; decimal ADC / SBC #
215e : 08                       php             ;save carry for subtract
215f : a505                     lda ad2
2161 : 8d0b02                   sta ex_adci+1   ;set ADC # operand
2164 : a504                     lda ad1
2166 : 200a02                   jsr ex_adci     ;execute ADC # in RAM
2169 : 08                       php          
216a : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
216c : f003            >        beq skip1768
                       >        trap            ;failed not equal (non zero)
216e : 209524          >        jsr report_error
                       >
2171 :                 >skip1768
                        
2171 : 68                       pla             ;check flags
2172 : 2983                     and #$83        ;mask N-----ZC
2174 : c508                     cmp adrf
                                trap_ne         ;bad flags
2176 : f003            >        beq skip1770
                       >        trap            ;failed not equal (non zero)
2178 : 209524          >        jsr report_error
                       >
217b :                 >skip1770
                        
217b : 28                       plp
217c : 08                       php             ;save carry for next add
217d : a509                     lda sb2
217f : 8d0e02                   sta ex_sbci+1   ;set SBC # operand
2182 : a504                     lda ad1
2184 : 200d02                   jsr ex_sbci     ;execute SBC # in RAM
2187 : 08                       php          
2188 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
218a : f003            >        beq skip1772
                       >        trap            ;failed not equal (non zero)
218c : 209524          >        jsr report_error
                       >
218f :                 >skip1772
                        
218f : 68                       pla             ;check flags
2190 : 2983                     and #$83        ;mask N-----ZC
2192 : c508                     cmp adrf
                                trap_ne         ;bad flags
2194 : f003            >        beq skip1774
                       >        trap            ;failed not equal (non zero)
2196 : 209524          >        jsr report_error
                       >
2199 :                 >skip1774
                        
2199 : 28                       plp
                        ; decimal ADC / SBC zp,x
219a : 08                       php             ;save carry for subtract
219b : a504                     lda ad1
219d : 7500                     adc 0,x         ;perform add
219f : 08                       php          
21a0 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
21a2 : f003            >        beq skip1776
                       >        trap            ;failed not equal (non zero)
21a4 : 209524          >        jsr report_error
                       >
21a7 :                 >skip1776
                        
21a7 : 68                       pla             ;check flags
21a8 : 2983                     and #$83        ;mask N-----ZC
21aa : c508                     cmp adrf
                                trap_ne         ;bad flags
21ac : f003            >        beq skip1778
                       >        trap            ;failed not equal (non zero)
21ae : 209524          >        jsr report_error
                       >
21b1 :                 >skip1778
                        
21b1 : 28                       plp
21b2 : 08                       php             ;save carry for next add
21b3 : a504                     lda ad1
21b5 : f504                     sbc sb2-ad2,x   ;perform subtract
21b7 : 08                       php          
21b8 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
21ba : f003            >        beq skip1780
                       >        trap            ;failed not equal (non zero)
21bc : 209524          >        jsr report_error
                       >
21bf :                 >skip1780
                        
21bf : 68                       pla             ;check flags
21c0 : 2983                     and #$83        ;mask N-----ZC
21c2 : c508                     cmp adrf
                                trap_ne         ;bad flags
21c4 : f003            >        beq skip1782
                       >        trap            ;failed not equal (non zero)
21c6 : 209524          >        jsr report_error
                       >
21c9 :                 >skip1782
                        
21c9 : 28                       plp
                        ; decimal ADC / SBC abs,x
21ca : 08                       php             ;save carry for subtract
21cb : a504                     lda ad1
21cd : 7d0002                   adc ada2-ad2,x  ;perform add
21d0 : 08                       php          
21d1 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
21d3 : f003            >        beq skip1784
                       >        trap            ;failed not equal (non zero)
21d5 : 209524          >        jsr report_error
                       >
21d8 :                 >skip1784
                        
21d8 : 68                       pla             ;check flags
21d9 : 2983                     and #$83        ;mask N-----ZC
21db : c508                     cmp adrf
                                trap_ne         ;bad flags
21dd : f003            >        beq skip1786
                       >        trap            ;failed not equal (non zero)
21df : 209524          >        jsr report_error
                       >
21e2 :                 >skip1786
                        
21e2 : 28                       plp
21e3 : 08                       php             ;save carry for next add
21e4 : a504                     lda ad1
21e6 : fd0102                   sbc sba2-ad2,x  ;perform subtract
21e9 : 08                       php          
21ea : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
21ec : f003            >        beq skip1788
                       >        trap            ;failed not equal (non zero)
21ee : 209524          >        jsr report_error
                       >
21f1 :                 >skip1788
                        
21f1 : 68                       pla             ;check flags
21f2 : 2983                     and #$83        ;mask N-----ZC
21f4 : c508                     cmp adrf
                                trap_ne         ;bad flags
21f6 : f003            >        beq skip1790
                       >        trap            ;failed not equal (non zero)
21f8 : 209524          >        jsr report_error
                       >
21fb :                 >skip1790
                        
21fb : 28                       plp
                        ; decimal ADC / SBC abs,y
21fc : 08                       php             ;save carry for subtract
21fd : a504                     lda ad1
21ff : 790601                   adc ada2-$ff,y  ;perform add
2202 : 08                       php          
2203 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
2205 : f003            >        beq skip1792
                       >        trap            ;failed not equal (non zero)
2207 : 209524          >        jsr report_error
                       >
220a :                 >skip1792
                        
220a : 68                       pla             ;check flags
220b : 2983                     and #$83        ;mask N-----ZC
220d : c508                     cmp adrf
                                trap_ne         ;bad flags
220f : f003            >        beq skip1794
                       >        trap            ;failed not equal (non zero)
2211 : 209524          >        jsr report_error
                       >
2214 :                 >skip1794
                        
2214 : 28                       plp
2215 : 08                       php             ;save carry for next add
2216 : a504                     lda ad1
2218 : f90701                   sbc sba2-$ff,y  ;perform subtract
221b : 08                       php          
221c : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
221e : f003            >        beq skip1796
                       >        trap            ;failed not equal (non zero)
2220 : 209524          >        jsr report_error
                       >
2223 :                 >skip1796
                        
2223 : 68                       pla             ;check flags
2224 : 2983                     and #$83        ;mask N-----ZC
2226 : c508                     cmp adrf
                                trap_ne         ;bad flags
2228 : f003            >        beq skip1798
                       >        trap            ;failed not equal (non zero)
222a : 209524          >        jsr report_error
                       >
222d :                 >skip1798
                        
222d : 28                       plp
                        ; decimal ADC / SBC (zp,x)
222e : 08                       php             ;save carry for subtract
222f : a504                     lda ad1
2231 : 6144                     adc (lo adi2-ad2,x) ;perform add
2233 : 08                       php          
2234 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
2236 : f003            >        beq skip1800
                       >        trap            ;failed not equal (non zero)
2238 : 209524          >        jsr report_error
                       >
223b :                 >skip1800
                        
223b : 68                       pla             ;check flags
223c : 2983                     and #$83        ;mask N-----ZC
223e : c508                     cmp adrf
                                trap_ne         ;bad flags
2240 : f003            >        beq skip1802
                       >        trap            ;failed not equal (non zero)
2242 : 209524          >        jsr report_error
                       >
2245 :                 >skip1802
                        
2245 : 28                       plp
2246 : 08                       php             ;save carry for next add
2247 : a504                     lda ad1
2249 : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
224b : 08                       php          
224c : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
224e : f003            >        beq skip1804
                       >        trap            ;failed not equal (non zero)
2250 : 209524          >        jsr report_error
                       >
2253 :                 >skip1804
                        
2253 : 68                       pla             ;check flags
2254 : 2983                     and #$83        ;mask N-----ZC
2256 : c508                     cmp adrf
                                trap_ne         ;bad flags
2258 : f003            >        beq skip1806
                       >        trap            ;failed not equal (non zero)
225a : 209524          >        jsr report_error
                       >
225d :                 >skip1806
                        
225d : 28                       plp
                        ; decimal ADC / SBC (abs),y
225e : 08                       php             ;save carry for subtract
225f : a504                     lda ad1
2261 : 714d                     adc (adiy2),y   ;perform add
2263 : 08                       php          
2264 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
2266 : f003            >        beq skip1808
                       >        trap            ;failed not equal (non zero)
2268 : 209524          >        jsr report_error
                       >
226b :                 >skip1808
                        
226b : 68                       pla             ;check flags
226c : 2983                     and #$83        ;mask N-----ZC
226e : c508                     cmp adrf
                                trap_ne         ;bad flags
2270 : f003            >        beq skip1810
                       >        trap            ;failed not equal (non zero)
2272 : 209524          >        jsr report_error
                       >
2275 :                 >skip1810
                        
2275 : 28                       plp
2276 : 08                       php             ;save carry for next add
2277 : a504                     lda ad1
2279 : f14f                     sbc (sbiy2),y   ;perform subtract
227b : 08                       php          
227c : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
227e : f003            >        beq skip1812
                       >        trap            ;failed not equal (non zero)
2280 : 209524          >        jsr report_error
                       >
2283 :                 >skip1812
                        
2283 : 68                       pla             ;check flags
2284 : 2983                     and #$83        ;mask N-----ZC
2286 : c508                     cmp adrf
                                trap_ne         ;bad flags
2288 : f003            >        beq skip1814
                       >        trap            ;failed not equal (non zero)
228a : 209524          >        jsr report_error
                       >
228d :                 >skip1814
                        
228d : 28                       plp
                        ; decimal ADC / SBC (zp)
228e : 08                       php             ;save carry for subtract
228f : a504                     lda ad1
2291 : 7249                     adc (adi2)      ;perform add
2293 : 08                       php          
2294 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
2296 : f003            >        beq skip1816
                       >        trap            ;failed not equal (non zero)
2298 : 209524          >        jsr report_error
                       >
229b :                 >skip1816
                        
229b : 68                       pla             ;check flags
229c : 2983                     and #$83        ;mask N-----ZC
229e : c508                     cmp adrf
                                trap_ne         ;bad flags
22a0 : f003            >        beq skip1818
                       >        trap            ;failed not equal (non zero)
22a2 : 209524          >        jsr report_error
                       >
22a5 :                 >skip1818
                        
22a5 : 28                       plp
22a6 : 08                       php             ;save carry for next add
22a7 : a504                     lda ad1
22a9 : f24b                     sbc (sbi2)      ;perform subtract
22ab : 08                       php          
22ac : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
22ae : f003            >        beq skip1820
                       >        trap            ;failed not equal (non zero)
22b0 : 209524          >        jsr report_error
                       >
22b3 :                 >skip1820
                        
22b3 : 68                       pla             ;check flags
22b4 : 2983                     and #$83        ;mask N-----ZC
22b6 : c508                     cmp adrf
                                trap_ne         ;bad flags
22b8 : f003            >        beq skip1822
                       >        trap            ;failed not equal (non zero)
22ba : 209524          >        jsr report_error
                       >
22bd :                 >skip1822
                        
22bd : 28                       plp
22be : 60                       rts
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
22bf : a508             chkadd  lda adrf        ;add V-flag if overflow
22c1 : 2983                     and #$83        ;keep N-----ZC / clear V
22c3 : 48                       pha
22c4 : a504                     lda ad1         ;test sign unequal between operands
22c6 : 4505                     eor ad2
22c8 : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
22ca : a504                     lda ad1         ;test sign equal between operands and result
22cc : 4506                     eor adrl
22ce : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
22d0 : 68                       pla
22d1 : 0940                     ora #$40        ;set V
22d3 : 48                       pha
22d4 : 68               ckad1   pla
22d5 : 8508                     sta adrf        ;save expected flags
                        ; binary ADC / SBC (zp)
22d7 : 08                       php             ;save carry for subtract
22d8 : a504                     lda ad1
22da : 7249                     adc (adi2)      ;perform add
22dc : 08                       php          
22dd : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
22df : f003            >        beq skip1824
                       >        trap            ;failed not equal (non zero)
22e1 : 209524          >        jsr report_error
                       >
22e4 :                 >skip1824
                        
22e4 : 68                       pla             ;check flags
22e5 : 29c3                     and #$c3        ;mask NV----ZC
22e7 : c508                     cmp adrf
                                trap_ne         ;bad flags
22e9 : f003            >        beq skip1826
                       >        trap            ;failed not equal (non zero)
22eb : 209524          >        jsr report_error
                       >
22ee :                 >skip1826
                        
22ee : 28                       plp
22ef : 08                       php             ;save carry for next add
22f0 : a504                     lda ad1
22f2 : f24b                     sbc (sbi2)      ;perform subtract
22f4 : 08                       php          
22f5 : c506                     cmp adrl        ;check result
                                trap_ne         ;bad result
22f7 : f003            >        beq skip1828
                       >        trap            ;failed not equal (non zero)
22f9 : 209524          >        jsr report_error
                       >
22fc :                 >skip1828
                        
22fc : 68                       pla             ;check flags
22fd : 29c3                     and #$c3        ;mask NV----ZC
22ff : c508                     cmp adrf
                                trap_ne         ;bad flags
2301 : f003            >        beq skip1830
                       >        trap            ;failed not equal (non zero)
2303 : 209524          >        jsr report_error
                       >
2306 :                 >skip1830
                        
2306 : 28                       plp
2307 : 60                       rts
                                
                        ; target for the jump indirect test
2308 : 0e23             ji_adr  dw test_ji
230a : 5f0e                     dw ji_ret
                        
230c : 88                       dey
230d : 88                       dey
230e :                  test_ji
230e : 08                       php             ;either SP or Y count will fail, if we do not hit
230f : 88                       dey
2310 : 88                       dey
2311 : 88                       dey
2312 : 28                       plp
                                trap_cs         ;flags loaded?
2313 : 9003            >        bcc skip1832
                       >        trap            ;failed carry set
2315 : 209524          >        jsr report_error
                       >
2318 :                 >skip1832
                        
                                trap_vs
2318 : 5003            >        bvc skip1834
                       >        trap            ;failed overflow set
231a : 209524          >        jsr report_error
                       >
231d :                 >skip1834
                        
                                trap_mi
231d : 1003            >        bpl skip1836
                       >        trap            ;failed minus (bit 7 set)
231f : 209524          >        jsr report_error
                       >
2322 :                 >skip1836
                        
                                trap_eq 
2322 : d003            >        bne skip1838
                       >        trap           ;failed equal (zero)
2324 : 209524          >        jsr report_error
                       >
2327 :                 >skip1838
                        
2327 : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
2329 : f003            >        beq skip1840
                       >        trap            ;failed not equal (non zero)
232b : 209524          >        jsr report_error
                       >
232e :                 >skip1840
                        
232e : e04e                     cpx #'N'
                                trap_ne        
2330 : f003            >        beq skip1842
                       >        trap            ;failed not equal (non zero)
2332 : 209524          >        jsr report_error
                       >
2335 :                 >skip1842
                        
2335 : c041                     cpy #('D'-3)
                                trap_ne
2337 : f003            >        beq skip1844
                       >        trap            ;failed not equal (non zero)
2339 : 209524          >        jsr report_error
                       >
233c :                 >skip1844
                        
233c : 48                       pha             ;save a,x
233d : 8a                       txa
233e : 48                       pha
233f : ba                       tsx
2340 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
2342 : f003            >        beq skip1846
                       >        trap            ;failed not equal (non zero)
2344 : 209524          >        jsr report_error
                       >
2347 :                 >skip1846
                        
2347 : 68                       pla             ;restore x
2348 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
2349 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
234b : 48              >            pha         ;use stack to load status
234c : 28              >            plp
                        
234d : 68                       pla             ;restore a
234e : e8                       inx             ;return registers with modifications
234f : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
2351 : 6cff02                   jmp (ji_tab+2)
2354 : ea                       nop
2355 : ea                       nop
                                trap            ;runover protection
2356 : 209524          >        jsr report_error
                        
2359 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
                        ; target for the jump indirect test
235c : bb23             jxi_adr dw  trap_ind
235e : bb23                     dw  trap_ind
2360 : 6a23                     dw  test_jxi    ;+4
2362 : c90e                     dw  jxi_ret     ;+6
2364 : bb23                     dw  trap_ind
2366 : bb23                     dw  trap_ind
                        
2368 : 88                       dey
2369 : 88                       dey
236a :                  test_jxi
236a : 08                       php             ;either SP or Y count will fail, if we do not hit
236b : 88                       dey
236c : 88                       dey
236d : 88                       dey
236e : 28                       plp
                                trap_cs         ;flags loaded?
236f : 9003            >        bcc skip1851
                       >        trap            ;failed carry set
2371 : 209524          >        jsr report_error
                       >
2374 :                 >skip1851
                        
                                trap_vs
2374 : 5003            >        bvc skip1853
                       >        trap            ;failed overflow set
2376 : 209524          >        jsr report_error
                       >
2379 :                 >skip1853
                        
                                trap_mi
2379 : 1003            >        bpl skip1855
                       >        trap            ;failed minus (bit 7 set)
237b : 209524          >        jsr report_error
                       >
237e :                 >skip1855
                        
                                trap_eq 
237e : d003            >        bne skip1857
                       >        trap           ;failed equal (zero)
2380 : 209524          >        jsr report_error
                       >
2383 :                 >skip1857
                        
2383 : c958                     cmp #'X'        ;registers loaded?
                                trap_ne
2385 : f003            >        beq skip1859
                       >        trap            ;failed not equal (non zero)
2387 : 209524          >        jsr report_error
                       >
238a :                 >skip1859
                        
238a : e004                     cpx #4
                                trap_ne        
238c : f003            >        beq skip1861
                       >        trap            ;failed not equal (non zero)
238e : 209524          >        jsr report_error
                       >
2391 :                 >skip1861
                        
2391 : c046                     cpy #('I'-3)
                                trap_ne
2393 : f003            >        beq skip1863
                       >        trap            ;failed not equal (non zero)
2395 : 209524          >        jsr report_error
                       >
2398 :                 >skip1863
                        
2398 : 48                       pha             ;save a,x
2399 : 8a                       txa
239a : 48                       pha
239b : ba                       tsx
239c : e0fd                     cpx #$fd        ;check SP
                                trap_ne
239e : f003            >        beq skip1865
                       >        trap            ;failed not equal (non zero)
23a0 : 209524          >        jsr report_error
                       >
23a3 :                 >skip1865
                        
23a3 : 68                       pla             ;restore x
23a4 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
23a5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
23a7 : 48              >            pha         ;use stack to load status
23a8 : 28              >            plp
                        
23a9 : 68                       pla             ;restore a
23aa : e8                       inx             ;return registers with modifications
23ab : e8                       inx
23ac : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
23ae : 7cf902                   jmp (jxi_tab,x)
23b1 : ea                       nop
23b2 : ea                       nop
                                trap            ;runover protection
23b3 : 209524          >        jsr report_error
                        
23b6 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
                        ; JMP (abs,x) with bad x
23b9 : ea                       nop
23ba : ea                       nop
23bb :                  trap_ind
23bb : ea                       nop
23bc : ea                       nop
                                trap            ;near miss indexed indirect jump
23bd : 209524          >        jsr report_error
                        
23c0 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET
23c3 :                  nmi_trap
                                trap            ;check stack for conditions at NMI
23c3 : 209524          >        jsr report_error
                        
23c6 : 4c0004                   jmp start       ;catastrophic error - cannot continue
23c9 :                  res_trap
                                trap            ;unexpected RESET
23c9 : 209524          >        jsr report_error
                        
23cc : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
23cf : 88                       dey
23d0 : 88                       dey
23d1 :                  irq_trap                ;BRK test or unextpected BRK or IRQ
23d1 : 08                       php             ;either SP or Y count will fail, if we do not hit
23d2 : 88                       dey
23d3 : 88                       dey
23d4 : 88                       dey
                                ;next traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
23d5 : c9bd                     cmp #$ff-'B'    ;BRK pass 2 registers loaded?
23d7 : f05a                     beq break2
23d9 : c942                     cmp #'B'        ;BRK pass 1 registers loaded?
                                trap_ne
23db : f003            >        beq skip1873
                       >        trap            ;failed not equal (non zero)
23dd : 209524          >        jsr report_error
                       >
23e0 :                 >skip1873
                        
23e0 : e052                     cpx #'R'
                                trap_ne        
23e2 : f003            >        beq skip1875
                       >        trap            ;failed not equal (non zero)
23e4 : 209524          >        jsr report_error
                       >
23e7 :                 >skip1875
                        
23e7 : c048                     cpy #'K'-3
                                trap_ne
23e9 : f003            >        beq skip1877
                       >        trap            ;failed not equal (non zero)
23eb : 209524          >        jsr report_error
                       >
23ee :                 >skip1877
                        
23ee : 8501                     sta irq_a       ;save registers during break test
23f0 : 8602                     stx irq_x
23f2 : ba                       tsx             ;test break on stack
23f3 : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1 & unused=1 on stack
23f6 : c930            >            cmp #(0      |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne         ;possible no break flag on stack
23f8 : f003            >        beq skip1880
                       >        trap            ;failed not equal (non zero)
23fa : 209524          >        jsr report_error
                       >
23fd :                 >skip1880
                        
23fd : 68                       pla
                                cmp_flag intdis ;should have added interrupt disable
23fe : c934            >            cmp #(intdis |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
2400 : f003            >        beq skip1883
                       >        trap            ;failed not equal (non zero)
2402 : 209524          >        jsr report_error
                       >
2405 :                 >skip1883
                        
2405 : ba                       tsx
2406 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
2408 : f003            >        beq skip1885
                       >        trap            ;failed not equal (non zero)
240a : 209524          >        jsr report_error
                       >
240d :                 >skip1885
                        
240d : adff01                   lda $1ff        ;propper return on stack
2410 : c90f                     cmp #hi(brk_ret0)
                                trap_ne
2412 : f003            >        beq skip1887
                       >        trap            ;failed not equal (non zero)
2414 : 209524          >        jsr report_error
                       >
2417 :                 >skip1887
                        
2417 : adfe01                   lda $1fe
241a : c936                     cmp #lo(brk_ret0)
                                trap_ne
241c : f003            >        beq skip1889
                       >        trap            ;failed not equal (non zero)
241e : 209524          >        jsr report_error
                       >
2421 :                 >skip1889
                        
                                load_flag $ff
2421 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
2423 : 48                       pha
2424 : a602                     ldx irq_x
2426 : e8                       inx             ;return registers with modifications
2427 : a501                     lda irq_a
2429 : 49aa                     eor #$aa
242b : 28                       plp             ;N=1, V=1, Z=1, C=1 but original flags should be restored
242c : 40                       rti
                                trap            ;runover protection
242d : 209524          >        jsr report_error
                        
2430 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                                
2433 :                  break2                  ;BRK pass 2        
2433 : e0ad                     cpx #$ff-'R'
                                trap_ne        
2435 : f003            >        beq skip1893
                       >        trap            ;failed not equal (non zero)
2437 : 209524          >        jsr report_error
                       >
243a :                 >skip1893
                        
243a : c0b1                     cpy #$ff-'K'-3
                                trap_ne
243c : f003            >        beq skip1895
                       >        trap            ;failed not equal (non zero)
243e : 209524          >        jsr report_error
                       >
2441 :                 >skip1895
                        
2441 : 8501                     sta irq_a       ;save registers during break test
2443 : 8602                     stx irq_x
2445 : ba                       tsx             ;test break on stack
2446 : bd0201                   lda $102,x
                                cmp_flag $ff    ;break test should have B=1
2449 : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne         ;possibly no break flag on stack
244b : f003            >        beq skip1898
                       >        trap            ;failed not equal (non zero)
244d : 209524          >        jsr report_error
                       >
2450 :                 >skip1898
                        
2450 : 68                       pla
                                cmp_flag $ff-decmode ;actual passed flags should have decmode cleared
2451 : c9f7            >            cmp #($ff-decmode |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
2453 : f003            >        beq skip1901
                       >        trap            ;failed not equal (non zero)
2455 : 209524          >        jsr report_error
                       >
2458 :                 >skip1901
                        
2458 : ba                       tsx
2459 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
245b : f003            >        beq skip1903
                       >        trap            ;failed not equal (non zero)
245d : 209524          >        jsr report_error
                       >
2460 :                 >skip1903
                        
2460 : adff01                   lda $1ff        ;propper return on stack
2463 : c90f                     cmp #hi(brk_ret1)
                                trap_ne
2465 : f003            >        beq skip1905
                       >        trap            ;failed not equal (non zero)
2467 : 209524          >        jsr report_error
                       >
246a :                 >skip1905
                        
246a : adfe01                   lda $1fe
246d : c96b                     cmp #lo(brk_ret1)
                                trap_ne
246f : f003            >        beq skip1907
                       >        trap            ;failed not equal (non zero)
2471 : 209524          >        jsr report_error
                       >
2474 :                 >skip1907
                        
                                load_flag intdis
2474 : a904            >            lda #intdis             ;allow test to change I-flag (no mask)
                        
2476 : 48                       pha      
2477 : a602                     ldx irq_x
2479 : e8                       inx             ;return registers with modifications
247a : a501                     lda irq_a
247c : 49aa                     eor #$aa
247e : 28                       plp             ;N=0, V=0, Z=0, C=0 but original flags should be restored
247f : 40                       rti
                                trap            ;runover protection
2480 : 209524          >        jsr report_error
                        
2483 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                                
                            if report = 1
                                include "report.i65"
                        ;**** report 6502 funtional test errors to standard I/O ****
                        ;
                        ;this include file is part of the 6502 functional tests
                        ;it is used when you configure report = 1 in the tests
                        ;
                        ;to adopt the standard output vectors of your test environment
                        ;you must modify the rchar and rget subroutines in this include
                        ;
                        ;I/O hardware may have to be initialized in report_init
                        
                        ;print message macro - \1 = message location
                        rprt    macro
                                ldx #0
                                lda \1
                        loop\?
                                jsr rchar
                                inx
                                lda \1,x
                                bne loop\?
                                endm
                        
                        ;initialize I/O as required (example: configure & enable ACIA)
2486 :                  report_init
                                ;nothing to initialize
                                rprt rmsg_start
2486 : a200            >        ldx #0
2488 : ad9625          >        lda rmsg_start
248b :                 >loop1911
248b : 209325          >        jsr rchar
248e : e8              >        inx
248f : bd9625          >        lda rmsg_start,x
2492 : d0f7            >        bne loop1911
                        
2494 : 60                       rts
                                
                        ;show stack (with saved registers), zeropage and absolute memory workspace
                        ;after an error was trapped in the test program
2495 :                  report_error
                        ;save registers
2495 : 08                       php
2496 : 48                       pha
2497 : 8a                       txa
2498 : 48                       pha
2499 : 98                       tya
249a : 48                       pha
249b : d8                       cld
                        ;show stack with index to registers at error
                                rprt rmsg_stack
249c : a200            >        ldx #0
249e : ada825          >        lda rmsg_stack
24a1 :                 >loop1912
24a1 : 209325          >        jsr rchar
24a4 : e8              >        inx
24a5 : bda825          >        lda rmsg_stack,x
24a8 : d0f7            >        bne loop1912
                        
24aa : ba                       tsx
24ab : e8                       inx
24ac : a901                     lda #1      ;address high
24ae : 207f25                   jsr rhex
24b1 : 8a                       txa         ;address low
24b2 : 207f25                   jsr rhex
24b5 : 207b25           rstack  jsr rspace
24b8 : bd0001                   lda $100,x  ;stack data
24bb : 207f25                   jsr rhex
24be : e8                       inx
24bf : d0f4                     bne rstack
24c1 : 207725                   jsr rcrlf   ;new line
                        ;show zero page workspace
24c4 : a900                     lda #0
24c6 : 207f25                   jsr rhex
24c9 : a903                     lda #zpt
24cb : aa                       tax
24cc : 207f25                   jsr rhex
24cf : 207b25           rzp     jsr rspace
24d2 : b500                     lda 0,x
24d4 : 207f25                   jsr rhex
24d7 : e8                       inx
24d8 : e00a                     cpx #zp_bss
24da : d0f3                     bne rzp
24dc : 207725                   jsr rcrlf
                        ;show absolute workspace
24df : a902                     lda #hi(data_segment)
24e1 : 207f25                   jsr rhex
24e4 : a900                     lda #lo(data_segment)
24e6 : 207f25                   jsr rhex
24e9 : a200                     ldx #0
24eb : 207b25           rabs    jsr rspace
24ee : bd0002                   lda data_segment,x
24f1 : 207f25                   jsr rhex
24f4 : e8                       inx
24f5 : e00a                     cpx #(data_bss-data_segment)
24f7 : d0f2                     bne rabs
                        ;ask to continue
                                rprt rmsg_cont
24f9 : a200            >        ldx #0
24fb : adc225          >        lda rmsg_cont
24fe :                 >loop1913
24fe : 209325          >        jsr rchar
2501 : e8              >        inx
2502 : bdc225          >        lda rmsg_cont,x
2505 : d0f7            >        bne loop1913
                        
2507 : 207425           rerr1   jsr rget
250a : c953                     cmp #'S'
250c : f00b                     beq rskip
250e : c943                     cmp #'C'
2510 : d0f5                     bne rerr1        
                        ;restore registers
2512 : 68                       pla
2513 : a8                       tay
2514 : 68                       pla
2515 : aa                       tax
2516 : 68                       pla 
2517 : 28                       plp
2518 : 60                       rts
                        ;skip the current test
2519 : a9f0             rskip   lda #$f0            ;already end of tests?
251b : cd0202                   cmp test_case
251e : f0e7                     beq rerr1           ;skip is not available
2520 : a2ff                     ldx #$ff            ;clear stack
2522 : 9a                       txs
2523 : ee0202                   inc test_case       ;next test
2526 : a900                     lda #lo(start)      ;find begin of test
2528 : 8503                     sta zpt
252a : a904                     lda #hi(start)
252c : 8504                     sta zpt+1
252e : a004             rskipl1 ldy #4              ;search pattern
2530 : b103             rskipl2 lda (zpt),y         ;next byte
2532 : d95925                   cmp rmark,y
2535 : d00a                     bne rskipnx         ;no match
2537 : 88                       dey
2538 : 300f                     bmi rskipf          ;found pattern        
253a : c001                     cpy #1              ;skip immediate value
253c : d0f2                     bne rskipl2
253e : 88                       dey
253f : f0ef                     beq rskipl2
                                
2541 : e603             rskipnx inc zpt             ;next RAM location
2543 : d0e9                     bne rskipl1
2545 : e604                     inc zpt+1
2547 : d0e5                     bne rskipl1
                        
2549 : a001             rskipf  ldy #1              ;pattern found - check test number
254b : b103                     lda (zpt),y         ;test number
254d : c9f0                     cmp #$f0            ;end of last test?
254f : f005                     beq rskipe          ;ask to rerun all
2551 : cd0202                   cmp test_case       ;is next test?
2554 : d0eb                     bne rskipnx         ;continue searching
2556 : 6c0300           rskipe  jmp (zpt)           ;start next test or rerun at end of tests
                                
2559 : a900             rmark   lda #0              ;begin of test search pattern
255b : 8d0202                   sta test_case
                        
                        ;show test has ended, ask to repeat
255e :                  report_success
                            if rep_int = 1
                                rprt rmsg_priority
                                lda data_segment    ;show interrupt sequence
                                jsr rhex
                                jsr rspace
                                lda data_segment+1
                                jsr rhex
                                jsr rspace
                                lda data_segment+2
                                jsr rhex
                            endif
                                rprt rmsg_success
255e : a200            >        ldx #0
2560 : adf225          >        lda rmsg_success
2563 :                 >loop1914
2563 : 209325          >        jsr rchar
2566 : e8              >        inx
2567 : bdf225          >        lda rmsg_success,x
256a : d0f7            >        bne loop1914
                        
256c : 207425           rsuc1   jsr rget
256f : c952                     cmp #'R'
2571 : d0f9                     bne rsuc1        
2573 : 60                       rts
                        
                        ;get a character from standard input 
2574 : a500             rget    lda 0
2576 : 60                       rts
                        
                        ;input subroutine
                        ;get a character from standard input 
                        ;adjust according to the needs in your test environment
                        ;rget                ;get character in A
                        ;rget1
                        ;        lda $bff1   ;wait RDRF
                        ;        and #8
                        ;        beq rget1
                        ;not a real ACIA - so RDRF is not checked
                        ;        lda $bff0   ;read acia rx reg
                        ;        lda $f004   ;Kowalski simulator default
                        ;the load can be replaced by a call to a kernal routine
                        ;        jsr $ffcf   ;example: CHRIN for a C64
                        ;        cmp #'a'    ;lower case
                        ;        bcc rget1
                        ;        and #$5f    ;convert to upper case
                        ;rget1   rts
                        
                        ;output subroutines
2577 : a90a             rcrlf   lda #10
2579 : d018                     bne rchar
                        
257b : a920             rspace  lda #' '
257d : d014                     bne rchar
                                
257f : 48               rhex    pha         ;report hex byte in A
2580 : 4a                       lsr a       ;high nibble first
2581 : 4a                       lsr a
2582 : 4a                       lsr a
2583 : 4a                       lsr a
2584 : 208a25                   jsr rnib
2587 : 68                       pla         ;now low nibble
2588 : 290f                     and #$f
                        
258a : 18               rnib    clc         ;report nibble in A
258b : 6930                     adc #'0'    ;make printable 0-9
258d : c93a                     cmp #'9'+1
258f : 9002                     bcc rchar
2591 : 6906                     adc #6      ;make printable A-F
                        
                        ;send a character to standard output 
2593 : 8500             rchar   sta 0
2595 : 60                       rts
                        
                        ;send a character to standard output 
                        ;adjust according to the needs in your test environment
                        ;register X needs to be preserved!
                        ;rchar               ;report character in A
                        ;        pha         ;wait TDRF
                        ;rchar1  lda $bff1
                        ;        and #$10
                        ;        beq rchar1
                        ;        pla
                        ;not a real ACIA - so TDRF is not checked
                        ;        sta $bff0   ;write acia tx reg
                        ;        sta $f001   ;Kowalski simulator default
                        ;the store can be replaced by a call to a kernal routine
                        ;        jsr $ffd2   ;example: CHROUT for a C64
                        ;        rts
                        
2596 :                  rmsg_start
2596 : 0a537461727465..         db  10,"Started testing",10,0
25a8 :                  rmsg_stack
25a8 : 0a726567732059..         db  10,"regs Y  X  A  PS PCLPCH",10,0
25c2 :                  rmsg_cont
25c2 : 0a707265737320..         db  10,"press C to continue or S to skip current test",10,0
25f2 :                  rmsg_success
25f2 : 0a416c6c207465..         db  10,"All tests completed, press R to repeat",10,0
                            if rep_int = 1
                        rmsg_priority
                                db  10,"interrupt sequence (NMI IRQ BRK) ",0
                            endif
                           
                            endif
                                    
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
                        zp_init
                        zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        zp7f_   db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
                        zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
                        zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
                        zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
                        ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
                                dw  abs1+1
                                dw  abs1+2
                                dw  abs1+3
                                dw  abs7f
                        inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
                        indt_   dw  abst            ;indirect pointer to store area in absolute memory
                                dw  abst+1
                                dw  abst+2
                                dw  abst+3
                        inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
                        indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
                                dw  absAN+1
                                dw  absAN+2
                                dw  absAN+3
                        indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
                                dw  absEO+1
                                dw  absEO+2
                                dw  absEO+3
                        indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
                                dw  absOR+1
                                dw  absOR+2
                                dw  absOR+3
                        ;add/subtract indirect pointers
                        adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
                        sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
                        adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
                        sbiy2_  dw  sba2-$ff
                        zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)   
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif 
                        data_init
                        ex_adc_ adc #0              ;execute immediate opcodes
                                rts
                        ex_sbc_ sbc #0              ;execute immediate opcodes
                                rts
                        abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        abs7f_  db  $7f             ;test pattern for compare
                        ;loads
                        fLDx_   db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
                        rASL_                       ;expected result ASL & ROL -carry  
                        rROL_   db  $86,$04,$82,0   ; "
                        rROLc_  db  $87,$05,$83,1   ;expected result ROL +carry
                        rLSR_                       ;expected result LSR & ROR -carry
                        rROR_   db  $61,$41,$20,0   ; "
                        rRORc_  db  $e1,$c1,$a0,$80 ;expected result ROR +carry
                        fASL_                       ;expected flags for shifts
                        fROL_   db  fnc,fc,fn,fz    ;no carry in
                        fROLc_  db  fnc,fc,fn,0     ;carry in
                        fLSR_
                        fROR_   db  fc,0,fc,fz      ;no carry in
                        fRORc_  db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
                        rINC_   db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
                        fINC_   db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
                        absOR_  db  0,$1f,$71,$80   ;test pattern for OR
                        absAN_  db  $0f,$ff,$7f,$80 ;test pattern for AND
                        absEO_  db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
                        absORa_ db  0,$f1,$1f,0     ;test pattern for OR
                        absANa_ db  $f0,$ff,$ff,$ff ;test pattern for AND
                        absEOa_ db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
                        absrlo_ db  0,$ff,$7f,$80
                        absflo_ db  fz,fn,0,fn
                        data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif 
                        
                        vec_init
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                        vec_bss equ $fffa
                            endif                   ;end of RAM init data
                            
                        ; code at end of image due to the need to add blank space as required
                            if ($ff & (ji_ret - * - 2)) < ($ff & (jxi_ret - * - 2))
                        ; JMP (abs) when $xxff and $xx00 are from same page
261b : 00000000000000..         ds  lo(ji_ret - * - 2)
265d : ea                       nop
265e : ea                       nop
265f : ea               ji_px   nop             ;low address byte matched with ji_ret 
2660 : ea                       nop
                                trap            ;jmp indirect page cross bug
2661 : 209524          >        jsr report_error
                        
                        
                        ; JMP (abs,x) when $xxff and $xx00 are from same page
2664 : 00000000000000..         ds  lo(jxi_ret - * - 2)
26c7 : ea                       nop
26c8 : ea                       nop
26c9 : ea               jxi_px  nop             ;low address byte matched with jxi_ret 
26ca : ea                       nop
                                trap            ;jmp indexed indirect page cross bug
26cb : 209524          >        jsr report_error
                        
                            else
                        ; JMP (abs,x) when $xxff and $xx00 are from same page
                                ds  lo(jxi_ret - * - 2)
                                nop
                                nop
                        jxi_px  nop             ;low address byte matched with jxi_ret 
                                nop
                                trap            ;jmp indexed indirect page cross bug
                        
                        ; JMP (abs) when $xxff and $xx00 are from same page
                                ds  lo(ji_ret - * - 2)
                                nop
                                nop
                        ji_px   nop             ;low address byte matched with ji_ret 
                                nop
                                trap            ;jmp indirect page cross bug
                            endif
                            
                            if (load_data_direct = 1) & (ROM_vectors = 1)  
fffa =                          org $fffa       ;vectors
fffa : c323                     dw  nmi_trap
fffc : 0004                     dw  start
fffe : d123                     dw  irq_trap
                            endif
                        
fffa =                          end start
                        
No errors in pass 2.
